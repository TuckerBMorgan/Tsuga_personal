{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11","program":"/Users/hiroko/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","image","--edition=2018","/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dds\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"farbfeld\"","--cfg","feature=\"gif\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"png\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=a32cf3aa80a26bb6","-C","extra-filename=-a32cf3aa80a26bb6","--out-dir","/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps","-L","dependency=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps","--extern","bytemuck=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libbytemuck-063e56f0b7c3bd2f.rmeta","--extern","byteorder=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libbyteorder-1a54e3927daf5363.rmeta","--extern","color_quant=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libcolor_quant-506e31950b6f9376.rmeta","--extern","gif=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libgif-db6b8e7123a6a830.rmeta","--extern","jpeg=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libjpeg_decoder-524fca458a20eb1b.rmeta","--extern","num_iter=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libnum_iter-fe9a1e7eced553a0.rmeta","--extern","num_rational=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libnum_rational-58a014af6ed2af20.rmeta","--extern","num_traits=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libnum_traits-1e38b1e98a32a0e4.rmeta","--extern","png=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libpng-45bfd4c13aaef53b.rmeta","--extern","scoped_threadpool=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libscoped_threadpool-84f93009d58d0863.rmeta","--extern","tiff=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libtiff-b0fc33d05dfd7789.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/hiroko/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libimage-a32cf3aa80a26bb6.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[7057630120943765022,1856708837345080645]},"crate_root":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src","external_crates":[{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17558105223599808375,8641134072992365986]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16391569226461738429,2396501197197794813]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15218473559130501536,10412498800867537882]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15002797972794468225,1552711559034990603]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4646254705103034450,52903416994518094]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12433302035576608964,14843331431738146314]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13168698047779456167,15405996809305099045]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1207314236617024250,12058638532209810988]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9504436150329069197,1560099004311970383]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[3218777832644284082,1601517877419470567]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17216814665906341115,9093190657978815784]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11427017693389760726,5196118128760041763]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[12191498035001760627,7809175471304527825]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":14,"id":{"name":"object","disambiguator":[13343118316727369485,17294320461155615024]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[1642168034010785250,9564000522961009442]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":16,"id":{"name":"tiff","disambiguator":[2149524000029347744,9830074849364904304]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","num":17,"id":{"name":"jpeg_decoder","disambiguator":[2155820878611964947,14441403873218197368]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","num":18,"id":{"name":"byteorder","disambiguator":[1329267443577293958,10947708877403875124]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":19,"id":{"name":"rayon","disambiguator":[4613191972440160715,11941265620953829332]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":20,"id":{"name":"either","disambiguator":[4098593999036855744,6981551172028397142]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":21,"id":{"name":"rayon_core","disambiguator":[10541163034117822632,2007127896636369639]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":22,"id":{"name":"crossbeam_channel","disambiguator":[2052144082903411827,11013142710888669578]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":23,"id":{"name":"cfg_if","disambiguator":[10645903167683084943,7507394493178449852]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":24,"id":{"name":"crossbeam_utils","disambiguator":[12249674517246884389,3959205480579387847]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":25,"id":{"name":"const_fn","disambiguator":[9962535952213963955,17548729641558516095]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":26,"id":{"name":"lazy_static","disambiguator":[7323878164186592709,3664285558321133328]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":27,"id":{"name":"crossbeam_deque","disambiguator":[2115088636563217883,15495771120442092140]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":28,"id":{"name":"crossbeam_epoch","disambiguator":[17590297872703006707,5300033388501394944]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":29,"id":{"name":"scopeguard","disambiguator":[18211460972924623792,14298880236037486232]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":30,"id":{"name":"memoffset","disambiguator":[772422491141327713,5833899906491032737]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":31,"id":{"name":"num_cpus","disambiguator":[10728630801135717797,10686795360415260461]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":32,"id":{"name":"libc","disambiguator":[14174293587568776457,7192531006648404102]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":33,"id":{"name":"miniz_oxide","disambiguator":[4946607486664554506,13388139498805762589]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":34,"id":{"name":"adler","disambiguator":[15847833449313237884,6308872387609492432]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":35,"id":{"name":"weezl","disambiguator":[12622806663072799639,15200427237786325573]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","num":36,"id":{"name":"num_traits","disambiguator":[232350437020485540,14986150533027908738]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","num":37,"id":{"name":"gif","disambiguator":[15236012841866815845,1503531500896124022]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","num":38,"id":{"name":"color_quant","disambiguator":[2325900947149695645,2593268885279374387]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","num":39,"id":{"name":"num_rational","disambiguator":[14322971403813460214,9381810979762178918]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","num":40,"id":{"name":"num_integer","disambiguator":[13975095593645502028,2293873673250647163]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","num":41,"id":{"name":"scoped_threadpool","disambiguator":[1879448953928954418,17108822839715134690]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","num":42,"id":{"name":"num_iter","disambiguator":[13413948256480517707,3762242372458390174]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":43,"id":{"name":"png","disambiguator":[12107458353582404290,12452594348952619300]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":44,"id":{"name":"bitflags","disambiguator":[12336448744031530529,17072759629808312431]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":45,"id":{"name":"deflate","disambiguator":[3931980220157176455,4177270683313860943]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":46,"id":{"name":"adler32","disambiguator":[8381659873363603384,2355112727008450281]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":47,"id":{"name":"crc32fast","disambiguator":[1918382646010406692,2005130629612887560]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","num":48,"id":{"name":"miniz_oxide","disambiguator":[3154633640878676182,5256666017993151097]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","num":49,"id":{"name":"bytemuck","disambiguator":[15547703730850227799,15682637470514962802]}}],"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":0,"byte_end":12654,"line_start":1,"line_end":391,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":5491},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3843,"byte_end":3852,"line_start":104,"line_end":104,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5530},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3854,"byte_end":3871,"line_start":104,"line_end":104,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5954},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5955},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3898,"byte_end":3902,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":6041},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6042},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3904,"byte_end":3909,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":5896},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5897},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":5983},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5984},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3916,"byte_end":3920,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":5925},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5926},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":106,"line_end":106,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":6012},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6013},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3927,"byte_end":3931,"line_start":106,"line_end":106,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":4047},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3958,"byte_end":3968,"line_start":108,"line_end":108,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3970,"byte_end":3981,"line_start":108,"line_end":108,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3862},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4008,"byte_end":4024,"line_start":110,"line_end":110,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3888},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4042,"byte_end":4054,"line_start":111,"line_end":111,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3875},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4072,"byte_end":4088,"line_start":112,"line_end":112,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3843},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4106,"byte_end":4118,"line_start":113,"line_end":113,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3856},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4136,"byte_end":4151,"line_start":114,"line_end":114,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3865},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4169,"byte_end":4181,"line_start":115,"line_end":115,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6154},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4199,"byte_end":4210,"line_start":116,"line_end":116,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6199},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4228,"byte_end":4245,"line_start":117,"line_end":117,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6235},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4263,"byte_end":4271,"line_start":118,"line_end":118,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6250},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4318,"byte_end":4324,"line_start":120,"line_end":120,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3900},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4342,"byte_end":4350,"line_start":121,"line_end":121,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3426},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4397,"byte_end":4411,"line_start":124,"line_end":124,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3425},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4430,"byte_end":4439,"line_start":125,"line_end":125,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5460},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4490,"byte_end":4501,"line_start":127,"line_end":127,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3423},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4520,"byte_end":4528,"line_start":128,"line_end":128,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3424},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4547,"byte_end":4556,"line_start":129,"line_end":129,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4232},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4581,"byte_end":4592,"line_start":131,"line_end":131,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3948},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4629,"byte_end":4644,"line_start":134,"line_end":134,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3954},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4646,"byte_end":4655,"line_start":134,"line_end":134,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3985},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4657,"byte_end":4662,"line_start":134,"line_end":134,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4732,"byte_end":4744,"line_start":137,"line_end":137,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4746,"byte_end":4750,"line_start":137,"line_end":137,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3784},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4779,"byte_end":4795,"line_start":138,"line_end":138,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3785},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4797,"byte_end":4825,"line_start":138,"line_end":138,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3776},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4827,"byte_end":4831,"line_start":138,"line_end":138,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3780},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4852,"byte_end":4863,"line_start":139,"line_end":139,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3782},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4865,"byte_end":4888,"line_start":139,"line_end":139,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3778},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4890,"byte_end":4906,"line_start":139,"line_end":139,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6121},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4935,"byte_end":4947,"line_start":141,"line_end":141,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5440},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4977,"byte_end":4982,"line_start":143,"line_end":143,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5433},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4984,"byte_end":4989,"line_start":143,"line_end":143,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3058},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":4991,"byte_end":4997,"line_start":143,"line_end":143,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3410},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5220,"byte_end":5233,"line_start":152,"line_end":152,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3228},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5243,"byte_end":5258,"line_start":153,"line_end":153,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3273},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5268,"byte_end":5286,"line_start":154,"line_end":154,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3251},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5296,"byte_end":5309,"line_start":155,"line_end":155,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3293},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5319,"byte_end":5335,"line_start":156,"line_end":156,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3130},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5345,"byte_end":5351,"line_start":157,"line_end":157,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3155},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5361,"byte_end":5370,"line_start":158,"line_end":158,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3177},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5380,"byte_end":5384,"line_start":159,"line_end":159,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":3204},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5394,"byte_end":5401,"line_start":160,"line_end":160,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":4188},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","byte_start":30444,"byte_end":30448,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":4213},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36101,"byte_end":36111,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4218},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36149,"byte_end":36159,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4219},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36149,"byte_end":36159,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":162}},{"kind":"Use","ref_id":{"krate":0,"index":4220},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36161,"byte_end":36169,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4221},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36161,"byte_end":36169,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":4222},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36171,"byte_end":36179,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4223},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36171,"byte_end":36179,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":4214},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36181,"byte_end":36188,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4215},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36181,"byte_end":36188,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":165}},{"kind":"Use","ref_id":{"krate":0,"index":4216},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36190,"byte_end":36198,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4217},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36190,"byte_end":36198,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":166}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36257,"byte_end":36272,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36274,"byte_end":36298,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36300,"byte_end":36313,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36315,"byte_end":36337,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":209},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36339,"byte_end":36348,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36354,"byte_end":36372,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36374,"byte_end":36383,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":207},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36385,"byte_end":36393,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":216},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36395,"byte_end":36407,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36409,"byte_end":36420,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36422,"byte_end":36434,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36436,"byte_end":36454,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36456,"byte_end":36472,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":392},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36519,"byte_end":36523,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":385},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36525,"byte_end":36534,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":390},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36536,"byte_end":36542,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36544,"byte_end":36553,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":395},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36555,"byte_end":36564,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36614,"byte_end":36622,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36624,"byte_end":36632,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36634,"byte_end":36640,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":257},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36642,"byte_end":36651,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":272},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36653,"byte_end":36662,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":312},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36664,"byte_end":36676,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36678,"byte_end":36684,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4208},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36711,"byte_end":36718,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":4209},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36711,"byte_end":36718,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":195}},{"kind":"Use","ref_id":{"krate":0,"index":277},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36720,"byte_end":36728,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":148}},{"kind":"Use","ref_id":{"krate":0,"index":448},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/mod.rs","byte_start":100320,"byte_end":100326,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":426}},{"kind":"Use","ref_id":{"krate":0,"index":823},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183477,"byte_end":183487,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":712}},{"kind":"Use","ref_id":{"krate":0,"index":942},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183590,"byte_end":183600,"line_start":12,"line_end":12,"column_start":25,"column_end":35},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":712}},{"kind":"Use","ref_id":{"krate":0,"index":946},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183602,"byte_end":183612,"line_start":12,"line_end":12,"column_start":37,"column_end":47},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":712}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":315021,"byte_end":315022,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"RGBE8Pixel, HdrImageDecoderIterator, HdrAdapter, rgbe8, Rgbe8Pixel, HdrMetadata, HdrDecoder, HDRImageDecoderIterator, SIGNATURE, HdrReader, HDRMetadata, HDRAdapter, read_raw_file","parent":{"krate":0,"index":1339}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":315047,"byte_end":315048,"line_start":15,"line_end":15,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"HdrEncoder, to_rgbe8, HDREncoder","parent":{"krate":0,"index":1339}},{"kind":"Use","ref_id":{"krate":0,"index":1613},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":367119,"byte_end":367129,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":1567}},{"kind":"Use","ref_id":{"krate":0,"index":1676},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":367176,"byte_end":367186,"line_start":11,"line_end":11,"column_start":25,"column_end":35},"alias_span":null,"name":"IcoEncoder","value":"","parent":{"krate":0,"index":1567}},{"kind":"Use","ref_id":{"krate":0,"index":1679},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":367188,"byte_end":367198,"line_start":11,"line_end":11,"column_start":37,"column_end":47},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":1567}},{"kind":"Use","ref_id":{"krate":0,"index":1719},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384733,"byte_end":384744,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":1694}},{"kind":"Use","ref_id":{"krate":0,"index":1832},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384847,"byte_end":384858,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":1694}},{"kind":"Use","ref_id":{"krate":0,"index":4891},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384860,"byte_end":384872,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":1694}},{"kind":"Use","ref_id":{"krate":0,"index":4873},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384874,"byte_end":384890,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":1694}},{"kind":"Use","ref_id":{"krate":0,"index":1844},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384892,"byte_end":384903,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":1694}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479354,"byte_end":479364,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2303},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479467,"byte_end":479477,"line_start":9,"line_end":9,"column_start":25,"column_end":35},"alias_span":null,"name":"PnmEncoder","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479479,"byte_end":479489,"line_start":9,"line_end":9,"column_start":37,"column_end":47},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479547,"byte_end":479562,"line_start":11,"line_end":11,"column_start":24,"column_end":39},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479564,"byte_end":479581,"line_start":11,"line_end":11,"column_start":41,"column_end":58},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5142},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479583,"byte_end":479595,"line_start":11,"line_end":11,"column_start":60,"column_end":72},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5151},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479597,"byte_end":479610,"line_start":11,"line_end":11,"column_start":74,"column_end":87},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5161},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479635,"byte_end":479647,"line_start":12,"line_end":12,"column_start":24,"column_end":36},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2405},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479767,"byte_end":479776,"line_start":14,"line_end":14,"column_start":24,"column_end":33},"alias_span":null,"name":"PnmHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2408},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479778,"byte_end":479787,"line_start":14,"line_end":14,"column_start":35,"column_end":44},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5118},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479789,"byte_end":479799,"line_start":14,"line_end":14,"column_start":46,"column_end":56},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2404},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479801,"byte_end":479811,"line_start":14,"line_end":14,"column_start":58,"column_end":68},"alias_span":null,"name":"PnmSubtype","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":5102},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479813,"byte_end":479827,"line_start":14,"line_end":14,"column_start":70,"column_end":84},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":2057}},{"kind":"Use","ref_id":{"krate":0,"index":2489},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":568091,"byte_end":568101,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":2453}},{"kind":"Use","ref_id":{"krate":0,"index":2555},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":568167,"byte_end":568177,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaEncoder","value":"","parent":{"krate":0,"index":2453}},{"kind":"Use","ref_id":{"krate":0,"index":2730},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/mod.rs","byte_start":606168,"byte_end":606179,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":2690}},{"kind":"Use","ref_id":{"krate":0,"index":946},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8617,"byte_end":8627,"line_start":257,"line_end":257,"column_start":34,"column_end":44},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":2959}},{"kind":"Use","ref_id":{"krate":0,"index":823},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8629,"byte_end":8639,"line_start":257,"line_end":257,"column_start":46,"column_end":56},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":2959}},{"kind":"Use","ref_id":{"krate":0,"index":942},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8641,"byte_end":8651,"line_start":257,"line_end":257,"column_start":58,"column_end":68},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":2959}},{"kind":"Use","ref_id":{"krate":0,"index":1004},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8799,"byte_end":8809,"line_start":263,"line_end":263,"column_start":33,"column_end":43},"alias_span":null,"name":"DdsDecoder","value":"","parent":{"krate":0,"index":2964}},{"kind":"Use","ref_id":{"krate":0,"index":1086},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9000,"byte_end":9010,"line_start":271,"line_end":271,"column_start":9,"column_end":19},"alias_span":null,"name":"DXTEncoder","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1077},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9012,"byte_end":9021,"line_start":271,"line_end":271,"column_start":21,"column_end":30},"alias_span":null,"name":"DXTReader","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":4614},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9023,"byte_end":9033,"line_start":271,"line_end":271,"column_start":32,"column_end":42},"alias_span":null,"name":"DXTVariant","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9035,"byte_end":9045,"line_start":271,"line_end":271,"column_start":44,"column_end":54},"alias_span":null,"name":"DxtDecoder","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9047,"byte_end":9057,"line_start":271,"line_end":271,"column_start":56,"column_end":66},"alias_span":null,"name":"DxtEncoder","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1073},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9059,"byte_end":9068,"line_start":271,"line_end":271,"column_start":68,"column_end":77},"alias_span":null,"name":"DxtReader","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1040},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9070,"byte_end":9080,"line_start":271,"line_end":271,"column_start":79,"column_end":89},"alias_span":null,"name":"DxtVariant","value":"","parent":{"krate":0,"index":2966}},{"kind":"Use","ref_id":{"krate":0,"index":1201},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9260,"byte_end":9275,"line_start":278,"line_end":278,"column_start":39,"column_end":54},"alias_span":null,"name":"FarbfeldDecoder","value":"","parent":{"krate":0,"index":2975}},{"kind":"Use","ref_id":{"krate":0,"index":1223},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9277,"byte_end":9292,"line_start":278,"line_end":278,"column_start":56,"column_end":71},"alias_span":null,"name":"FarbfeldEncoder","value":"","parent":{"krate":0,"index":2975}},{"kind":"Use","ref_id":{"krate":0,"index":1171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9294,"byte_end":9308,"line_start":278,"line_end":278,"column_start":73,"column_end":87},"alias_span":null,"name":"FarbfeldReader","value":"","parent":{"krate":0,"index":2975}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9482,"byte_end":9489,"line_start":285,"line_end":285,"column_start":34,"column_end":41},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":2980}},{"kind":"Use","ref_id":{"krate":0,"index":1270},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9491,"byte_end":9501,"line_start":285,"line_end":285,"column_start":43,"column_end":53},"alias_span":null,"name":"GifDecoder","value":"","parent":{"krate":0,"index":2980}},{"kind":"Use","ref_id":{"krate":0,"index":1314},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9503,"byte_end":9513,"line_start":285,"line_end":285,"column_start":55,"column_end":65},"alias_span":null,"name":"GifEncoder","value":"","parent":{"krate":0,"index":2980}},{"kind":"Use","ref_id":{"krate":0,"index":1276},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9515,"byte_end":9524,"line_start":285,"line_end":285,"column_start":67,"column_end":76},"alias_span":null,"name":"GifReader","value":"","parent":{"krate":0,"index":2980}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9716,"byte_end":9729,"line_start":293,"line_end":293,"column_start":9,"column_end":22},"alias_span":null,"name":"read_raw_file","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9731,"byte_end":9736,"line_start":293,"line_end":293,"column_start":24,"column_end":29},"alias_span":null,"name":"rgbe8","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1563},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9738,"byte_end":9746,"line_start":293,"line_end":293,"column_start":31,"column_end":39},"alias_span":null,"name":"to_rgbe8","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1387},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9748,"byte_end":9758,"line_start":293,"line_end":293,"column_start":41,"column_end":51},"alias_span":null,"name":"HDRAdapter","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1526},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9760,"byte_end":9770,"line_start":293,"line_end":293,"column_start":53,"column_end":63},"alias_span":null,"name":"HDREncoder","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1460},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9772,"byte_end":9795,"line_start":293,"line_end":293,"column_start":65,"column_end":88},"alias_span":null,"name":"HDRImageDecoderIterator","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9805,"byte_end":9816,"line_start":294,"line_end":294,"column_start":9,"column_end":20},"alias_span":null,"name":"HDRMetadata","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":4705},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9818,"byte_end":9828,"line_start":294,"line_end":294,"column_start":22,"column_end":32},"alias_span":null,"name":"HdrAdapter","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":4712},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9830,"byte_end":9840,"line_start":294,"line_end":294,"column_start":34,"column_end":44},"alias_span":null,"name":"HdrDecoder","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1523},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9842,"byte_end":9852,"line_start":294,"line_end":294,"column_start":46,"column_end":56},"alias_span":null,"name":"HdrEncoder","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9854,"byte_end":9877,"line_start":294,"line_end":294,"column_start":58,"column_end":81},"alias_span":null,"name":"HdrImageDecoderIterator","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":4741},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9879,"byte_end":9890,"line_start":294,"line_end":294,"column_start":83,"column_end":94},"alias_span":null,"name":"HdrMetadata","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9900,"byte_end":9909,"line_start":295,"line_end":295,"column_start":9,"column_end":18},"alias_span":null,"name":"HdrReader","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1420},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9911,"byte_end":9921,"line_start":295,"line_end":295,"column_start":20,"column_end":30},"alias_span":null,"name":"RGBE8Pixel","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":4721},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9923,"byte_end":9933,"line_start":295,"line_end":295,"column_start":32,"column_end":42},"alias_span":null,"name":"Rgbe8Pixel","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1418},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9935,"byte_end":9944,"line_start":295,"line_end":295,"column_start":44,"column_end":53},"alias_span":null,"name":"SIGNATURE","value":"","parent":{"krate":0,"index":2986}},{"kind":"Use","ref_id":{"krate":0,"index":1679},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10136,"byte_end":10146,"line_start":303,"line_end":303,"column_start":34,"column_end":44},"alias_span":null,"name":"ICOEncoder","value":"","parent":{"krate":0,"index":3004}},{"kind":"Use","ref_id":{"krate":0,"index":1613},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10148,"byte_end":10158,"line_start":303,"line_end":303,"column_start":46,"column_end":56},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":3004}},{"kind":"Use","ref_id":{"krate":0,"index":1676},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10160,"byte_end":10170,"line_start":303,"line_end":303,"column_start":58,"column_end":68},"alias_span":null,"name":"IcoEncoder","value":"","parent":{"krate":0,"index":3004}},{"kind":"Use","ref_id":{"krate":0,"index":1844},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10371,"byte_end":10382,"line_start":311,"line_end":311,"column_start":9,"column_end":20},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":3009}},{"kind":"Use","ref_id":{"krate":0,"index":1719},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10384,"byte_end":10395,"line_start":311,"line_end":311,"column_start":22,"column_end":33},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":3009}},{"kind":"Use","ref_id":{"krate":0,"index":1832},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10397,"byte_end":10408,"line_start":311,"line_end":311,"column_start":35,"column_end":46},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":3009}},{"kind":"Use","ref_id":{"krate":0,"index":4891},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10410,"byte_end":10422,"line_start":311,"line_end":311,"column_start":48,"column_end":60},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":3009}},{"kind":"Use","ref_id":{"krate":0,"index":4873},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10424,"byte_end":10440,"line_start":311,"line_end":311,"column_start":62,"column_end":78},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":3009}},{"kind":"Use","ref_id":{"krate":0,"index":2002},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10642,"byte_end":10653,"line_start":320,"line_end":320,"column_start":9,"column_end":20},"alias_span":null,"name":"ApngDecoder","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":2033},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10655,"byte_end":10665,"line_start":320,"line_end":320,"column_start":22,"column_end":32},"alias_span":null,"name":"PNGEncoder","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":1969},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10667,"byte_end":10676,"line_start":320,"line_end":320,"column_start":34,"column_end":43},"alias_span":null,"name":"PNGReader","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":1978},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10678,"byte_end":10688,"line_start":320,"line_end":320,"column_start":45,"column_end":55},"alias_span":null,"name":"PngDecoder","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":2028},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10690,"byte_end":10700,"line_start":320,"line_end":320,"column_start":57,"column_end":67},"alias_span":null,"name":"PngEncoder","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":1964},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10702,"byte_end":10711,"line_start":320,"line_end":320,"column_start":69,"column_end":78},"alias_span":null,"name":"PngReader","value":"","parent":{"krate":0,"index":3016}},{"kind":"Use","ref_id":{"krate":0,"index":5171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10947,"byte_end":10962,"line_start":329,"line_end":329,"column_start":9,"column_end":24},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10964,"byte_end":10981,"line_start":329,"line_end":329,"column_start":26,"column_end":43},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5142},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10983,"byte_end":10995,"line_start":329,"line_end":329,"column_start":45,"column_end":57},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5151},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10997,"byte_end":11010,"line_start":329,"line_end":329,"column_start":59,"column_end":72},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11012,"byte_end":11022,"line_start":329,"line_end":329,"column_start":74,"column_end":84},"alias_span":null,"name":"PNMEncoder","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2408},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11024,"byte_end":11033,"line_start":329,"line_end":329,"column_start":86,"column_end":95},"alias_span":null,"name":"PNMHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5118},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11043,"byte_end":11053,"line_start":330,"line_end":330,"column_start":9,"column_end":19},"alias_span":null,"name":"PNMSubtype","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5161},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11055,"byte_end":11067,"line_start":330,"line_end":330,"column_start":21,"column_end":33},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2167},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11069,"byte_end":11079,"line_start":330,"line_end":330,"column_start":35,"column_end":45},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2303},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11081,"byte_end":11091,"line_start":330,"line_end":330,"column_start":47,"column_end":57},"alias_span":null,"name":"PnmEncoder","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2405},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11093,"byte_end":11102,"line_start":330,"line_end":330,"column_start":59,"column_end":68},"alias_span":null,"name":"PnmHeader","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2404},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11104,"byte_end":11114,"line_start":330,"line_end":330,"column_start":70,"column_end":80},"alias_span":null,"name":"PnmSubtype","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":5102},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11116,"byte_end":11130,"line_start":330,"line_end":330,"column_start":82,"column_end":96},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":3024}},{"kind":"Use","ref_id":{"krate":0,"index":2489},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11323,"byte_end":11333,"line_start":338,"line_end":338,"column_start":34,"column_end":44},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":3039}},{"kind":"Use","ref_id":{"krate":0,"index":2555},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11335,"byte_end":11345,"line_start":338,"line_end":338,"column_start":46,"column_end":56},"alias_span":null,"name":"TgaEncoder","value":"","parent":{"krate":0,"index":3039}},{"kind":"Use","ref_id":{"krate":0,"index":2648},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11537,"byte_end":11548,"line_start":345,"line_end":345,"column_start":35,"column_end":46},"alias_span":null,"name":"TiffDecoder","value":"","parent":{"krate":0,"index":3043}},{"kind":"Use","ref_id":{"krate":0,"index":2678},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11550,"byte_end":11561,"line_start":345,"line_end":345,"column_start":48,"column_end":59},"alias_span":null,"name":"TiffEncoder","value":"","parent":{"krate":0,"index":3043}},{"kind":"Use","ref_id":{"krate":0,"index":2661},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11563,"byte_end":11573,"line_start":345,"line_end":345,"column_start":61,"column_end":71},"alias_span":null,"name":"TiffReader","value":"","parent":{"krate":0,"index":3043}},{"kind":"Use","ref_id":{"krate":0,"index":2769},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11752,"byte_end":11755,"line_start":352,"line_end":352,"column_start":35,"column_end":38},"alias_span":null,"name":"vp8","value":"","parent":{"krate":0,"index":3048}},{"kind":"Use","ref_id":{"krate":0,"index":2730},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11757,"byte_end":11768,"line_start":352,"line_end":352,"column_start":40,"column_end":51},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":3048}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":0,"byte_end":12654,"line_start":1,"line_end":391,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":6313},{"krate":0,"index":9},{"krate":0,"index":6315},{"krate":0,"index":10},{"krate":0,"index":6317},{"krate":0,"index":11},{"krate":0,"index":6319},{"krate":0,"index":12},{"krate":0,"index":6321},{"krate":0,"index":13},{"krate":0,"index":6323},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":148},{"krate":0,"index":426},{"krate":0,"index":532},{"krate":0,"index":711},{"krate":0,"index":2959},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2975},{"krate":0,"index":2980},{"krate":0,"index":2986},{"krate":0,"index":3004},{"krate":0,"index":3009},{"krate":0,"index":3016},{"krate":0,"index":3024},{"krate":0,"index":3039},{"krate":0,"index":3043},{"krate":0,"index":3048},{"krate":0,"index":3052},{"krate":0,"index":3092},{"krate":0,"index":3433},{"krate":0,"index":3631},{"krate":0,"index":3787},{"krate":0,"index":3933},{"krate":0,"index":4031},{"krate":0,"index":6306},{"krate":0,"index":4046}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Cursor;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":842,"byte_end":868,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":869,"byte_end":910,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":911,"byte_end":961,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":962,"byte_end":990,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":991,"byte_end":994,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":995,"byte_end":1053,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).decode()?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1054,"byte_end":1116,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1117,"byte_end":1129,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1130,"byte_end":1137,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1138,"byte_end":1145,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1146,"byte_end":1149,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1150,"byte_end":1207,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1208,"byte_end":1211,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1212,"byte_end":1230,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::Write;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1231,"byte_end":1256,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1257,"byte_end":1292,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1293,"byte_end":1323,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1324,"byte_end":1353,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1354,"byte_end":1404,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1405,"byte_end":1452,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1453,"byte_end":1501,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1502,"byte_end":1529,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1530,"byte_end":1533,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1534,"byte_end":1574,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut bytes, image::ImageOutputFormat::Png)?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1575,"byte_end":1637,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ # Ok(())","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1638,"byte_end":1650,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1651,"byte_end":1658,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1659,"byte_end":1706,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1707,"byte_end":1714,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1715,"byte_end":1718,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1719,"byte_end":1842,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1843,"byte_end":1846,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1847,"byte_end":1895,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1896,"byte_end":1952,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1953,"byte_end":1994,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1995,"byte_end":1998,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":1999,"byte_end":2018,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2019,"byte_end":2022,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2023,"byte_end":2065,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2066,"byte_end":2132,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2133,"byte_end":2211,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2212,"byte_end":2258,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2259,"byte_end":2262,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2263,"byte_end":2309,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2310,"byte_end":2366,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2367,"byte_end":2443,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2444,"byte_end":2524,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2525,"byte_end":2565,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2566,"byte_end":2569,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2570,"byte_end":2623,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2624,"byte_end":2669,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2670,"byte_end":2714,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2715,"byte_end":2759,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2760,"byte_end":2789,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2790,"byte_end":2793,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2794,"byte_end":2831,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2832,"byte_end":2835,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderExt`] traits are implemented for many image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2836,"byte_end":2927,"line_start":76,"line_end":76,"column_start":1,"column_end":92}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":2928,"byte_end":3026,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3027,"byte_end":3089,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3090,"byte_end":3093,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3094,"byte_end":3176,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3177,"byte_end":3180,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3181,"byte_end":3259,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderExt`]: trait.ImageDecoderExt.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3260,"byte_end":3311,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3312,"byte_end":3357,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3358,"byte_end":3403,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3404,"byte_end":3426,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3427,"byte_end":3458,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3459,"byte_end":3484,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3485,"byte_end":3505,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3506,"byte_end":3544,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":3642,"byte_end":3683,"line_start":93,"line_end":93,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":4047},{"krate":0,"index":4066},{"krate":0,"index":4068},{"krate":0,"index":4071},{"krate":0,"index":4073},{"krate":0,"index":4095},{"krate":0,"index":4093},{"krate":0,"index":4090},{"krate":0,"index":4086},{"krate":0,"index":4087},{"krate":0,"index":4097},{"krate":0,"index":4100},{"krate":0,"index":4102},{"krate":0,"index":4105},{"krate":0,"index":4107},{"krate":0,"index":4129},{"krate":0,"index":4127},{"krate":0,"index":4124},{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4131},{"krate":0,"index":4134},{"krate":0,"index":4136},{"krate":0,"index":4138},{"krate":0,"index":4140},{"krate":0,"index":4160},{"krate":0,"index":4158},{"krate":0,"index":4155},{"krate":0,"index":4151},{"krate":0,"index":4152},{"krate":0,"index":4148},{"krate":0,"index":4149},{"krate":0,"index":4162},{"krate":0,"index":4186},{"krate":0,"index":4184},{"krate":0,"index":4181},{"krate":0,"index":4177},{"krate":0,"index":4178},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12656,"byte_end":12699,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12700,"byte_end":12703,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12704,"byte_end":12797,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12798,"byte_end":12897,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12898,"byte_end":12973,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12974,"byte_end":12977,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":12978,"byte_end":13077,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13078,"byte_end":13176,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13177,"byte_end":13272,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13273,"byte_end":13369,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13370,"byte_end":13466,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13467,"byte_end":13548,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13549,"byte_end":13552,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13553,"byte_end":13593,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4048},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14305,"byte_end":14313,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14022,"byte_end":14066,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14071,"byte_end":14074,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14079,"byte_end":14172,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14177,"byte_end":14260,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14265,"byte_end":14300,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4051},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14699,"byte_end":14707,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14335,"byte_end":14379,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14384,"byte_end":14387,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14392,"byte_end":14478,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14483,"byte_end":14576,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14581,"byte_end":14674,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14679,"byte_end":14694,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4054},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14947,"byte_end":14956,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14729,"byte_end":14777,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14782,"byte_end":14785,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14790,"byte_end":14881,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14886,"byte_end":14942,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4057},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15216,"byte_end":15222,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14979,"byte_end":15056,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15061,"byte_end":15064,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15069,"byte_end":15164,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15169,"byte_end":15211,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4060},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15560,"byte_end":15571,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15241,"byte_end":15305,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15310,"byte_end":15313,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15318,"byte_end":15402,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15407,"byte_end":15444,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15449,"byte_end":15496,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15501,"byte_end":15555,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4063},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15662,"byte_end":15669,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":4047},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15596,"byte_end":15657,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":4047},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":14005,"byte_end":14015,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n\n    /// An error was encountered while decoding.\n    ///\n    /// This means that the input data did not conform to the specification of some image format,\n    /// or that no format could be determined, or that it did not match format specific\n    /// requirements set by the caller.\n    Decoding(DecodingError),\n\n    /// An error was encountered while encoding.\n    ///\n    /// The input image can not be encoded with the chosen format, for example because the\n    /// specification has no representation for its color space or because a necessary conversion\n    /// is ambiguous. In some cases it might also happen that the dimensions can not be used with\n    /// the format.\n    Encoding(EncodingError),\n\n    /// An error was encountered in input arguments.\n    ///\n    /// This is a catch-all case for strictly internal operations such as scaling, conversions,\n    /// etc. that involve no external format specifications.\n    Parameter(ParameterError),\n\n    /// Completing the operation would have required more resources than allowed.\n    ///\n    /// Errors of this type are limits set by the user or environment, *not* inherent in a specific\n    /// format or operation that was executed.\n    Limits(LimitError),\n\n    /// An operation can not be completed by the chosen abstraction.\n    ///\n    /// This means that it might be possible for the operation to succeed in general but\n    /// * it requires a disabled feature,\n    /// * the implementation does not yet exist, or\n    /// * no abstraction for a lower level could be found.\n    Unsupported(UnsupportedError),\n\n    /// An error occurred while interacting with the environment.\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4054},{"krate":0,"index":4057},{"krate":0,"index":4060},{"krate":0,"index":4063}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13747,"byte_end":13795,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13796,"byte_end":13799,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13800,"byte_end":13892,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":13893,"byte_end":13978,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4068},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15901,"byte_end":15917,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":4069},{"krate":0,"index":4070}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15685,"byte_end":15742,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15743,"byte_end":15746,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15747,"byte_end":15806,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15807,"byte_end":15810,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15811,"byte_end":15872,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4074},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16156,"byte_end":16161,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16104,"byte_end":16151,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4077},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16228,"byte_end":16234,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16186,"byte_end":16223,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4080},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16378,"byte_end":16392,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16257,"byte_end":16294,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16299,"byte_end":16373,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4083},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16425,"byte_end":16440,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4073},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4073},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16077,"byte_end":16097,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n\n    /// The required color type can not be handled.\n    Color(ExtendedColorType),\n\n    /// An image format is not supported.\n    Format(ImageFormatHint),\n\n    /// Some feature specified by string.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    GenericFeature(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4074},{"krate":0,"index":4077},{"krate":0,"index":4080},{"krate":0,"index":4083}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":15984,"byte_end":16026,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":4097},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16759,"byte_end":16772,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":4098},{"krate":0,"index":4099}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16466,"byte_end":16519,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16520,"byte_end":16523,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16524,"byte_end":16618,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16619,"byte_end":16658,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16659,"byte_end":16662,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16663,"byte_end":16730,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4102},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17154,"byte_end":17168,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":4103},{"krate":0,"index":4104}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16862,"byte_end":16911,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16912,"byte_end":16915,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":16916,"byte_end":17011,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17012,"byte_end":17051,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17052,"byte_end":17055,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17056,"byte_end":17125,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4108},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17416,"byte_end":17433,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":4107},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17375,"byte_end":17411,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4110},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17531,"byte_end":17544,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":4107},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17439,"byte_end":17526,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4112},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17672,"byte_end":17679,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":4107},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17550,"byte_end":17588,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17593,"byte_end":17667,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4115},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17740,"byte_end":17750,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":4107},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17693,"byte_end":17735,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4117},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17834,"byte_end":17849,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4107},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17775,"byte_end":17829,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4107},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17350,"byte_end":17368,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n\n    /// The dimensions passed are wrong.\n    DimensionMismatch,\n\n    /// Repeated an operation for which error that could not be cloned was emitted already.\n    FailedAlready,\n\n    /// A string describing the parameter.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    Generic(String),\n\n    /// The end of the image has been reached.\n    NoMoreData,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4108},{"krate":0,"index":4110},{"krate":0,"index":4112},{"krate":0,"index":4115},{"krate":0,"index":4117}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17258,"byte_end":17299,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4131},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18168,"byte_end":18181,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":4132},{"krate":0,"index":4133}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17875,"byte_end":17928,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17929,"byte_end":17932,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":17933,"byte_end":18027,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18028,"byte_end":18067,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18068,"byte_end":18071,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18072,"byte_end":18139,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4136},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18581,"byte_end":18591,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":4137}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18270,"byte_end":18347,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18348,"byte_end":18351,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18352,"byte_end":18444,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18445,"byte_end":18484,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18485,"byte_end":18488,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18489,"byte_end":18552,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4141},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19123,"byte_end":19137,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":4140},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19050,"byte_end":19118,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4143},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19221,"byte_end":19239,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":4140},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19143,"byte_end":19216,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4145},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19323,"byte_end":19338,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4140},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19264,"byte_end":19318,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":4140},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19029,"byte_end":19043,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n\n    /// The resulting image exceed dimension limits in either direction.\n    DimensionError,\n\n    /// The operation would have performed an allocation larger than allowed.\n    InsufficientMemory,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4141},{"krate":0,"index":4143},{"krate":0,"index":4145}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18662,"byte_end":18730,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18731,"byte_end":18734,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18735,"byte_end":18833,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18834,"byte_end":18899,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":18945,"byte_end":18983,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4163},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19525,"byte_end":19530,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19488,"byte_end":19520,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4166},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19598,"byte_end":19602,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19550,"byte_end":19593,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4169},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19674,"byte_end":19687,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19617,"byte_end":19669,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4172},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19774,"byte_end":19781,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19714,"byte_end":19769,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4174},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19807,"byte_end":19822,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":4162},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4162},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19466,"byte_end":19481,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n\n    /// The format is known exactly.\n    Exact(ImageFormat),\n\n    /// The format can be identified by a name.\n    Name(String),\n\n    /// A common path extension for the format is known.\n    PathExtension(std::path::PathBuf),\n\n    /// The format is not known or could not be determined.\n    Unknown,\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4163},{"krate":0,"index":4166},{"krate":0,"index":4169},{"krate":0,"index":4172},{"krate":0,"index":4174}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19364,"byte_end":19415,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20094,"byte_end":20114,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19876,"byte_end":19962,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19967,"byte_end":19970,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19975,"byte_end":20063,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20068,"byte_end":20082,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20342,"byte_end":20346,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20264,"byte_end":20330,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20485,"byte_end":20496,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20417,"byte_end":20473,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20688,"byte_end":20691,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20587,"byte_end":20676,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21059,"byte_end":21075,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20903,"byte_end":20952,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20957,"byte_end":20960,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20965,"byte_end":21047,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21274,"byte_end":21285,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21206,"byte_end":21262,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21478,"byte_end":21481,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21376,"byte_end":21466,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21850,"byte_end":21866,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21693,"byte_end":21743,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21748,"byte_end":21751,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21756,"byte_end":21838,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22064,"byte_end":22075,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21997,"byte_end":22052,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22247,"byte_end":22256,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22167,"byte_end":22235,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22463,"byte_end":22467,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22387,"byte_end":22451,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22640,"byte_end":22649,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22556,"byte_end":22628,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22814,"byte_end":22818,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22742,"byte_end":22802,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23697,"byte_end":23708,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23639,"byte_end":23687,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5125,"byte_end":5131,"line_start":149,"line_end":149,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5045,"byte_end":5116,"line_start":148,"line_end":148,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":147}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","byte_start":30341,"byte_end":30385,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":139},{"krate":0,"index":141}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":30451,"byte_end":30522,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":30523,"byte_end":30588,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":30589,"byte_end":30662,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":30663,"byte_end":30701,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":30702,"byte_end":30806,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":130},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33749,"byte_end":33757,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":131}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":31992,"byte_end":32026,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32027,"byte_end":32030,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32031,"byte_end":32045,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32046,"byte_end":32053,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32054,"byte_end":32114,"line_start":37,"line_end":37,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32115,"byte_end":32149,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32150,"byte_end":32196,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32197,"byte_end":32200,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32201,"byte_end":32251,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32252,"byte_end":32276,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32277,"byte_end":32325,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32326,"byte_end":32376,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32377,"byte_end":32426,"line_start":45,"line_end":45,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32427,"byte_end":32481,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32482,"byte_end":32529,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32530,"byte_end":32567,"line_start":48,"line_end":48,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32568,"byte_end":32607,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32608,"byte_end":32646,"line_start":50,"line_end":50,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32647,"byte_end":32686,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32687,"byte_end":32690,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32691,"byte_end":32789,"line_start":53,"line_end":53,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32790,"byte_end":32816,"line_start":54,"line_end":54,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32817,"byte_end":32910,"line_start":55,"line_end":55,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32911,"byte_end":32964,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":32965,"byte_end":33013,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33014,"byte_end":33060,"line_start":58,"line_end":58,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33061,"byte_end":33151,"line_start":59,"line_end":59,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33152,"byte_end":33171,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33172,"byte_end":33227,"line_start":61,"line_end":61,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33228,"byte_end":33327,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33328,"byte_end":33424,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33425,"byte_end":33445,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33446,"byte_end":33510,"line_start":65,"line_end":65,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33511,"byte_end":33554,"line_start":66,"line_end":66,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33555,"byte_end":33591,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33592,"byte_end":33641,"line_start":68,"line_end":68,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33642,"byte_end":33661,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33662,"byte_end":33669,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33670,"byte_end":33677,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use the `color_quant` crate instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":33678,"byte_end":33737,"line_start":72,"line_end":72,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34276,"byte_end":34279,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34422,"byte_end":34426,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34504,"byte_end":34513,"line_start":93,"line_end":93,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34594,"byte_end":34602,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34687,"byte_end":34693,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":143},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":144}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35066,"byte_end":35108,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":144},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35367,"byte_end":35372,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35110,"byte_end":35148,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35149,"byte_end":35152,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35153,"byte_end":35160,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35161,"byte_end":35188,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35189,"byte_end":35192,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35193,"byte_end":35237,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35238,"byte_end":35282,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35283,"byte_end":35327,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35328,"byte_end":35335,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35336,"byte_end":35345,"line_start":12,"line_end":12,"column_start":1,"column_end":10}},{"value":"deprecated","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/utils.rs","byte_start":35346,"byte_end":35359,"line_start":13,"line_end":13,"column_start":1,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4188},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35653,"byte_end":35657,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":4189},{"krate":0,"index":4190},{"krate":0,"index":4191},{"krate":0,"index":4192}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35525,"byte_end":35590,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4189},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35717,"byte_end":35718,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":4188},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35664,"byte_end":35708,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4190},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35782,"byte_end":35783,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":4188},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35729,"byte_end":35773,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":4191},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35829,"byte_end":35834,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":4188},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35794,"byte_end":35820,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":4192},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35881,"byte_end":35887,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":4188},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/rect.rs","byte_start":35845,"byte_end":35872,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":148},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":6443},{"krate":0,"index":163},{"krate":0,"index":6445},{"krate":0,"index":164},{"krate":0,"index":6447},{"krate":0,"index":165},{"krate":0,"index":6449},{"krate":0,"index":166},{"krate":0,"index":6451},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":6503},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":238},{"krate":0,"index":315},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":418},{"krate":0,"index":423}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":35897,"byte_end":35927,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48070,"byte_end":48078,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48021,"byte_end":48062,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":209},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48410,"byte_end":48419,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48360,"byte_end":48402,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":211},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48752,"byte_end":48761,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":48702,"byte_end":48744,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":213},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":49149,"byte_end":49160,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":49044,"byte_end":49141,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":216},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":49934,"byte_end":49946,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":49828,"byte_end":49926,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":219},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":50729,"byte_end":50741,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":50623,"byte_end":50721,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":51447,"byte_end":51462,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":51409,"byte_end":51439,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":224},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":51787,"byte_end":51800,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":51751,"byte_end":51779,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":52182,"byte_end":52200,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":52087,"byte_end":52174,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":52961,"byte_end":52977,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":52868,"byte_end":52953,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":53704,"byte_end":53722,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":53645,"byte_end":53696,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":54502,"byte_end":54526,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":54454,"byte_end":54494,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":54932,"byte_end":54954,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/affine.rs","byte_start":54886,"byte_end":54924,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":238},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":6527},{"krate":0,"index":245},{"krate":0,"index":6529},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":257},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":277},{"krate":0,"index":4208},{"krate":0,"index":4211},{"krate":0,"index":4210},{"krate":0,"index":283},{"krate":0,"index":289},{"krate":0,"index":296},{"krate":0,"index":303},{"krate":0,"index":307},{"krate":0,"index":312}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":59907,"byte_end":59971,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":257},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":60371,"byte_end":60380,"line_start":17,"line_end":17,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":60320,"byte_end":60363,"line_start":16,"line_end":16,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":60912,"byte_end":60918,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":60819,"byte_end":60867,"line_start":35,"line_end":35,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":60868,"byte_end":60904,"line_start":36,"line_end":36,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":61381,"byte_end":61389,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":61182,"byte_end":61228,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":61229,"byte_end":61288,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":61289,"byte_end":61373,"line_start":52,"line_end":52,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":62364,"byte_end":62372,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":62190,"byte_end":62222,"line_start":85,"line_end":85,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":62223,"byte_end":62279,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":62280,"byte_end":62356,"line_start":87,"line_end":87,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":63358,"byte_end":63367,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":63142,"byte_end":63176,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":63177,"byte_end":63228,"line_start":120,"line_end":120,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":63229,"byte_end":63298,"line_start":121,"line_end":121,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":63299,"byte_end":63350,"line_start":122,"line_end":122,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":277},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65281,"byte_end":65289,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65255,"byte_end":65270,"line_start":179,"line_end":179,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":278},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65353,"byte_end":65358,"line_start":182,"line_end":182,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65296,"byte_end":65343,"line_start":181,"line_end":181,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65451,"byte_end":65459,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65364,"byte_end":65417,"line_start":183,"line_end":183,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65422,"byte_end":65443,"line_start":184,"line_end":184,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65667,"byte_end":65673,"line_start":188,"line_end":188,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65502,"byte_end":65595,"line_start":186,"line_end":186,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65600,"byte_end":65659,"line_start":187,"line_end":187,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65854,"byte_end":65864,"line_start":193,"line_end":193,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65766,"byte_end":65846,"line_start":192,"line_end":192,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65969,"byte_end":65978,"line_start":197,"line_end":197,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":65906,"byte_end":65961,"line_start":196,"line_end":196,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":4208},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67123,"byte_end":67130,"line_start":230,"line_end":230,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66015,"byte_end":66039,"line_start":200,"line_end":200,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66040,"byte_end":66043,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66044,"byte_end":66058,"line_start":202,"line_end":202,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66059,"byte_end":66066,"line_start":203,"line_end":203,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66067,"byte_end":66136,"line_start":204,"line_end":204,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66137,"byte_end":66172,"line_start":205,"line_end":205,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66173,"byte_end":66176,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66177,"byte_end":66203,"line_start":207,"line_end":207,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66204,"byte_end":66291,"line_start":208,"line_end":208,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66292,"byte_end":66387,"line_start":209,"line_end":209,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66388,"byte_end":66484,"line_start":210,"line_end":210,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66485,"byte_end":66558,"line_start":211,"line_end":211,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66559,"byte_end":66582,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66583,"byte_end":66631,"line_start":213,"line_end":213,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66632,"byte_end":66684,"line_start":214,"line_end":214,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66685,"byte_end":66728,"line_start":215,"line_end":215,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66729,"byte_end":66765,"line_start":216,"line_end":216,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66766,"byte_end":66815,"line_start":217,"line_end":217,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66816,"byte_end":66823,"line_start":218,"line_end":218,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66824,"byte_end":66882,"line_start":219,"line_end":219,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66883,"byte_end":66943,"line_start":220,"line_end":220,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66944,"byte_end":66969,"line_start":221,"line_end":221,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66970,"byte_end":66992,"line_start":222,"line_end":222,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":66993,"byte_end":67009,"line_start":223,"line_end":223,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67010,"byte_end":67034,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67035,"byte_end":67044,"line_start":225,"line_end":225,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67045,"byte_end":67052,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67053,"byte_end":67080,"line_start":227,"line_end":227,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67081,"byte_end":67088,"line_start":228,"line_end":228,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":70103,"byte_end":70109,"line_start":345,"line_end":345,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":69951,"byte_end":70032,"line_start":343,"line_end":343,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":70033,"byte_end":70095,"line_start":344,"line_end":344,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":312},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":71663,"byte_end":71675,"line_start":383,"line_end":383,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":71566,"byte_end":71655,"line_start":382,"line_end":382,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4214},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75361,"byte_end":75368,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":4213},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75336,"byte_end":75356,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4216},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75397,"byte_end":75405,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":4213},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75375,"byte_end":75392,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4218},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75433,"byte_end":75443,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":4213},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75412,"byte_end":75428,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4220},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75474,"byte_end":75482,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":4213},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75450,"byte_end":75469,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4222},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75519,"byte_end":75527,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":4213},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75489,"byte_end":75514,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4213},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75319,"byte_end":75329,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":4214},{"krate":0,"index":4216},{"krate":0,"index":4218},{"krate":0,"index":4220},{"krate":0,"index":4222}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":72877,"byte_end":72908,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":72909,"byte_end":72912,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":72913,"byte_end":72928,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":72929,"byte_end":72932,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":72933,"byte_end":73011,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73012,"byte_end":73031,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73032,"byte_end":73115,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73116,"byte_end":73123,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73124,"byte_end":73203,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73204,"byte_end":73261,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73262,"byte_end":73265,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73266,"byte_end":73288,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73289,"byte_end":73380,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73381,"byte_end":73425,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73426,"byte_end":73429,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73430,"byte_end":73527,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73528,"byte_end":73602,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73603,"byte_end":73643,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73644,"byte_end":73782,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73783,"byte_end":73807,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73808,"byte_end":73820,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73821,"byte_end":73861,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":73862,"byte_end":74000,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74001,"byte_end":74025,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74026,"byte_end":74038,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74039,"byte_end":74079,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74080,"byte_end":74220,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74221,"byte_end":74247,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74248,"byte_end":74260,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74261,"byte_end":74301,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74302,"byte_end":74442,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74443,"byte_end":74459,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74460,"byte_end":74472,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74473,"byte_end":74513,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74514,"byte_end":74653,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74654,"byte_end":74683,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74684,"byte_end":74696,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74697,"byte_end":74707,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74708,"byte_end":74711,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74712,"byte_end":74724,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74725,"byte_end":74728,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74729,"byte_end":74803,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74804,"byte_end":74851,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74852,"byte_end":74855,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74856,"byte_end":74888,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74889,"byte_end":74899,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74900,"byte_end":74924,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74925,"byte_end":74947,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74948,"byte_end":74959,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74960,"byte_end":74970,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74971,"byte_end":74996,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":74997,"byte_end":75020,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75021,"byte_end":75032,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75033,"byte_end":75043,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75044,"byte_end":75071,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75072,"byte_end":75095,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75096,"byte_end":75107,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75108,"byte_end":75118,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75119,"byte_end":75144,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75145,"byte_end":75169,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75170,"byte_end":75181,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75182,"byte_end":75192,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75193,"byte_end":75218,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75219,"byte_end":75243,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75244,"byte_end":75255,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":75256,"byte_end":75268,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":362},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84989,"byte_end":84998,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84243,"byte_end":84300,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84301,"byte_end":84304,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84305,"byte_end":84403,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84404,"byte_end":84499,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84500,"byte_end":84503,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84504,"byte_end":84598,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84599,"byte_end":84696,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84697,"byte_end":84793,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84794,"byte_end":84830,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84831,"byte_end":84834,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84835,"byte_end":84934,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":84935,"byte_end":84981,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":385},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":92857,"byte_end":92866,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":92734,"byte_end":92785,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":92786,"byte_end":92849,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":390},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":95293,"byte_end":95299,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":95120,"byte_end":95178,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":95179,"byte_end":95237,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":95238,"byte_end":95285,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":392},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":96425,"byte_end":96429,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":96313,"byte_end":96364,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":96365,"byte_end":96417,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":395},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":97252,"byte_end":97261,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":96991,"byte_end":97044,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":97045,"byte_end":97096,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":97097,"byte_end":97160,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":97161,"byte_end":97164,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":97165,"byte_end":97244,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":400},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36908,"byte_end":36912,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36861,"byte_end":36900,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":402},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37206,"byte_end":37214,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37156,"byte_end":37198,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":406},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39998,"byte_end":40012,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37826,"byte_end":37889,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37890,"byte_end":37893,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37894,"byte_end":37991,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":37992,"byte_end":38077,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38078,"byte_end":38115,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38116,"byte_end":38150,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38151,"byte_end":38202,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38203,"byte_end":38206,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38207,"byte_end":38300,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38301,"byte_end":38400,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38401,"byte_end":38421,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38422,"byte_end":38425,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38426,"byte_end":38482,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38483,"byte_end":38544,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38545,"byte_end":38595,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38596,"byte_end":38599,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38600,"byte_end":38699,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38700,"byte_end":38793,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38794,"byte_end":38867,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38868,"byte_end":38871,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38872,"byte_end":38883,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38884,"byte_end":38914,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38915,"byte_end":38970,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":38971,"byte_end":39030,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39031,"byte_end":39099,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39100,"byte_end":39103,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39104,"byte_end":39206,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39207,"byte_end":39210,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39211,"byte_end":39222,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39223,"byte_end":39295,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39296,"byte_end":39333,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39334,"byte_end":39337,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39338,"byte_end":39359,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39360,"byte_end":39390,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39391,"byte_end":39434,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39435,"byte_end":39456,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39457,"byte_end":39478,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39479,"byte_end":39482,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39483,"byte_end":39546,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39547,"byte_end":39550,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39551,"byte_end":39566,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39567,"byte_end":39608,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39609,"byte_end":39638,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39639,"byte_end":39658,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39659,"byte_end":39662,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39663,"byte_end":39705,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39706,"byte_end":39709,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39710,"byte_end":39721,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39722,"byte_end":39794,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39795,"byte_end":39847,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39848,"byte_end":39888,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39889,"byte_end":39944,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39945,"byte_end":39952,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39953,"byte_end":39956,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":39957,"byte_end":39990,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":407},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":40526,"byte_end":40533,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":40469,"byte_end":40518,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41552,"byte_end":41556,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41192,"byte_end":41240,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41241,"byte_end":41244,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41245,"byte_end":41259,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41260,"byte_end":41273,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41274,"byte_end":41301,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41302,"byte_end":41305,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41306,"byte_end":41321,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41322,"byte_end":41372,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41373,"byte_end":41426,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41427,"byte_end":41430,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41431,"byte_end":41479,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41480,"byte_end":41530,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41531,"byte_end":41536,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41537,"byte_end":41544,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42353,"byte_end":42370,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41855,"byte_end":41905,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41906,"byte_end":41910,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41911,"byte_end":41958,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41959,"byte_end":41963,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41964,"byte_end":41978,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41979,"byte_end":41992,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":41993,"byte_end":42033,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42034,"byte_end":42038,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42039,"byte_end":42054,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42055,"byte_end":42102,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42103,"byte_end":42157,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42158,"byte_end":42216,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42217,"byte_end":42221,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42222,"byte_end":42287,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42288,"byte_end":42339,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42340,"byte_end":42345,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43400,"byte_end":43419,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42897,"byte_end":42949,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42950,"byte_end":42954,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":42955,"byte_end":43002,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43003,"byte_end":43006,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43007,"byte_end":43021,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43022,"byte_end":43035,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43036,"byte_end":43076,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43077,"byte_end":43081,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43082,"byte_end":43097,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43098,"byte_end":43145,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43146,"byte_end":43200,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43201,"byte_end":43259,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43260,"byte_end":43264,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43265,"byte_end":43332,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43333,"byte_end":43386,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43387,"byte_end":43392,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":44016,"byte_end":44023,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":43943,"byte_end":44008,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":426},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":473},{"krate":0,"index":531}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/mod.rs","byte_start":100222,"byte_end":100253,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":448},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102450,"byte_end":102456,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100651,"byte_end":100683,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100684,"byte_end":100687,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100688,"byte_end":100781,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100782,"byte_end":100877,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100878,"byte_end":100881,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100882,"byte_end":100894,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100895,"byte_end":100898,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100899,"byte_end":100997,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":100998,"byte_end":101095,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101096,"byte_end":101099,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101100,"byte_end":101113,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101114,"byte_end":101142,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101143,"byte_end":101171,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101172,"byte_end":101215,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101216,"byte_end":101266,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101267,"byte_end":101286,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101287,"byte_end":101301,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101302,"byte_end":101309,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101310,"byte_end":101313,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101314,"byte_end":101407,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101408,"byte_end":101504,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101505,"byte_end":101604,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101605,"byte_end":101608,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101704,"byte_end":101732,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101733,"byte_end":101761,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101762,"byte_end":101805,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101806,"byte_end":101830,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101831,"byte_end":101858,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101859,"byte_end":101862,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101863,"byte_end":101893,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101894,"byte_end":101908,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101909,"byte_end":101924,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101925,"byte_end":101928,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101929,"byte_end":101984,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":101985,"byte_end":102015,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102016,"byte_end":102057,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102058,"byte_end":102114,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102115,"byte_end":102118,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102119,"byte_end":102152,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102153,"byte_end":102167,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102168,"byte_end":102175,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102176,"byte_end":102179,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102180,"byte_end":102278,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102279,"byte_end":102346,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102347,"byte_end":102350,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102351,"byte_end":102389,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102390,"byte_end":102438,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102977,"byte_end":102980,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102620,"byte_end":102674,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102679,"byte_end":102682,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102687,"byte_end":102770,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102775,"byte_end":102854,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102859,"byte_end":102862,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102867,"byte_end":102923,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102928,"byte_end":102965,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103150,"byte_end":103161,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103093,"byte_end":103138,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103355,"byte_end":103361,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103303,"byte_end":103343,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103496,"byte_end":103506,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103425,"byte_end":103484,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103836,"byte_end":103848,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103588,"byte_end":103643,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103648,"byte_end":103651,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103656,"byte_end":103750,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103755,"byte_end":103824,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103935,"byte_end":103945,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103901,"byte_end":103923,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104428,"byte_end":104432,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104022,"byte_end":104080,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104085,"byte_end":104088,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104093,"byte_end":104155,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104160,"byte_end":104163,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104168,"byte_end":104262,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104267,"byte_end":104347,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104352,"byte_end":104355,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104360,"byte_end":104416,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106074,"byte_end":106093,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104800,"byte_end":104870,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104875,"byte_end":104878,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104883,"byte_end":104972,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104977,"byte_end":105067,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105072,"byte_end":105122,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105127,"byte_end":105130,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105135,"byte_end":105227,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105232,"byte_end":105320,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105325,"byte_end":105353,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105358,"byte_end":105361,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105366,"byte_end":105457,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105462,"byte_end":105501,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105506,"byte_end":105509,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105514,"byte_end":105526,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105531,"byte_end":105534,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105539,"byte_end":105647,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105652,"byte_end":105744,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105749,"byte_end":105780,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105785,"byte_end":105788,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105793,"byte_end":105806,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105811,"byte_end":105839,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105844,"byte_end":105872,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105877,"byte_end":105920,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105925,"byte_end":105971,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":105976,"byte_end":106007,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106012,"byte_end":106031,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106036,"byte_end":106050,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106055,"byte_end":106062,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107051,"byte_end":107066,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106838,"byte_end":106868,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106873,"byte_end":106876,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106881,"byte_end":106956,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106961,"byte_end":106964,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":106969,"byte_end":107039,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107460,"byte_end":107466,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107240,"byte_end":107277,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107282,"byte_end":107285,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107290,"byte_end":107365,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107370,"byte_end":107373,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":107378,"byte_end":107448,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109675,"byte_end":109679,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109462,"byte_end":109498,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109499,"byte_end":109502,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109503,"byte_end":109549,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109550,"byte_end":109553,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109554,"byte_end":109595,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":109596,"byte_end":109622,"line_start":65,"line_end":65,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119442,"byte_end":119454,"line_start":285,"line_end":285,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119181,"byte_end":119221,"line_start":280,"line_end":280,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119222,"byte_end":119225,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119226,"byte_end":119319,"line_start":282,"line_end":282,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119320,"byte_end":119362,"line_start":283,"line_end":283,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119363,"byte_end":119434,"line_start":284,"line_end":284,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":532},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","parent":null,"children":[{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":6671},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":4232},{"krate":0,"index":4240},{"krate":0,"index":4237},{"krate":0,"index":4243},{"krate":0,"index":4263},{"krate":0,"index":4262},{"krate":0,"index":4260},{"krate":0,"index":4256},{"krate":0,"index":4257},{"krate":0,"index":4253},{"krate":0,"index":4254},{"krate":0,"index":4250},{"krate":0,"index":4265},{"krate":0,"index":4291},{"krate":0,"index":4290},{"krate":0,"index":4288},{"krate":0,"index":4284},{"krate":0,"index":4285},{"krate":0,"index":4281},{"krate":0,"index":4282},{"krate":0,"index":4271},{"krate":0,"index":4269},{"krate":0,"index":559},{"krate":0,"index":582},{"krate":0,"index":586},{"krate":0,"index":628},{"krate":0,"index":4293},{"krate":0,"index":4302},{"krate":0,"index":4298},{"krate":0,"index":4306},{"krate":0,"index":4315},{"krate":0,"index":4311},{"krate":0,"index":4319},{"krate":0,"index":4341},{"krate":0,"index":4340},{"krate":0,"index":4338},{"krate":0,"index":4334},{"krate":0,"index":4335},{"krate":0,"index":4331},{"krate":0,"index":4332},{"krate":0,"index":4328},{"krate":0,"index":4343},{"krate":0,"index":4366},{"krate":0,"index":4365},{"krate":0,"index":4363},{"krate":0,"index":4360},{"krate":0,"index":4361},{"krate":0,"index":4357},{"krate":0,"index":4358},{"krate":0,"index":4354},{"krate":0,"index":633},{"krate":0,"index":646},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":665},{"krate":0,"index":669},{"krate":0,"index":681},{"krate":0,"index":693},{"krate":0,"index":701},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":709}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120230,"byte_end":120264,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120265,"byte_end":120268,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120269,"byte_end":120280,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120281,"byte_end":120284,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120285,"byte_end":120383,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120384,"byte_end":120483,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120484,"byte_end":120555,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120556,"byte_end":120559,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120560,"byte_end":120573,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120574,"byte_end":120591,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120592,"byte_end":120611,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120612,"byte_end":120631,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120632,"byte_end":120681,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120682,"byte_end":120717,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120718,"byte_end":120721,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120722,"byte_end":120738,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120739,"byte_end":120783,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120784,"byte_end":120820,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120821,"byte_end":120856,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120857,"byte_end":120862,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120863,"byte_end":120878,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120879,"byte_end":120884,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120885,"byte_end":120951,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":120952,"byte_end":121002,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121003,"byte_end":121006,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121007,"byte_end":121041,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121042,"byte_end":121062,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121063,"byte_end":121082,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121083,"byte_end":121112,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121113,"byte_end":121123,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121124,"byte_end":121127,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121128,"byte_end":121182,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121183,"byte_end":121237,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121238,"byte_end":121267,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121268,"byte_end":121278,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121279,"byte_end":121282,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121283,"byte_end":121315,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121316,"byte_end":121347,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121348,"byte_end":121374,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121375,"byte_end":121413,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121414,"byte_end":121419,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121420,"byte_end":121427,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121428,"byte_end":121431,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4232},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123422,"byte_end":123433,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":4234},{"krate":0,"index":4235},{"krate":0,"index":4236}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121839,"byte_end":121886,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121887,"byte_end":121890,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121891,"byte_end":121988,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":121989,"byte_end":122086,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122087,"byte_end":122183,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122184,"byte_end":122272,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122273,"byte_end":122372,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122373,"byte_end":122471,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122472,"byte_end":122521,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122522,"byte_end":122525,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122526,"byte_end":122617,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122618,"byte_end":122715,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122716,"byte_end":122813,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122814,"byte_end":122911,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122912,"byte_end":122973,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122974,"byte_end":122977,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":122978,"byte_end":123026,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123027,"byte_end":123083,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123084,"byte_end":123171,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123172,"byte_end":123208,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123209,"byte_end":123265,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123266,"byte_end":123298,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123299,"byte_end":123339,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123340,"byte_end":123386,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":4234},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123511,"byte_end":123518,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":4232},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123448,"byte_end":123502,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4235},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123602,"byte_end":123608,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":4232},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123533,"byte_end":123593,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":4236},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124063,"byte_end":124073,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":4232},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123629,"byte_end":123665,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123670,"byte_end":123673,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123678,"byte_end":123763,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123768,"byte_end":123860,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123865,"byte_end":123954,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":123959,"byte_end":124054,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":4243},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124223,"byte_end":124235,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":4244},{"krate":0,"index":4245},{"krate":0,"index":4246},{"krate":0,"index":4247},{"krate":0,"index":4248},{"krate":0,"index":4249}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124097,"byte_end":124149,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124150,"byte_end":124160,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4244},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124319,"byte_end":124327,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124242,"byte_end":124310,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4245},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124413,"byte_end":124427,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124338,"byte_end":124404,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4246},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124489,"byte_end":124494,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124441,"byte_end":124480,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4247},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124581,"byte_end":124593,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124506,"byte_end":124572,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":4248},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124656,"byte_end":124662,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124607,"byte_end":124647,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":4249},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124749,"byte_end":124762,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":4243},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124674,"byte_end":124740,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125737,"byte_end":125753,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124943,"byte_end":124999,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125004,"byte_end":125007,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125012,"byte_end":125107,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125112,"byte_end":125181,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125186,"byte_end":125189,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125194,"byte_end":125201,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125206,"byte_end":125256,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125261,"byte_end":125322,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125327,"byte_end":125385,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125390,"byte_end":125397,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125402,"byte_end":125405,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125410,"byte_end":125422,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125427,"byte_end":125430,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125435,"byte_end":125530,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125535,"byte_end":125626,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":125631,"byte_end":125725,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127004,"byte_end":127023,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126191,"byte_end":126250,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126255,"byte_end":126258,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126263,"byte_end":126353,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126358,"byte_end":126443,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126448,"byte_end":126451,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126456,"byte_end":126463,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126468,"byte_end":126518,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126523,"byte_end":126587,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126592,"byte_end":126653,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126658,"byte_end":126665,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126670,"byte_end":126673,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126678,"byte_end":126690,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126695,"byte_end":126698,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126703,"byte_end":126798,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126803,"byte_end":126893,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":126898,"byte_end":126992,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127639,"byte_end":127650,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127464,"byte_end":127523,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127528,"byte_end":127531,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127536,"byte_end":127607,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127612,"byte_end":127627,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127967,"byte_end":127974,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127765,"byte_end":127816,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127821,"byte_end":127824,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127829,"byte_end":127922,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":127927,"byte_end":127955,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128348,"byte_end":128354,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128096,"byte_end":128150,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128155,"byte_end":128158,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128163,"byte_end":128253,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128258,"byte_end":128336,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130507,"byte_end":130517,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128442,"byte_end":128532,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128537,"byte_end":128540,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128545,"byte_end":128640,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128645,"byte_end":128735,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128740,"byte_end":128831,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128836,"byte_end":128893,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128898,"byte_end":128901,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128906,"byte_end":128923,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128928,"byte_end":128931,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":128936,"byte_end":129020,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129025,"byte_end":129116,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129121,"byte_end":129124,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129129,"byte_end":129154,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129159,"byte_end":129162,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129167,"byte_end":129221,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129226,"byte_end":129250,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129255,"byte_end":129272,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129277,"byte_end":129302,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129307,"byte_end":129325,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129330,"byte_end":129333,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129338,"byte_end":129349,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129354,"byte_end":129377,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129382,"byte_end":129401,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129406,"byte_end":129448,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129453,"byte_end":129460,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129465,"byte_end":129468,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129473,"byte_end":129565,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129570,"byte_end":129660,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129665,"byte_end":129668,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129673,"byte_end":129701,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129706,"byte_end":129709,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129714,"byte_end":129806,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129811,"byte_end":129905,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129910,"byte_end":129965,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129970,"byte_end":129973,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":129978,"byte_end":130002,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130007,"byte_end":130024,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130029,"byte_end":130054,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130059,"byte_end":130077,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130082,"byte_end":130085,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130090,"byte_end":130101,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130106,"byte_end":130122,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130127,"byte_end":130146,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130151,"byte_end":130174,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130179,"byte_end":130208,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130213,"byte_end":130248,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130253,"byte_end":130260,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130265,"byte_end":130268,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130273,"byte_end":130367,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130372,"byte_end":130465,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130470,"byte_end":130495,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130849,"byte_end":130853,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":130783,"byte_end":130837,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131963,"byte_end":131982,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131613,"byte_end":131662,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131667,"byte_end":131670,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131675,"byte_end":131768,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131773,"byte_end":131867,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":131872,"byte_end":131951,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":133227,"byte_end":133236,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":132717,"byte_end":132782,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":132787,"byte_end":132790,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":132795,"byte_end":132888,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":132893,"byte_end":132988,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":132993,"byte_end":133085,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":133090,"byte_end":133184,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":133189,"byte_end":133215,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134934,"byte_end":134943,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134592,"byte_end":134653,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134658,"byte_end":134661,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134666,"byte_end":134755,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134760,"byte_end":134854,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":134859,"byte_end":134922,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135217,"byte_end":135222,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135070,"byte_end":135115,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135120,"byte_end":135123,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135128,"byte_end":135205,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135816,"byte_end":135837,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135445,"byte_end":135504,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135509,"byte_end":135512,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135517,"byte_end":135606,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135611,"byte_end":135705,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":135710,"byte_end":135804,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136768,"byte_end":136783,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136467,"byte_end":136507,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136512,"byte_end":136515,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136520,"byte_end":136612,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136617,"byte_end":136712,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136717,"byte_end":136756,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":581},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137311,"byte_end":137320,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":136986,"byte_end":137051,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137056,"byte_end":137059,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137064,"byte_end":137152,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137157,"byte_end":137252,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137257,"byte_end":137299,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137993,"byte_end":138004,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137818,"byte_end":137877,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137882,"byte_end":137885,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137890,"byte_end":137961,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137966,"byte_end":137981,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138286,"byte_end":138293,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138084,"byte_end":138135,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138140,"byte_end":138143,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138148,"byte_end":138241,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138246,"byte_end":138274,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138621,"byte_end":138627,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138369,"byte_end":138423,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138428,"byte_end":138431,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138436,"byte_end":138526,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138531,"byte_end":138609,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138741,"byte_end":138747,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138695,"byte_end":138729,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139021,"byte_end":139027,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":138967,"byte_end":139009,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139306,"byte_end":139312,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139255,"byte_end":139294,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140585,"byte_end":140595,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139565,"byte_end":139604,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139609,"byte_end":139612,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139617,"byte_end":139712,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139717,"byte_end":139795,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139800,"byte_end":139803,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139808,"byte_end":139815,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139820,"byte_end":139848,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139853,"byte_end":139912,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139917,"byte_end":139920,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139925,"byte_end":139965,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":139970,"byte_end":140020,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140025,"byte_end":140028,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140033,"byte_end":140066,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140071,"byte_end":140121,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140126,"byte_end":140133,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140138,"byte_end":140141,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140146,"byte_end":140236,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140241,"byte_end":140322,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140327,"byte_end":140422,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140427,"byte_end":140514,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140519,"byte_end":140573,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142192,"byte_end":142206,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140782,"byte_end":140829,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140834,"byte_end":140837,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140842,"byte_end":140931,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":140936,"byte_end":141023,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141028,"byte_end":141123,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141128,"byte_end":141191,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141196,"byte_end":141199,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141204,"byte_end":141298,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141303,"byte_end":141372,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141377,"byte_end":141380,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141385,"byte_end":141392,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141397,"byte_end":141425,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141430,"byte_end":141493,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141498,"byte_end":141501,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141506,"byte_end":141567,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141572,"byte_end":141623,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141628,"byte_end":141631,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141636,"byte_end":141669,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141674,"byte_end":141728,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141733,"byte_end":141740,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141745,"byte_end":141748,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141753,"byte_end":141843,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141848,"byte_end":141929,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":141934,"byte_end":142029,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142034,"byte_end":142121,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142126,"byte_end":142180,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142870,"byte_end":142877,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142458,"byte_end":142515,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142520,"byte_end":142523,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142528,"byte_end":142618,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142623,"byte_end":142717,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142722,"byte_end":142816,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":142821,"byte_end":142858,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144454,"byte_end":144478,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143489,"byte_end":143548,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143553,"byte_end":143556,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143561,"byte_end":143653,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143658,"byte_end":143749,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143754,"byte_end":143847,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143852,"byte_end":143883,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143888,"byte_end":143891,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143896,"byte_end":143986,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":143991,"byte_end":144085,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144090,"byte_end":144184,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144189,"byte_end":144226,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144231,"byte_end":144234,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144239,"byte_end":144333,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144338,"byte_end":144424,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":144429,"byte_end":144442,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145841,"byte_end":145852,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145098,"byte_end":145143,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145148,"byte_end":145151,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145156,"byte_end":145246,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145251,"byte_end":145338,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145343,"byte_end":145410,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145415,"byte_end":145418,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145423,"byte_end":145518,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145523,"byte_end":145616,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145621,"byte_end":145716,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145721,"byte_end":145796,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":145801,"byte_end":145829,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146849,"byte_end":146857,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146625,"byte_end":146657,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146662,"byte_end":146665,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146670,"byte_end":146762,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146767,"byte_end":146837,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147168,"byte_end":147180,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146944,"byte_end":146976,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146981,"byte_end":146984,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":146989,"byte_end":147081,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147086,"byte_end":147156,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147611,"byte_end":147622,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147275,"byte_end":147337,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147342,"byte_end":147345,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147350,"byte_end":147445,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147450,"byte_end":147545,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147550,"byte_end":147599,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148039,"byte_end":148054,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":147968,"byte_end":148027,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148708,"byte_end":148723,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148412,"byte_end":148451,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148456,"byte_end":148459,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148464,"byte_end":148560,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148565,"byte_end":148660,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":148665,"byte_end":148696,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151559,"byte_end":151569,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149494,"byte_end":149584,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149589,"byte_end":149592,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149597,"byte_end":149692,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149697,"byte_end":149787,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149792,"byte_end":149883,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149888,"byte_end":149945,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149950,"byte_end":149953,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149958,"byte_end":149975,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149980,"byte_end":149983,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":149988,"byte_end":150072,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150077,"byte_end":150168,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150173,"byte_end":150176,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150181,"byte_end":150206,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150211,"byte_end":150214,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150219,"byte_end":150273,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150278,"byte_end":150302,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150307,"byte_end":150324,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150329,"byte_end":150354,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150359,"byte_end":150377,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150382,"byte_end":150385,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150390,"byte_end":150401,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150406,"byte_end":150429,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150434,"byte_end":150453,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150458,"byte_end":150500,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150505,"byte_end":150512,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150517,"byte_end":150520,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150525,"byte_end":150617,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150622,"byte_end":150712,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150717,"byte_end":150720,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150725,"byte_end":150753,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150758,"byte_end":150761,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150766,"byte_end":150858,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150863,"byte_end":150957,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":150962,"byte_end":151017,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151022,"byte_end":151025,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151030,"byte_end":151054,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151059,"byte_end":151076,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151081,"byte_end":151106,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151111,"byte_end":151129,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151134,"byte_end":151137,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151142,"byte_end":151153,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151158,"byte_end":151174,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151179,"byte_end":151198,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151203,"byte_end":151226,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151231,"byte_end":151260,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151265,"byte_end":151300,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151305,"byte_end":151312,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151317,"byte_end":151320,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151325,"byte_end":151419,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151424,"byte_end":151517,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151522,"byte_end":151547,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151706,"byte_end":151710,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151640,"byte_end":151694,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152131,"byte_end":152150,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151781,"byte_end":151830,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151835,"byte_end":151838,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151843,"byte_end":151936,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":151941,"byte_end":152035,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152040,"byte_end":152119,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152731,"byte_end":152740,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152221,"byte_end":152286,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152291,"byte_end":152294,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152299,"byte_end":152392,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152397,"byte_end":152492,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152497,"byte_end":152589,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152594,"byte_end":152688,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152693,"byte_end":152719,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153165,"byte_end":153174,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152823,"byte_end":152884,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152889,"byte_end":152892,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152897,"byte_end":152986,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":152991,"byte_end":153085,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153090,"byte_end":153153,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153424,"byte_end":153429,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153277,"byte_end":153322,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153327,"byte_end":153330,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153335,"byte_end":153412,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153908,"byte_end":153929,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153537,"byte_end":153596,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153601,"byte_end":153604,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153609,"byte_end":153698,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153703,"byte_end":153797,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":153802,"byte_end":153896,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154361,"byte_end":154376,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154060,"byte_end":154100,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154105,"byte_end":154108,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154113,"byte_end":154205,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154210,"byte_end":154305,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154310,"byte_end":154349,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154811,"byte_end":154820,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154486,"byte_end":154551,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154556,"byte_end":154559,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154564,"byte_end":154652,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154657,"byte_end":154752,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154757,"byte_end":154799,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155706,"byte_end":155720,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154994,"byte_end":155043,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155048,"byte_end":155051,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155056,"byte_end":155151,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155156,"byte_end":155217,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155222,"byte_end":155225,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155230,"byte_end":155245,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155250,"byte_end":155253,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155258,"byte_end":155265,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155270,"byte_end":155306,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155311,"byte_end":155375,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155380,"byte_end":155383,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155388,"byte_end":155427,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155432,"byte_end":155497,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155502,"byte_end":155505,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155510,"byte_end":155554,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155559,"byte_end":155591,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155596,"byte_end":155599,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155604,"byte_end":155627,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155632,"byte_end":155682,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":155687,"byte_end":155694,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4293},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156925,"byte_end":156929,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":4296},{"krate":0,"index":4297}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156223,"byte_end":156275,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156276,"byte_end":156279,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156280,"byte_end":156378,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156379,"byte_end":156428,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156429,"byte_end":156432,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156433,"byte_end":156531,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156532,"byte_end":156631,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156632,"byte_end":156702,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156703,"byte_end":156706,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156707,"byte_end":156729,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156730,"byte_end":156733,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156734,"byte_end":156817,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156818,"byte_end":156885,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":156886,"byte_end":156889,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4306},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157775,"byte_end":157782,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":4309},{"krate":0,"index":4310}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157053,"byte_end":157099,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157100,"byte_end":157103,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157104,"byte_end":157201,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157202,"byte_end":157300,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157301,"byte_end":157398,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157399,"byte_end":157440,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157441,"byte_end":157444,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157445,"byte_end":157467,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157468,"byte_end":157471,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157472,"byte_end":157555,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157556,"byte_end":157593,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157594,"byte_end":157667,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157668,"byte_end":157735,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157736,"byte_end":157739,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4320},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158490,"byte_end":158498,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":4319},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158367,"byte_end":158407,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158412,"byte_end":158415,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158420,"byte_end":158485,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4322},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158655,"byte_end":158673,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":4319},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158505,"byte_end":158563,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158568,"byte_end":158571,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158576,"byte_end":158650,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4325},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159282,"byte_end":159292,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":4319},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158692,"byte_end":158745,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158750,"byte_end":158753,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158758,"byte_end":158849,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158854,"byte_end":158894,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158899,"byte_end":158902,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158907,"byte_end":159002,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159007,"byte_end":159098,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159103,"byte_end":159198,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159203,"byte_end":159277,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":4319},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158355,"byte_end":158360,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n\n    /// The represented image was too large.\n    ///\n    /// The optional value denotes a possibly accepted maximal bound.\n    TooLarge,\n\n    /// The represented image can not use this representation.\n    ///\n    /// Has an additional value of the normalized form that would be accepted.\n    NormalFormRequired(NormalForm),\n\n    /// The color format did not match the channel count.\n    ///\n    /// In some cases you might be able to fix this by lowering the reported pixel count of the\n    /// buffer without touching the strides.\n    ///\n    /// In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n    /// directly memory unsafe although that will likely alias pixels. One scenario is when you\n    /// want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n    /// care about the value of the alpha channel even though you need `Rgba`.\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":4320},{"krate":0,"index":4322},{"krate":0,"index":4325}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157906,"byte_end":157987,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157988,"byte_end":157991,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":157992,"byte_end":158065,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158066,"byte_end":158142,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158143,"byte_end":158220,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":158221,"byte_end":158294,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4344},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159791,"byte_end":159800,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":4343},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159568,"byte_end":159597,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159602,"byte_end":159605,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159610,"byte_end":159693,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159698,"byte_end":159786,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4346},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160030,"byte_end":160041,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":4343},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159807,"byte_end":159838,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159843,"byte_end":159846,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159851,"byte_end":159939,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159944,"byte_end":160025,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4348},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160325,"byte_end":160336,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":4343},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160048,"byte_end":160075,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160080,"byte_end":160083,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160088,"byte_end":160181,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160186,"byte_end":160276,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160281,"byte_end":160320,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4350},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160546,"byte_end":160560,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":4343},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160343,"byte_end":160408,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160413,"byte_end":160416,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160421,"byte_end":160514,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160519,"byte_end":160541,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4352},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160776,"byte_end":160793,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":4343},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160567,"byte_end":160635,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160640,"byte_end":160643,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160648,"byte_end":160741,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160746,"byte_end":160771,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4343},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159551,"byte_end":159561,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n\n    /// No pixel aliases another.\n    ///\n    /// Unaliased also guarantees that all index calculations in the image bounds using\n    /// `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n    Unaliased,\n\n    /// At least pixels are packed.\n    ///\n    /// Images of these types can wrap `[T]`-slices into the standard color types. This is a\n    /// precondition for `GenericImage` which requires by-reference access to pixels.\n    PixelPacked,\n\n    /// All samples are packed.\n    ///\n    /// This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n    /// it is not necessary that the pixel samples themselves are adjacent. An example of this\n    /// behaviour is a planar image layout.\n    ImagePacked,\n\n    /// The samples are in row-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in row-major form.\n    RowMajorPacked,\n\n    /// The samples are in column-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in column-major form.\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":4344},{"krate":0,"index":4346},{"krate":0,"index":4348},{"krate":0,"index":4350},{"krate":0,"index":4352}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159308,"byte_end":159346,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159347,"byte_end":159350,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159351,"byte_end":159450,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":159451,"byte_end":159490,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161001,"byte_end":161011,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160882,"byte_end":160913,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160918,"byte_end":160921,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160926,"byte_end":160989,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161494,"byte_end":161498,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161073,"byte_end":161124,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161129,"byte_end":161132,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161137,"byte_end":161226,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161231,"byte_end":161324,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161329,"byte_end":161416,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161421,"byte_end":161482,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161777,"byte_end":161784,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161563,"byte_end":161603,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161608,"byte_end":161611,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161616,"byte_end":161706,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161711,"byte_end":161765,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162103,"byte_end":162113,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161844,"byte_end":161906,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161911,"byte_end":161914,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":161919,"byte_end":162009,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162014,"byte_end":162091,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162987,"byte_end":163001,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162445,"byte_end":162515,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162520,"byte_end":162523,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162528,"byte_end":162622,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162627,"byte_end":162722,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162727,"byte_end":162794,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162799,"byte_end":162802,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162807,"byte_end":162901,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":162906,"byte_end":162975,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163578,"byte_end":163588,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163396,"byte_end":163486,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163491,"byte_end":163494,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163499,"byte_end":163566,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163922,"byte_end":163933,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163659,"byte_end":163721,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163726,"byte_end":163729,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163734,"byte_end":163825,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":163830,"byte_end":163910,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164390,"byte_end":164405,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164026,"byte_end":164096,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164101,"byte_end":164104,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164109,"byte_end":164203,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164208,"byte_end":164304,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164309,"byte_end":164378,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164928,"byte_end":164937,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164598,"byte_end":164625,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164630,"byte_end":164633,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164638,"byte_end":164725,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164730,"byte_end":164823,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":164828,"byte_end":164916,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165941,"byte_end":165952,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165092,"byte_end":165150,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165155,"byte_end":165158,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165163,"byte_end":165258,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165263,"byte_end":165353,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165358,"byte_end":165446,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165451,"byte_end":165527,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165532,"byte_end":165535,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165540,"byte_end":165547,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165552,"byte_end":165578,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165583,"byte_end":165604,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165609,"byte_end":165674,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165679,"byte_end":165748,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165753,"byte_end":165756,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165761,"byte_end":165792,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165797,"byte_end":165800,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165805,"byte_end":165865,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165870,"byte_end":165917,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":165922,"byte_end":165929,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166593,"byte_end":166603,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166474,"byte_end":166505,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166510,"byte_end":166513,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166518,"byte_end":166581,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167087,"byte_end":167091,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166665,"byte_end":166717,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166722,"byte_end":166725,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166730,"byte_end":166819,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166824,"byte_end":166917,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166922,"byte_end":167009,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167014,"byte_end":167075,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167464,"byte_end":167471,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167156,"byte_end":167196,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167201,"byte_end":167204,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167209,"byte_end":167299,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167304,"byte_end":167396,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167401,"byte_end":167452,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167713,"byte_end":167723,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167531,"byte_end":167621,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167626,"byte_end":167629,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167634,"byte_end":167701,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168034,"byte_end":168044,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167794,"byte_end":167837,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167842,"byte_end":167845,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167850,"byte_end":167940,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":167945,"byte_end":168022,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168669,"byte_end":168683,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168423,"byte_end":168472,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168477,"byte_end":168480,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168485,"byte_end":168575,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":168580,"byte_end":168657,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169294,"byte_end":169305,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169031,"byte_end":169093,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169098,"byte_end":169101,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169106,"byte_end":169197,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169202,"byte_end":169282,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169504,"byte_end":169519,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169437,"byte_end":169492,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169987,"byte_end":169996,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169657,"byte_end":169684,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169689,"byte_end":169692,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169697,"byte_end":169784,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169789,"byte_end":169882,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":169887,"byte_end":169975,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":711},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7611,"byte_end":7617,"line_start":215,"line_end":215,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":967},{"krate":0,"index":1020},{"krate":0,"index":1142},{"krate":0,"index":1235},{"krate":0,"index":1339},{"krate":0,"index":1567},{"krate":0,"index":1694},{"krate":0,"index":1922},{"krate":0,"index":2057},{"krate":0,"index":2453},{"krate":0,"index":2618},{"krate":0,"index":2690}],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5569,"byte_end":5626,"line_start":176,"line_end":176,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5627,"byte_end":5630,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5631,"byte_end":5654,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5655,"byte_end":5658,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5659,"byte_end":5695,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5696,"byte_end":5732,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5733,"byte_end":5794,"line_start":182,"line_end":182,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5795,"byte_end":5852,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5853,"byte_end":5879,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | RGB8, RGBA8, Gray8, GrayA8 |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5880,"byte_end":5929,"line_start":185,"line_end":185,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5930,"byte_end":5956,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB8, RGBA8, Gray8 |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5957,"byte_end":6036,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6037,"byte_end":6083,"line_start":188,"line_end":188,"column_start":1,"column_end":47}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6084,"byte_end":6134,"line_start":189,"line_end":189,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6135,"byte_end":6173,"line_start":190,"line_end":190,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | RGB8, RGBA8, BGR8, BGRA8, Gray8, GrayA8 |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6174,"byte_end":6236,"line_start":191,"line_end":191,"column_start":1,"column_end":63}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6237,"byte_end":6265,"line_start":192,"line_end":192,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6266,"byte_end":6269,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6270,"byte_end":6311,"line_start":194,"line_end":194,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6312,"byte_end":6315,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6316,"byte_end":6408,"line_start":196,"line_end":196,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6409,"byte_end":6507,"line_start":197,"line_end":197,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6508,"byte_end":6601,"line_start":198,"line_end":198,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6602,"byte_end":6701,"line_start":199,"line_end":199,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6702,"byte_end":6798,"line_start":200,"line_end":200,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6799,"byte_end":6802,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6803,"byte_end":6894,"line_start":202,"line_end":202,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6895,"byte_end":6967,"line_start":203,"line_end":203,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6968,"byte_end":6971,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":6972,"byte_end":7066,"line_start":205,"line_end":205,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7067,"byte_end":7124,"line_start":206,"line_end":206,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7125,"byte_end":7219,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7220,"byte_end":7319,"line_start":208,"line_end":208,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7320,"byte_end":7418,"line_start":209,"line_end":209,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7419,"byte_end":7443,"line_start":210,"line_end":210,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7444,"byte_end":7447,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7448,"byte_end":7509,"line_start":212,"line_end":212,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7510,"byte_end":7513,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7514,"byte_end":7602,"line_start":214,"line_end":214,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":712},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::codecs::bmp","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":925}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7671,"byte_end":7694,"line_start":218,"line_end":218,"column_start":5,"column_end":28}},{"value":"/  Decoding and Encoding of BMP Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183172,"byte_end":183212,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183213,"byte_end":183216,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183217,"byte_end":183275,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183276,"byte_end":183279,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183280,"byte_end":183300,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183301,"byte_end":183393,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"/  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183394,"byte_end":183448,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/mod.rs","byte_start":183449,"byte_end":183452,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":823},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":201589,"byte_end":201599,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::codecs::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":201560,"byte_end":201577,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":204167,"byte_end":204170,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":204094,"byte_end":204155,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":215968,"byte_end":215995,"line_start":945,"line_end":945,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BmpDecoder<R>>::read_metadata_in_ico_format","value":"pub fn read_metadata_in_ico_format(&mut Self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":215914,"byte_end":215937,"line_start":943,"line_end":943,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":901},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":235924,"byte_end":235933,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::codecs::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":235867,"byte_end":235912,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":942},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238559,"byte_end":238569,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::codecs::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":945}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238507,"byte_end":238547,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":946},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238807,"byte_end":238817,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"BMPEncoder","qualname":"::codecs::bmp::encoder::BMPEncoder","value":"BmpEncoder","parent":null,"children":[],"decl_id":null,"docs":" BMP Encoder","sig":null,"attributes":[{"value":"/ BMP Encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238609,"byte_end":238624,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238625,"byte_end":238628,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ An alias of [`BmpEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238629,"byte_end":238660,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238661,"byte_end":238664,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238665,"byte_end":238681,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238682,"byte_end":238685,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`BmpEncoder`]: struct.BmpEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238686,"byte_end":238728,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238729,"byte_end":238748,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `BmpEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238749,"byte_end":238797,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238966,"byte_end":238969,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"pub fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238895,"byte_end":238954,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":239177,"byte_end":239183,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":239038,"byte_end":239071,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":239076,"byte_end":239128,"line_start":35,"line_end":35,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":239133,"byte_end":239165,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":967},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dds","qualname":"::codecs::dds","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":4556},{"krate":0,"index":4589},{"krate":0,"index":4588},{"krate":0,"index":4586},{"krate":0,"index":4583},{"krate":0,"index":4579},{"krate":0,"index":4580},{"krate":0,"index":4576},{"krate":0,"index":4577},{"krate":0,"index":4570},{"krate":0,"index":4568},{"krate":0,"index":990},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":4591},{"krate":0,"index":4601},{"krate":0,"index":4603},{"krate":0,"index":4612},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1011}],"decl_id":null,"docs":"  Decoding of DDS images","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7716,"byte_end":7739,"line_start":220,"line_end":220,"column_start":5,"column_end":28}},{"value":"/  Decoding of DDS images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250135,"byte_end":250162,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250163,"byte_end":250166,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  DDS (DirectDraw Surface) is a container format for storing DXT (S3TC) compressed images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250167,"byte_end":250260,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250261,"byte_end":250264,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250265,"byte_end":250285,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide> - Description of the DDS format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":250286,"byte_end":250409,"line_start":6,"line_end":6,"column_start":1,"column_end":124}}]},{"kind":"Struct","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254841,"byte_end":254851,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"DdsDecoder","qualname":"::codecs::dds::DdsDecoder","value":"DdsDecoder {  }","parent":null,"children":[{"krate":0,"index":1006}],"decl_id":null,"docs":" The representation of a DDS decoder\n","sig":null,"attributes":[{"value":"/ The representation of a DDS decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254790,"byte_end":254829,"line_start":154,"line_end":154,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254995,"byte_end":254998,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"new","qualname":"<DdsDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254926,"byte_end":254983,"line_start":160,"line_end":160,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::codecs::dxt","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","parent":null,"children":[{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":4614},{"krate":0,"index":4630},{"krate":0,"index":4629},{"krate":0,"index":4627},{"krate":0,"index":4624},{"krate":0,"index":4625},{"krate":0,"index":4621},{"krate":0,"index":4622},{"krate":0,"index":1040},{"krate":0,"index":1041},{"krate":0,"index":1045},{"krate":0,"index":1052},{"krate":0,"index":1056},{"krate":0,"index":1065},{"krate":0,"index":1073},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1101},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1126},{"krate":0,"index":1130},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1140}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7761,"byte_end":7784,"line_start":222,"line_end":222,"column_start":5,"column_end":28}},{"value":"/  Decoding of DXT (S3TC) compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":256899,"byte_end":256938,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":256939,"byte_end":256942,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  DXT is an image format that supports lossy compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":256943,"byte_end":257002,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257003,"byte_end":257006,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257007,"byte_end":257027,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257028,"byte_end":257180,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257181,"byte_end":257184,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257185,"byte_end":257314,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4615},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258096,"byte_end":258100,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::codecs::dxt::DXTVariant::DXT1","value":"DXTVariant::DXT1","parent":{"krate":0,"index":4614},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257972,"byte_end":258038,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258043,"byte_end":258091,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4617},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258231,"byte_end":258235,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::codecs::dxt::DXTVariant::DXT3","value":"DXTVariant::DXT3","parent":{"krate":0,"index":4614},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258106,"byte_end":258173,"line_start":31,"line_end":31,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258178,"byte_end":258226,"line_start":32,"line_end":32,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4619},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258366,"byte_end":258370,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::codecs::dxt::DXTVariant::DXT5","value":"DXTVariant::DXT5","parent":{"krate":0,"index":4614},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258241,"byte_end":258308,"line_start":34,"line_end":34,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258313,"byte_end":258361,"line_start":35,"line_end":35,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":4614},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257955,"byte_end":257965,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"DXTVariant","qualname":"::codecs::dxt::DXTVariant","value":"pub enum DXTVariant {\n\n    /// The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n    /// compressed into an 8 byte block of DXT1 data\n    DXT1,\n\n    /// The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n    /// compressed into a 16 byte block of DXT3 data\n    DXT3,\n\n    /// The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n    /// compressed into a 16 byte block of DXT5 data\n    DXT5,\n}","parent":null,"children":[{"krate":0,"index":4615},{"krate":0,"index":4617},{"krate":0,"index":4619}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257589,"byte_end":257638,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257639,"byte_end":257691,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257692,"byte_end":257739,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257740,"byte_end":257743,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`DxtVariant`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257744,"byte_end":257816,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257817,"byte_end":257820,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`DxtVariant`]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257821,"byte_end":257855,"line_start":23,"line_end":23,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257856,"byte_end":257859,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`DxtVariant`]: type.DxtVariant.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":257860,"byte_end":257900,"line_start":25,"line_end":25,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1040},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258567,"byte_end":258577,"line_start":47,"line_end":47,"column_start":10,"column_end":20},"name":"DxtVariant","qualname":"::codecs::dxt::DxtVariant","value":"DXTVariant","parent":null,"children":[],"decl_id":null,"docs":" DXT compression version.","sig":null,"attributes":[{"value":"/ DXT compression version.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258375,"byte_end":258403,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258404,"byte_end":258407,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DXTVariant`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258408,"byte_end":258439,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258440,"byte_end":258443,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258444,"byte_end":258492,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258493,"byte_end":258496,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`DXTVariant`]: enum.DXTVariant.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258497,"byte_end":258537,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258538,"byte_end":258557,"line_start":46,"line_end":46,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259209,"byte_end":259219,"line_start":68,"line_end":68,"column_start":12,"column_end":22},"name":"color_type","qualname":"<DXTVariant>::color_type","value":"pub fn color_type(Self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the color type that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the color type that is stored in this DXT variant","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259136,"byte_end":259197,"line_start":67,"line_end":67,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259426,"byte_end":259436,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"DxtDecoder","qualname":"::codecs::dxt::DxtDecoder","value":"DxtDecoder {  }","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259399,"byte_end":259414,"line_start":76,"line_end":76,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":260016,"byte_end":260019,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtDecoder<R>>::new","value":"pub fn new(R, u32, u32, DXTVariant) -> Result<DxtDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259585,"byte_end":259651,"line_start":86,"line_end":86,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259656,"byte_end":259719,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259724,"byte_end":259781,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259786,"byte_end":259850,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259855,"byte_end":259888,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259893,"byte_end":259960,"line_start":91,"line_end":91,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259965,"byte_end":260004,"line_start":92,"line_end":92,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263389,"byte_end":263398,"line_start":194,"line_end":194,"column_start":12,"column_end":21},"name":"DxtReader","qualname":"::codecs::dxt::DxtReader","value":"DxtReader {  }","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263363,"byte_end":263377,"line_start":193,"line_end":193,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263663,"byte_end":263672,"line_start":208,"line_end":208,"column_start":10,"column_end":19},"name":"DXTReader","qualname":"::codecs::dxt::DXTReader","value":"DxtReader<R>","parent":null,"children":[],"decl_id":null,"docs":" DXT reader","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263470,"byte_end":263484,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263485,"byte_end":263488,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtReader`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263489,"byte_end":263519,"line_start":201,"line_end":201,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263520,"byte_end":263523,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263524,"byte_end":263540,"line_start":203,"line_end":203,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263541,"byte_end":263544,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ [`DxtReader`]: struct.DxtReader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263545,"byte_end":263585,"line_start":205,"line_end":205,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263586,"byte_end":263605,"line_start":206,"line_end":206,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtReader` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263606,"byte_end":263653,"line_start":207,"line_end":207,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263934,"byte_end":263944,"line_start":218,"line_end":218,"column_start":12,"column_end":22},"name":"DxtEncoder","qualname":"::codecs::dxt::DxtEncoder","value":"DxtEncoder {  }","parent":null,"children":[{"krate":0,"index":1085}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263907,"byte_end":263922,"line_start":217,"line_end":217,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264168,"byte_end":264178,"line_start":231,"line_end":231,"column_start":10,"column_end":20},"name":"DXTEncoder","qualname":"::codecs::dxt::DXTEncoder","value":"DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" DXT encoder","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263970,"byte_end":263985,"line_start":222,"line_end":222,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263986,"byte_end":263989,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ An alias of [`DxtEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263990,"byte_end":264021,"line_start":224,"line_end":224,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264022,"byte_end":264025,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264026,"byte_end":264042,"line_start":226,"line_end":226,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264043,"byte_end":264046,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [`DxtEncoder`]: struct.DxtEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264047,"byte_end":264089,"line_start":228,"line_end":228,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264090,"byte_end":264109,"line_start":229,"line_end":229,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `DxtEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264110,"byte_end":264158,"line_start":230,"line_end":230,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264305,"byte_end":264308,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtEncoder<W>>::new","value":"pub fn new(W) -> DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264235,"byte_end":264293,"line_start":234,"line_end":234,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264572,"byte_end":264578,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"encode","qualname":"<DxtEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, DXTVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DXTVariant``` ```variant```\n data is assumed to be in variant.color_type()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264370,"byte_end":264407,"line_start":239,"line_end":239,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264412,"byte_end":264464,"line_start":240,"line_end":240,"column_start":5,"column_end":57}},{"value":"/ in ```DXTVariant``` ```variant```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264469,"byte_end":264506,"line_start":241,"line_end":241,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.color_type()","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264511,"byte_end":264560,"line_start":242,"line_end":242,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1142},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"farbfeld","qualname":"::codecs::farbfeld","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1178},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1195},{"krate":0,"index":1198},{"krate":0,"index":1201},{"krate":0,"index":1204},{"krate":0,"index":1207},{"krate":0,"index":1215},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1232}],"decl_id":null,"docs":" Decoding of farbfeld images","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7806,"byte_end":7834,"line_start":224,"line_end":224,"column_start":5,"column_end":33}},{"value":"/ Decoding of farbfeld images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286584,"byte_end":286615,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286616,"byte_end":286619,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ farbfeld is a lossless image format which is easy to parse, pipe and compress.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286620,"byte_end":286702,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286703,"byte_end":286706,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ It has the following format:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286707,"byte_end":286739,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286740,"byte_end":286743,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ | Bytes  | Description                                             |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286744,"byte_end":286816,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ |--------|---------------------------------------------------------|","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286817,"byte_end":286889,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/ | 8      | \"farbfeld\" magic value                                  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286890,"byte_end":286962,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ | 4      | 32-Bit BE unsigned integer (width)                      |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":286963,"byte_end":287035,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ | 4      | 32-Bit BE unsigned integer (height)                     |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287036,"byte_end":287108,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ | [2222] | 4⋅16-Bit BE unsigned integers [RGBA] / pixel, row-major |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287109,"byte_end":287183,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287184,"byte_end":287187,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The RGB-data should be sRGB for best interoperability and not alpha-premultiplied.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287188,"byte_end":287274,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287275,"byte_end":287278,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287279,"byte_end":287298,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/ * <https://tools.suckless.org/farbfeld/> - the farbfeld specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287299,"byte_end":287372,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287797,"byte_end":287811,"line_start":30,"line_end":30,"column_start":12,"column_end":26},"name":"FarbfeldReader","qualname":"::codecs::farbfeld::FarbfeldReader","value":"FarbfeldReader {  }","parent":null,"children":[{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177}],"decl_id":null,"docs":" farbfeld Reader\n","sig":null,"attributes":[{"value":"/ farbfeld Reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":287766,"byte_end":287785,"line_start":29,"line_end":29,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1201},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292519,"byte_end":292534,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"FarbfeldDecoder","qualname":"::codecs::farbfeld::FarbfeldDecoder","value":"FarbfeldDecoder {  }","parent":null,"children":[{"krate":0,"index":1203}],"decl_id":null,"docs":" farbfeld decoder\n","sig":null,"attributes":[{"value":"/ farbfeld decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292487,"byte_end":292507,"line_start":162,"line_end":162,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292693,"byte_end":292696,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<FarbfeldDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292619,"byte_end":292681,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1223},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294039,"byte_end":294054,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"FarbfeldEncoder","qualname":"::codecs::farbfeld::FarbfeldEncoder","value":"FarbfeldEncoder {  }","parent":null,"children":[{"krate":0,"index":1225}],"decl_id":null,"docs":" farbfeld encoder\n","sig":null,"attributes":[{"value":"/ farbfeld encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294007,"byte_end":294027,"line_start":215,"line_end":215,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294201,"byte_end":294204,"line_start":222,"line_end":222,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldEncoder<W>>::new","value":"pub fn new(W) -> FarbfeldEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294131,"byte_end":294189,"line_start":221,"line_end":221,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294412,"byte_end":294418,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"encode","qualname":"<FarbfeldEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data``` (native endian)\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data``` (native endian)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294295,"byte_end":294343,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294348,"byte_end":294400,"line_start":227,"line_end":227,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::codecs::gif","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":6913},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":6931},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276},{"krate":0,"index":1281},{"krate":0,"index":1285},{"krate":0,"index":1295},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1310},{"krate":0,"index":1314},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1334}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7861,"byte_end":7884,"line_start":226,"line_end":226,"column_start":5,"column_end":28}},{"value":"/  Decoding of GIF Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298659,"byte_end":298686,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298687,"byte_end":298690,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298691,"byte_end":298784,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298785,"byte_end":298788,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298789,"byte_end":298809,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298810,"byte_end":298889,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298890,"byte_end":298893,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298894,"byte_end":298908,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298909,"byte_end":298927,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/ use image::gif::{GifDecoder, GifEncoder};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298928,"byte_end":298973,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":298974,"byte_end":299022,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299023,"byte_end":299045,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/ # fn main() -> std::io::Result<()> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299046,"byte_end":299086,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ // Decode a gif into frames","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299087,"byte_end":299118,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299119,"byte_end":299160,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/ let mut decoder = GifDecoder::new(file_in).unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299161,"byte_end":299217,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/ let frames = decoder.into_frames();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299218,"byte_end":299257,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/ let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299258,"byte_end":299328,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299329,"byte_end":299332,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Encode frames into a gif and save to a file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299333,"byte_end":299383,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299384,"byte_end":299430,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ let mut encoder = GifEncoder::new(file_out);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299431,"byte_end":299479,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ encoder.encode_frames(frames.into_iter());","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299480,"byte_end":299526,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299527,"byte_end":299539,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299540,"byte_end":299547,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299548,"byte_end":299555,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":299556,"byte_end":299589,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300173,"byte_end":300183,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"GifDecoder","qualname":"::codecs::gif::GifDecoder","value":"GifDecoder {  }","parent":null,"children":[{"krate":0,"index":1272}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300146,"byte_end":300161,"line_start":46,"line_end":46,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300335,"byte_end":300338,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<GifDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300261,"byte_end":300323,"line_start":52,"line_end":52,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300663,"byte_end":300672,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::codecs::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300606,"byte_end":300651,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1314},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309648,"byte_end":309658,"line_start":293,"line_end":293,"column_start":12,"column_end":22},"name":"GifEncoder","qualname":"::codecs::gif::GifEncoder","value":"GifEncoder {  }","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309620,"byte_end":309636,"line_start":292,"line_end":292,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1318},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309932,"byte_end":309939,"line_start":307,"line_end":307,"column_start":10,"column_end":17},"name":"Encoder","qualname":"::codecs::gif::Encoder","value":"GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" GIF encoder","sig":null,"attributes":[{"value":"/ GIF encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309734,"byte_end":309749,"line_start":298,"line_end":298,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309750,"byte_end":309753,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/ An alias of [`GifEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309754,"byte_end":309785,"line_start":300,"line_end":300,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309786,"byte_end":309789,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309790,"byte_end":309806,"line_start":302,"line_end":302,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309807,"byte_end":309810,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ [`GifEncoder`]: struct.GifEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309811,"byte_end":309853,"line_start":304,"line_end":304,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309854,"byte_end":309873,"line_start":305,"line_end":305,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `GifEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309874,"byte_end":309922,"line_start":306,"line_end":306,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":310038,"byte_end":310041,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<GifEncoder<W>>::new","value":"pub fn new(W) -> GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309996,"byte_end":310026,"line_start":310,"line_end":310,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":310202,"byte_end":310208,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"encode","qualname":"<GifEncoder<W>>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single image.\n","sig":null,"attributes":[{"value":"/ Encode a single image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":310164,"byte_end":310190,"line_start":318,"line_end":318,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":310923,"byte_end":310935,"line_start":340,"line_end":340,"column_start":12,"column_end":24},"name":"encode_frame","qualname":"<GifEncoder<W>>::encode_frame","value":"pub fn encode_frame(&mut Self, animation::Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode one frame of animation.\n","sig":null,"attributes":[{"value":"/ Encode one frame of animation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":310877,"byte_end":310911,"line_start":339,"line_end":339,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311221,"byte_end":311234,"line_start":347,"line_end":347,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<GifEncoder<W>>::encode_frames","value":"pub fn encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = animation::Frame>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311091,"byte_end":311110,"line_start":345,"line_end":345,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311115,"byte_end":311209,"line_start":346,"line_end":346,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311712,"byte_end":311729,"line_start":360,"line_end":360,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<GifEncoder<W>>::try_encode_frames","value":"pub fn try_encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = ImageResult<animation::Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311457,"byte_end":311531,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311536,"byte_end":311605,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":311610,"byte_end":311700,"line_start":359,"line_end":359,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::codecs::hdr","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1512},{"krate":0,"index":1565},{"krate":0,"index":1566}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7906,"byte_end":7929,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  Decoding of Radiance HDR Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314739,"byte_end":314775,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314776,"byte_end":314779,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder for Radiance HDR images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314780,"byte_end":314818,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314819,"byte_end":314822,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314823,"byte_end":314843,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314844,"byte_end":314847,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314848,"byte_end":314907,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314908,"byte_end":314965,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/mod.rs","byte_start":314966,"byte_end":314969,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4705},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319528,"byte_end":319538,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"HdrAdapter","qualname":"::codecs::hdr::decoder::HdrAdapter","value":"HdrAdapter {  }","parent":null,"children":[{"krate":0,"index":4707},{"krate":0,"index":4708}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319449,"byte_end":319499,"line_start":116,"line_end":116,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1387},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319841,"byte_end":319851,"line_start":133,"line_end":133,"column_start":10,"column_end":20},"name":"HDRAdapter","qualname":"::codecs::hdr::decoder::HDRAdapter","value":"HdrAdapter<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Adapter","sig":null,"attributes":[{"value":"/ HDR Adapter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319643,"byte_end":319658,"line_start":124,"line_end":124,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319659,"byte_end":319662,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrAdapter`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319663,"byte_end":319694,"line_start":126,"line_end":126,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319695,"byte_end":319698,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319699,"byte_end":319715,"line_start":128,"line_end":128,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319716,"byte_end":319719,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ [`HdrAdapter`]: struct.HdrAdapter.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319720,"byte_end":319762,"line_start":130,"line_end":130,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319763,"byte_end":319782,"line_start":131,"line_end":131,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrAdapter` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319783,"byte_end":319831,"line_start":132,"line_end":132,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319941,"byte_end":319944,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrAdapter<R>>::new","value":"pub fn new(R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319910,"byte_end":319929,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":320217,"byte_end":320230,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HdrAdapter<R>>::new_nonstrict","value":"pub fn new_nonstrict(R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":320163,"byte_end":320205,"line_start":146,"line_end":146,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321207,"byte_end":321216,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::codecs::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321150,"byte_end":321195,"line_start":175,"line_end":175,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":1418},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322660,"byte_end":322669,"line_start":227,"line_end":227,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::codecs::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322618,"byte_end":322649,"line_start":226,"line_end":226,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4712},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322787,"byte_end":322797,"line_start":232,"line_end":232,"column_start":12,"column_end":22},"name":"HdrDecoder","qualname":"::codecs::hdr::decoder::HdrDecoder","value":"HdrDecoder {  }","parent":null,"children":[{"krate":0,"index":4714},{"krate":0,"index":4715},{"krate":0,"index":4716},{"krate":0,"index":4717}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322731,"byte_end":322758,"line_start":230,"line_end":230,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4721},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323022,"byte_end":323032,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"Rgbe8Pixel","qualname":"::codecs::hdr::decoder::Rgbe8Pixel","value":"Rgbe8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":4722},{"krate":0,"index":4724}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322872,"byte_end":322945,"line_start":239,"line_end":239,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322946,"byte_end":322956,"line_start":240,"line_end":240,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":4722},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323068,"byte_end":323069,"line_start":244,"line_end":244,"column_start":9,"column_end":10},"name":"c","qualname":"::codecs::hdr::decoder::Rgbe8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323039,"byte_end":323059,"line_start":243,"line_end":243,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":4724},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323105,"byte_end":323106,"line_start":246,"line_end":246,"column_start":9,"column_end":10},"name":"e","qualname":"::codecs::hdr::decoder::Rgbe8Pixel::e","value":"u8","parent":{"krate":0,"index":4721},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323084,"byte_end":323096,"line_start":245,"line_end":245,"column_start":5,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":1420},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323371,"byte_end":323381,"line_start":258,"line_end":258,"column_start":10,"column_end":20},"name":"RGBE8Pixel","qualname":"::codecs::hdr::decoder::RGBE8Pixel","value":"Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323115,"byte_end":323188,"line_start":249,"line_end":249,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323189,"byte_end":323192,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ An alias of [`Rgbe8Pixel`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323193,"byte_end":323224,"line_start":251,"line_end":251,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323225,"byte_end":323228,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323229,"byte_end":323245,"line_start":253,"line_end":253,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323246,"byte_end":323249,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`Rgbe8Pixel`]: struct.Rgbe8Pixel.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323250,"byte_end":323292,"line_start":255,"line_end":255,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323293,"byte_end":323312,"line_start":256,"line_end":256,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `Rgbe8Pixel` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323313,"byte_end":323361,"line_start":257,"line_end":257,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323449,"byte_end":323454,"line_start":261,"line_end":261,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::codecs::hdr::decoder::rgbe8","value":"pub fn rgbe8(u8, u8, u8, u8) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```RGBE8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```RGBE8Pixel``` from components","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323397,"byte_end":323441,"line_start":260,"line_end":260,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323643,"byte_end":323649,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<Rgbe8Pixel>::to_hdr","value":"pub fn to_hdr(Self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323559,"byte_end":323617,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323622,"byte_end":323631,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324409,"byte_end":324415,"line_start":290,"line_end":290,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<Rgbe8Pixel>::to_ldr","value":"pub fn to_ldr<T: Primitive + Zero>(Self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```RGBE8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324144,"byte_end":324218,"line_start":282,"line_end":282,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324223,"byte_end":324226,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324231,"byte_end":324280,"line_start":284,"line_end":284,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324285,"byte_end":324288,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324293,"byte_end":324304,"line_start":286,"line_end":286,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324309,"byte_end":324312,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324317,"byte_end":324383,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324388,"byte_end":324397,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324801,"byte_end":324819,"line_start":303,"line_end":303,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<Rgbe8Pixel>::to_ldr_scale_gamma","value":"pub fn to_ldr_scale_gamma<T: Primitive + Zero>(Self, f32, f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts RGBE8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324508,"byte_end":324574,"line_start":294,"line_end":294,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324579,"byte_end":324582,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324587,"byte_end":324636,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324641,"byte_end":324644,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324649,"byte_end":324660,"line_start":298,"line_end":298,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324665,"byte_end":324668,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324673,"byte_end":324733,"line_start":300,"line_end":300,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324738,"byte_end":324775,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":324780,"byte_end":324789,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326027,"byte_end":326030,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HdrDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":325878,"byte_end":325933,"line_start":331,"line_end":331,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HdrDecoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":325938,"byte_end":325984,"line_start":332,"line_end":332,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":325989,"byte_end":326015,"line_start":333,"line_end":333,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326438,"byte_end":326453,"line_start":345,"line_end":345,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HdrDecoder<R>>::with_strictness","value":"pub fn with_strictness(R, bool) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HdrDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326135,"byte_end":326196,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HdrDecoder```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326201,"byte_end":326254,"line_start":339,"line_end":339,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326259,"byte_end":326262,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326267,"byte_end":326297,"line_start":341,"line_end":341,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326302,"byte_end":326305,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326310,"byte_end":326360,"line_start":343,"line_end":343,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":326365,"byte_end":326426,"line_start":344,"line_end":344,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1435},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":329006,"byte_end":329014,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HdrDecoder<R>>::metadata","value":"pub fn metadata(&Self) -> HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HDRMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HDRMetadata``` for details.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":328928,"byte_end":328994,"line_start":411,"line_end":411,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1436},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":329145,"byte_end":329162,"line_start":417,"line_end":417,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HdrDecoder<R>>::read_image_native","value":"pub fn read_image_native(Self) -> ImageResult<Vec<Rgbe8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":329076,"byte_end":329133,"line_start":416,"line_end":416,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1437},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":329795,"byte_end":329815,"line_start":432,"line_end":432,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HdrDecoder<R>>::read_image_transform","value":"pub fn read_image_transform<T: Send, F: Send + Sync + Fn(Rgbe8Pixel) ->\n                            T>(Self, F, &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":329720,"byte_end":329783,"line_start":431,"line_end":431,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":330954,"byte_end":330968,"line_start":468,"line_end":468,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HdrDecoder<R>>::read_image_ldr","value":"pub fn read_image_ldr(Self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":330851,"byte_end":330911,"line_start":466,"line_end":466,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":330916,"byte_end":330942,"line_start":467,"line_end":467,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":331272,"byte_end":331286,"line_start":476,"line_end":476,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HdrDecoder<R>>::read_image_hdr","value":"pub fn read_image_hdr(Self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":331191,"byte_end":331252,"line_start":474,"line_end":474,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":331257,"byte_end":331260,"line_start":475,"line_end":475,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332097,"byte_end":332120,"line_start":501,"line_end":501,"column_start":12,"column_end":35},"name":"HdrImageDecoderIterator","qualname":"::codecs::hdr::decoder::HdrImageDecoderIterator","value":"HdrImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1459}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332040,"byte_end":332085,"line_start":500,"line_end":500,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1460},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332721,"byte_end":332744,"line_start":520,"line_end":520,"column_start":10,"column_end":33},"name":"HDRImageDecoderIterator","qualname":"::codecs::hdr::decoder::HDRImageDecoderIterator","value":"HdrImageDecoderIterator<R>","parent":null,"children":[],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332441,"byte_end":332486,"line_start":511,"line_end":511,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332487,"byte_end":332490,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrImageDecoderIterator`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332491,"byte_end":332535,"line_start":513,"line_end":513,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332536,"byte_end":332539,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332540,"byte_end":332556,"line_start":515,"line_end":515,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332557,"byte_end":332560,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ [`HdrImageDecoderIterator`]: struct.HdrImageDecoderIterator.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332561,"byte_end":332629,"line_start":517,"line_end":517,"column_start":1,"column_end":69}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332630,"byte_end":332649,"line_start":518,"line_end":518,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrImageDecoderIterator` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332650,"byte_end":332711,"line_start":519,"line_end":519,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":4741},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340023,"byte_end":340034,"line_start":734,"line_end":734,"column_start":12,"column_end":23},"name":"HdrMetadata","qualname":"::codecs::hdr::decoder::HdrMetadata","value":"HdrMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":4742},{"krate":0,"index":4743},{"krate":0,"index":4744},{"krate":0,"index":4745},{"krate":0,"index":4746},{"krate":0,"index":4747},{"krate":0,"index":4748}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":339952,"byte_end":339987,"line_start":732,"line_end":732,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":4742},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340172,"byte_end":340177,"line_start":737,"line_end":737,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::hdr::decoder::HdrMetadata::width","value":"u32","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340041,"byte_end":340104,"line_start":735,"line_end":735,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340109,"byte_end":340163,"line_start":736,"line_end":736,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":4743},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340256,"byte_end":340262,"line_start":739,"line_end":739,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::hdr::decoder::HdrMetadata::height","value":"u32","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340188,"byte_end":340247,"line_start":738,"line_end":738,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":4744},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340537,"byte_end":340548,"line_start":743,"line_end":743,"column_start":9,"column_end":20},"name":"orientation","qualname":"::codecs::hdr::decoder::HdrMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340273,"byte_end":340373,"line_start":740,"line_end":740,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340378,"byte_end":340455,"line_start":741,"line_end":741,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340460,"byte_end":340528,"line_start":742,"line_end":742,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":4745},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340773,"byte_end":340781,"line_start":748,"line_end":748,"column_start":9,"column_end":17},"name":"exposure","qualname":"::codecs::hdr::decoder::HdrMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340576,"byte_end":340646,"line_start":744,"line_end":744,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340651,"byte_end":340684,"line_start":745,"line_end":745,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340689,"byte_end":340692,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340697,"byte_end":340764,"line_start":747,"line_end":747,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4746},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341025,"byte_end":341041,"line_start":753,"line_end":753,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::codecs::hdr::decoder::HdrMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340800,"byte_end":340895,"line_start":749,"line_end":749,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340900,"byte_end":340936,"line_start":750,"line_end":750,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340941,"byte_end":340944,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":340949,"byte_end":341016,"line_start":752,"line_end":752,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":4747},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341120,"byte_end":341138,"line_start":755,"line_end":755,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::codecs::hdr::decoder::HdrMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341072,"byte_end":341111,"line_start":754,"line_end":754,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":4748},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341367,"byte_end":341384,"line_start":759,"line_end":759,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::codecs::hdr::decoder::HdrMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":4741},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341157,"byte_end":341242,"line_start":756,"line_end":756,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341247,"byte_end":341317,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341322,"byte_end":341358,"line_start":758,"line_end":758,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341615,"byte_end":341626,"line_start":771,"line_end":771,"column_start":10,"column_end":21},"name":"HDRMetadata","qualname":"::codecs::hdr::decoder::HDRMetadata","value":"HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" HDR MetaData","sig":null,"attributes":[{"value":"/ HDR MetaData","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341412,"byte_end":341428,"line_start":762,"line_end":762,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341429,"byte_end":341432,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrMetadata`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341433,"byte_end":341465,"line_start":764,"line_end":764,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341466,"byte_end":341469,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341470,"byte_end":341486,"line_start":766,"line_end":766,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341487,"byte_end":341490,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ [`HdrMetadata`]: struct.HdrMetadata.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341491,"byte_end":341535,"line_start":768,"line_end":768,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341536,"byte_end":341555,"line_start":769,"line_end":769,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrMetadata` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341556,"byte_end":341605,"line_start":770,"line_end":770,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":350675,"byte_end":350688,"line_start":991,"line_end":991,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::codecs::hdr::decoder::read_raw_file","value":"pub fn read_raw_file<P: AsRef<Path>>(P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":350611,"byte_end":350667,"line_start":990,"line_end":990,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351509,"byte_end":351519,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"HdrEncoder","qualname":"::codecs::hdr::encoder::HdrEncoder","value":"HdrEncoder {  }","parent":null,"children":[{"krate":0,"index":1525}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351473,"byte_end":351497,"line_start":7,"line_end":7,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351743,"byte_end":351753,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"HDREncoder","qualname":"::codecs::hdr::encoder::HDREncoder","value":"HdrEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" HDR Encoder","sig":null,"attributes":[{"value":"/ HDR Encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351545,"byte_end":351560,"line_start":12,"line_end":12,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351561,"byte_end":351564,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ An alias of [`HdrEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351565,"byte_end":351596,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351597,"byte_end":351600,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351601,"byte_end":351617,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351618,"byte_end":351621,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`HdrEncoder`]: struct.HdrEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351622,"byte_end":351664,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351665,"byte_end":351684,"line_start":19,"line_end":19,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `HdrEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351685,"byte_end":351733,"line_start":20,"line_end":20,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351841,"byte_end":351844,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrEncoder<W>>::new","value":"pub fn new(W) -> HdrEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351810,"byte_end":351829,"line_start":24,"line_end":24,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":352007,"byte_end":352013,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"name":"encode","qualname":"<HdrEncoder<W>>::encode","value":"pub fn encode(Self, &[Rgb<f32>], usize, usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351906,"byte_end":351938,"line_start":29,"line_end":29,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351943,"byte_end":351995,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":359443,"byte_end":359451,"line_start":239,"line_end":239,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::codecs::hdr::encoder::to_rgbe8","value":"pub fn to_rgbe8(Rgb<f32>) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```RGBE8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```RGBE8Pixel```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":359386,"byte_end":359435,"line_start":238,"line_end":238,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::codecs::ico","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","parent":null,"children":[{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1662}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7951,"byte_end":7974,"line_start":230,"line_end":230,"column_start":5,"column_end":28}},{"value":"/  Decoding and Encoding of ICO files","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366828,"byte_end":366867,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366868,"byte_end":366871,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366872,"byte_end":366944,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366945,"byte_end":366948,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366949,"byte_end":366969,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":366970,"byte_end":367033,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/mod.rs","byte_start":367034,"byte_end":367094,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1613},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371295,"byte_end":371305,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"IcoDecoder","qualname":"::codecs::ico::decoder::IcoDecoder","value":"IcoDecoder {  }","parent":null,"children":[{"krate":0,"index":1615},{"krate":0,"index":1616}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371265,"byte_end":371283,"line_start":104,"line_end":104,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371803,"byte_end":371806,"line_start":131,"line_end":131,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<IcoDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371730,"byte_end":371791,"line_start":130,"line_end":130,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1645},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375266,"byte_end":375275,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::codecs::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375209,"byte_end":375254,"line_start":247,"line_end":247,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381289,"byte_end":381299,"line_start":18,"line_end":18,"column_start":12,"column_end":22},"name":"IcoEncoder","qualname":"::codecs::ico::encoder::IcoEncoder","value":"IcoEncoder {  }","parent":null,"children":[{"krate":0,"index":1678}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381262,"byte_end":381277,"line_start":17,"line_end":17,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1679},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381523,"byte_end":381533,"line_start":31,"line_end":31,"column_start":10,"column_end":20},"name":"ICOEncoder","qualname":"::codecs::ico::encoder::ICOEncoder","value":"IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" ICO encoder","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381325,"byte_end":381340,"line_start":22,"line_end":22,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381341,"byte_end":381344,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ An alias of [`IcoEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381345,"byte_end":381376,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381377,"byte_end":381380,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381381,"byte_end":381397,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381398,"byte_end":381401,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`IcoEncoder`]: struct.IcoEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381402,"byte_end":381444,"line_start":28,"line_end":28,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381445,"byte_end":381464,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `IcoEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381465,"byte_end":381513,"line_start":30,"line_end":30,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381661,"byte_end":381664,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoEncoder<W>>::new","value":"pub fn new(W) -> IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381590,"byte_end":381649,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381962,"byte_end":381968,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"encode","qualname":"<IcoEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381726,"byte_end":381795,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381800,"byte_end":381874,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381879,"byte_end":381950,"line_start":41,"line_end":41,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1694},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::codecs::jpeg","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1751},{"krate":0,"index":1901},{"krate":0,"index":1904}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7996,"byte_end":8020,"line_start":232,"line_end":232,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384408,"byte_end":384448,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384449,"byte_end":384452,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384453,"byte_end":384548,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384549,"byte_end":384603,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384604,"byte_end":384607,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384608,"byte_end":384627,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384628,"byte_end":384704,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/mod.rs","byte_start":384705,"byte_end":384708,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1719},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385281,"byte_end":385292,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::codecs::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385253,"byte_end":385269,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385471,"byte_end":385474,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385398,"byte_end":385459,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386591,"byte_end":386596,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"scale","qualname":"<JpegDecoder<R>>::scale","value":"pub fn scale(&mut Self, u16, u16) -> ImageResult<(u16, u16)>","parent":null,"children":[],"decl_id":null,"docs":" Configure the decoder to scale the image during decoding.","sig":null,"attributes":[{"value":"/ Configure the decoder to scale the image during decoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385977,"byte_end":386038,"line_start":37,"line_end":37,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386043,"byte_end":386046,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This efficiently scales the image by the smallest supported","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386051,"byte_end":386114,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ scale factor that produces an image larger than or equal to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386119,"byte_end":386182,"line_start":40,"line_end":40,"column_start":5,"column_end":68}},{"value":"/ the requested size in at least one axis. The currently","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386187,"byte_end":386245,"line_start":41,"line_end":41,"column_start":5,"column_end":63}},{"value":"/ implemented scale factors are 1/8, 1/4, 1/2 and 1.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386250,"byte_end":386304,"line_start":42,"line_end":42,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386309,"byte_end":386312,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ To generate a thumbnail of an exact size, pass the desired","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386317,"byte_end":386379,"line_start":44,"line_end":44,"column_start":5,"column_end":67}},{"value":"/ size and then scale to the final size using a traditional","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386384,"byte_end":386445,"line_start":45,"line_end":45,"column_start":5,"column_end":66}},{"value":"/ resampling algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386450,"byte_end":386475,"line_start":46,"line_end":46,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386480,"byte_end":386483,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The size of the image to be loaded, with the scale factor","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386488,"byte_end":386549,"line_start":48,"line_end":48,"column_start":5,"column_end":66}},{"value":"/ applied, is returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386554,"byte_end":386579,"line_start":49,"line_end":49,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":387001,"byte_end":387011,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::codecs::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":386944,"byte_end":386989,"line_start":65,"line_end":65,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4874},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418585,"byte_end":418601,"line_start":275,"line_end":275,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":4873},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418437,"byte_end":418501,"line_start":273,"line_end":273,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418506,"byte_end":418580,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4876},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418642,"byte_end":418648,"line_start":278,"line_end":278,"column_start":5,"column_end":11},"name":"Inches","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":4873},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418608,"byte_end":418637,"line_start":277,"line_end":277,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4878},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418685,"byte_end":418696,"line_start":281,"line_end":281,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":4873},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418655,"byte_end":418680,"line_start":280,"line_end":280,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":4873},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418414,"byte_end":418430,"line_start":272,"line_end":272,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::codecs::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit {\n\n    /// Represents the absence of a unit, the values indicate only a\n    /// [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n    PixelAspectRatio,\n\n    /// Pixels per inch (2.54 cm)\n    Inches,\n\n    /// Pixels per centimeter\n    Centimeters,\n}","parent":null,"children":[{"krate":0,"index":4874},{"krate":0,"index":4876},{"krate":0,"index":4878}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418293,"byte_end":418359,"line_start":270,"line_end":270,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4891},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419033,"byte_end":419045,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::codecs::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":4892},{"krate":0,"index":4893}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418701,"byte_end":418745,"line_start":284,"line_end":284,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418746,"byte_end":418749,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418750,"byte_end":418801,"line_start":286,"line_end":286,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418802,"byte_end":418805,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418806,"byte_end":418817,"line_start":288,"line_end":288,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418818,"byte_end":418841,"line_start":289,"line_end":289,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418842,"byte_end":418880,"line_start":290,"line_end":290,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418881,"byte_end":418968,"line_start":291,"line_end":291,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":418969,"byte_end":418976,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":4892},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419108,"byte_end":419115,"line_start":296,"line_end":296,"column_start":9,"column_end":16},"name":"density","qualname":"::codecs::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":4891},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419052,"byte_end":419099,"line_start":295,"line_end":295,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":4893},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419187,"byte_end":419191,"line_start":298,"line_end":298,"column_start":9,"column_end":13},"name":"unit","qualname":"::codecs::jpeg::encoder::PixelDensity::unit","value":"codecs::jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":4891},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419133,"byte_end":419178,"line_start":297,"line_end":297,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419397,"byte_end":419400,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419238,"byte_end":419285,"line_start":302,"line_end":302,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419290,"byte_end":419344,"line_start":303,"line_end":303,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419349,"byte_end":419385,"line_start":304,"line_end":304,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1832},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419851,"byte_end":419862,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::codecs::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1843}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419799,"byte_end":419839,"line_start":323,"line_end":323,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420347,"byte_end":420358,"line_start":347,"line_end":347,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::codecs::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420144,"byte_end":420160,"line_start":338,"line_end":338,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420161,"byte_end":420164,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420165,"byte_end":420197,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420198,"byte_end":420201,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420202,"byte_end":420218,"line_start":342,"line_end":342,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420219,"byte_end":420222,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420223,"byte_end":420267,"line_start":344,"line_end":344,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420268,"byte_end":420287,"line_start":345,"line_end":345,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420288,"byte_end":420337,"line_start":346,"line_end":346,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420503,"byte_end":420506,"line_start":351,"line_end":351,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"pub fn new(&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420433,"byte_end":420491,"line_start":350,"line_end":350,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420799,"byte_end":420815,"line_start":358,"line_end":358,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420594,"byte_end":420661,"line_start":355,"line_end":355,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420666,"byte_end":420737,"line_start":356,"line_end":356,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420742,"byte_end":420787,"line_start":357,"line_end":357,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423157,"byte_end":423174,"line_start":430,"line_end":430,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":422925,"byte_end":422989,"line_start":427,"line_end":427,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":422994,"byte_end":423085,"line_start":428,"line_end":428,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423090,"byte_end":423145,"line_start":429,"line_end":429,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423506,"byte_end":423512,"line_start":439,"line_end":439,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423272,"byte_end":423335,"line_start":434,"line_end":434,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423340,"byte_end":423392,"line_start":435,"line_end":435,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423397,"byte_end":423428,"line_start":436,"line_end":436,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423433,"byte_end":423436,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":423441,"byte_end":423494,"line_start":438,"line_end":438,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425713,"byte_end":425725,"line_start":491,"line_end":491,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425185,"byte_end":425213,"line_start":482,"line_end":482,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425218,"byte_end":425221,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425226,"byte_end":425319,"line_start":484,"line_end":484,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425324,"byte_end":425418,"line_start":485,"line_end":485,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425423,"byte_end":425518,"line_start":486,"line_end":486,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425523,"byte_end":425614,"line_start":487,"line_end":487,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425619,"byte_end":425635,"line_start":488,"line_end":488,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425640,"byte_end":425643,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":425648,"byte_end":425701,"line_start":490,"line_end":490,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1922},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::codecs::png","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1933},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":7233},{"krate":0,"index":1937},{"krate":0,"index":7235},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":7239},{"krate":0,"index":1940},{"krate":0,"index":7241},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1974},{"krate":0,"index":1978},{"krate":0,"index":1982},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":2002},{"krate":0,"index":2010},{"krate":0,"index":2016},{"krate":0,"index":2028},{"krate":0,"index":2033},{"krate":0,"index":4906},{"krate":0,"index":4930},{"krate":0,"index":4929},{"krate":0,"index":4927},{"krate":0,"index":4924},{"krate":0,"index":4925},{"krate":0,"index":4920},{"krate":0,"index":4921},{"krate":0,"index":4932},{"krate":0,"index":4956},{"krate":0,"index":4955},{"krate":0,"index":4953},{"krate":0,"index":4950},{"krate":0,"index":4951},{"krate":0,"index":4946},{"krate":0,"index":4947},{"krate":0,"index":2035},{"krate":0,"index":2042},{"krate":0,"index":2050},{"krate":0,"index":2053},{"krate":0,"index":2055}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8043,"byte_end":8066,"line_start":234,"line_end":234,"column_start":5,"column_end":28}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":452957,"byte_end":452996,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":452997,"byte_end":453000,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453001,"byte_end":453091,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453092,"byte_end":453095,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453096,"byte_end":453115,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453116,"byte_end":453173,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453174,"byte_end":453177,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453930,"byte_end":453939,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::codecs::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453740,"byte_end":453754,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453755,"byte_end":453758,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453759,"byte_end":453818,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453819,"byte_end":453880,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":453881,"byte_end":453918,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454214,"byte_end":454223,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::codecs::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454021,"byte_end":454035,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454036,"byte_end":454039,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454040,"byte_end":454070,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454071,"byte_end":454074,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454075,"byte_end":454091,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454092,"byte_end":454095,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454096,"byte_end":454136,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454137,"byte_end":454156,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454157,"byte_end":454204,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1978},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456305,"byte_end":456315,"line_start":115,"line_end":115,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::codecs::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1980},{"krate":0,"index":1981}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456278,"byte_end":456293,"line_start":114,"line_end":114,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456493,"byte_end":456496,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456419,"byte_end":456481,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460249,"byte_end":460253,"line_start":187,"line_end":187,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459602,"byte_end":459659,"line_start":177,"line_end":177,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459664,"byte_end":459667,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459672,"byte_end":459763,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459768,"byte_end":459858,"line_start":180,"line_end":180,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459863,"byte_end":459953,"line_start":181,"line_end":181,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":459958,"byte_end":460012,"line_start":182,"line_end":182,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460017,"byte_end":460020,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460025,"byte_end":460118,"line_start":184,"line_end":184,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460123,"byte_end":460216,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460221,"byte_end":460237,"line_start":186,"line_end":186,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460676,"byte_end":460683,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460322,"byte_end":460369,"line_start":191,"line_end":191,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460374,"byte_end":460377,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460382,"byte_end":460472,"line_start":193,"line_end":193,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460477,"byte_end":460561,"line_start":194,"line_end":194,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460566,"byte_end":460569,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":460574,"byte_end":460664,"line_start":196,"line_end":196,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462652,"byte_end":462663,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::codecs::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462366,"byte_end":462420,"line_start":251,"line_end":251,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462421,"byte_end":462424,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462425,"byte_end":462475,"line_start":253,"line_end":253,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462476,"byte_end":462479,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462480,"byte_end":462536,"line_start":255,"line_end":255,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462537,"byte_end":462579,"line_start":256,"line_end":256,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":462580,"byte_end":462640,"line_start":257,"line_end":257,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2028},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":469856,"byte_end":469866,"line_start":445,"line_end":445,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::codecs::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":469829,"byte_end":469844,"line_start":444,"line_end":444,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":2033},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470148,"byte_end":470158,"line_start":460,"line_end":460,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::codecs::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":469950,"byte_end":469965,"line_start":451,"line_end":451,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":469966,"byte_end":469969,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":469970,"byte_end":470001,"line_start":453,"line_end":453,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470002,"byte_end":470005,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470006,"byte_end":470022,"line_start":455,"line_end":455,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470023,"byte_end":470026,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470027,"byte_end":470069,"line_start":457,"line_end":457,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470070,"byte_end":470089,"line_start":458,"line_end":458,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470090,"byte_end":470138,"line_start":459,"line_end":459,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4907},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470361,"byte_end":470368,"line_start":466,"line_end":466,"column_start":5,"column_end":12},"name":"Default","qualname":"::codecs::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470327,"byte_end":470356,"line_start":465,"line_end":465,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4909},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470408,"byte_end":470412,"line_start":468,"line_end":468,"column_start":5,"column_end":9},"name":"Fast","qualname":"::codecs::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470374,"byte_end":470403,"line_start":467,"line_end":467,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4911},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470449,"byte_end":470453,"line_start":470,"line_end":470,"column_start":5,"column_end":9},"name":"Best","qualname":"::codecs::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470418,"byte_end":470444,"line_start":469,"line_end":469,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4913},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470494,"byte_end":470501,"line_start":472,"line_end":472,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::codecs::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470459,"byte_end":470489,"line_start":471,"line_end":471,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4915},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470547,"byte_end":470550,"line_start":474,"line_end":474,"column_start":5,"column_end":8},"name":"Rle","qualname":"::codecs::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470507,"byte_end":470542,"line_start":473,"line_end":473,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4917},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470576,"byte_end":470591,"line_start":477,"line_end":477,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4906},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4906},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470305,"byte_end":470320,"line_start":464,"line_end":464,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::codecs::png::CompressionType","value":"pub enum CompressionType {\n\n    /// Default compression level\n    Default,\n\n    /// Fast, minimal compression\n    Fast,\n\n    /// High compression level\n    Best,\n\n    /// Huffman coding compression\n    Huffman,\n\n    /// Run-length encoding compression\n    Rle,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4907},{"krate":0,"index":4909},{"krate":0,"index":4911},{"krate":0,"index":4913},{"krate":0,"index":4915},{"krate":0,"index":4917}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470180,"byte_end":470250,"line_start":462,"line_end":462,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4933},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471026,"byte_end":471034,"line_start":488,"line_end":488,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::codecs::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470921,"byte_end":470997,"line_start":486,"line_end":486,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471002,"byte_end":471021,"line_start":487,"line_end":487,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4935},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471101,"byte_end":471104,"line_start":490,"line_end":490,"column_start":5,"column_end":8},"name":"Sub","qualname":"::codecs::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471040,"byte_end":471096,"line_start":489,"line_end":489,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4937},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471154,"byte_end":471156,"line_start":492,"line_end":492,"column_start":5,"column_end":7},"name":"Up","qualname":"::codecs::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471110,"byte_end":471149,"line_start":491,"line_end":491,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4939},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471233,"byte_end":471236,"line_start":494,"line_end":494,"column_start":5,"column_end":8},"name":"Avg","qualname":"::codecs::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471162,"byte_end":471228,"line_start":493,"line_end":493,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4941},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471323,"byte_end":471328,"line_start":496,"line_end":496,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::codecs::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471242,"byte_end":471318,"line_start":495,"line_end":495,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4943},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471354,"byte_end":471369,"line_start":499,"line_end":499,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::codecs::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":4932},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":4932},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470904,"byte_end":470914,"line_start":485,"line_end":485,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::codecs::png::FilterType","value":"pub enum FilterType {\n\n    /// No processing done, best used for low bit depth greyscale or data with a\n    /// low color count\n    NoFilter,\n\n    /// Filters based on previous pixel in the same scanline\n    Sub,\n\n    /// Filters based on the scanline above\n    Up,\n\n    /// Filters based on the average of left and right neighbor pixels\n    Avg,\n\n    /// Algorithm that takes into account the left, upper left, and above pixels\n    Paeth,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":4933},{"krate":0,"index":4935},{"krate":0,"index":4937},{"krate":0,"index":4939},{"krate":0,"index":4941},{"krate":0,"index":4943}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470631,"byte_end":470703,"line_start":480,"line_end":480,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470704,"byte_end":470707,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470708,"byte_end":470804,"line_start":482,"line_end":482,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":470805,"byte_end":470849,"line_start":483,"line_end":483,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2037},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471514,"byte_end":471517,"line_start":504,"line_end":504,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471444,"byte_end":471502,"line_start":503,"line_end":503,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472699,"byte_end":472715,"line_start":526,"line_end":526,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471685,"byte_end":471780,"line_start":512,"line_end":512,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471785,"byte_end":471811,"line_start":513,"line_end":513,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471816,"byte_end":471819,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471824,"byte_end":471919,"line_start":515,"line_end":515,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471924,"byte_end":472017,"line_start":516,"line_end":516,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472022,"byte_end":472114,"line_start":517,"line_end":517,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472119,"byte_end":472210,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472215,"byte_end":472263,"line_start":519,"line_end":519,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472268,"byte_end":472271,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472276,"byte_end":472371,"line_start":521,"line_end":521,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472376,"byte_end":472467,"line_start":522,"line_end":522,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472472,"byte_end":472563,"line_start":523,"line_end":523,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472568,"byte_end":472662,"line_start":524,"line_end":524,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472667,"byte_end":472687,"line_start":525,"line_end":525,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2039},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472995,"byte_end":473001,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":472893,"byte_end":472983,"line_start":534,"line_end":534,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::codecs::pnm","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2096},{"krate":0,"index":2262},{"krate":0,"index":2400}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8088,"byte_end":8111,"line_start":236,"line_end":236,"column_start":5,"column_end":28}},{"value":"/ Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":478980,"byte_end":479041,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479042,"byte_end":479045,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479046,"byte_end":479142,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479143,"byte_end":479239,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ variants for now as alpha color types are unsupported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/mod.rs","byte_start":479240,"byte_end":479298,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2167},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496531,"byte_end":496541,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"PnmDecoder","qualname":"::codecs::pnm::decoder::PnmDecoder","value":"PnmDecoder {  }","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496504,"byte_end":496519,"line_start":219,"line_end":219,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496731,"byte_end":496734,"line_start":228,"line_end":228,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PnmDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496655,"byte_end":496719,"line_start":227,"line_end":227,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":497921,"byte_end":497931,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PnmDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> (R, PnmHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":497846,"byte_end":497909,"line_start":251,"line_end":251,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2202},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507413,"byte_end":507422,"line_start":514,"line_end":514,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::codecs::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507356,"byte_end":507401,"line_start":513,"line_end":513,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":511014,"byte_end":511021,"line_start":611,"line_end":611,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmDecoder<R>>::subtype","value":"pub fn subtype(&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":510922,"byte_end":511002,"line_start":610,"line_end":610,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5091},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533499,"byte_end":533501,"line_start":27,"line_end":27,"column_start":5,"column_end":7},"name":"U8","qualname":"::codecs::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":5089},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5094},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533517,"byte_end":533520,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"U16","qualname":"::codecs::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":5089},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5089},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533477,"byte_end":533488,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::codecs::pnm::encoder::FlatSamples","value":"pub enum FlatSamples<'a> { U8(&'a [u8]), U16(&'a [u16]), }","parent":null,"children":[{"krate":0,"index":5091},{"krate":0,"index":5094}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533601,"byte_end":533611,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PnmEncoder","qualname":"::codecs::pnm::encoder::PnmEncoder","value":"PnmEncoder {  }","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533536,"byte_end":533589,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":2307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533868,"byte_end":533878,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"name":"PNMEncoder","qualname":"::codecs::pnm::encoder::PNMEncoder","value":"PnmEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNM Encoder","sig":null,"attributes":[{"value":"/ PNM Encoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533670,"byte_end":533685,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533686,"byte_end":533689,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmEncoder`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533690,"byte_end":533721,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533722,"byte_end":533725,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533726,"byte_end":533742,"line_start":41,"line_end":41,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533743,"byte_end":533746,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [`PnmEncoder`]: struct.PnmEncoder.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533747,"byte_end":533789,"line_start":43,"line_end":43,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533790,"byte_end":533809,"line_start":44,"line_end":44,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmEncoder` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":533810,"byte_end":533858,"line_start":45,"line_end":45,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535231,"byte_end":535234,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmEncoder<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PNMEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PNMEncoder from the `writer`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":534929,"byte_end":534973,"line_start":93,"line_end":93,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":534978,"byte_end":534981,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":534986,"byte_end":535076,"line_start":95,"line_end":95,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535081,"byte_end":535173,"line_start":96,"line_end":96,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535178,"byte_end":535219,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2344},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535784,"byte_end":535796,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PnmEncoder<W>>::with_subtype","value":"pub fn with_subtype(Self, PNMSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535363,"byte_end":535403,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535408,"byte_end":535411,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535416,"byte_end":535510,"line_start":107,"line_end":107,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535515,"byte_end":535609,"line_start":108,"line_end":108,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535614,"byte_end":535664,"line_start":109,"line_end":109,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535669,"byte_end":535672,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535677,"byte_end":535772,"line_start":111,"line_end":111,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536502,"byte_end":536513,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PnmEncoder<W>>::with_header","value":"pub fn with_header(Self, PnmHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":535963,"byte_end":536002,"line_start":119,"line_end":119,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536007,"byte_end":536010,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536015,"byte_end":536110,"line_start":121,"line_end":121,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536115,"byte_end":536204,"line_start":122,"line_end":122,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536209,"byte_end":536293,"line_start":123,"line_end":123,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536298,"byte_end":536301,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536306,"byte_end":536381,"line_start":125,"line_end":125,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536386,"byte_end":536389,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536394,"byte_end":536490,"line_start":127,"line_end":127,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537084,"byte_end":537103,"line_start":142,"line_end":142,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PnmEncoder<W>>::with_dynamic_header","value":"pub fn with_dynamic_header(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536676,"byte_end":536725,"line_start":135,"line_end":135,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536730,"byte_end":536733,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536738,"byte_end":536831,"line_start":137,"line_end":137,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536836,"byte_end":536928,"line_start":138,"line_end":138,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536933,"byte_end":536971,"line_start":139,"line_end":139,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536976,"byte_end":536979,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":536984,"byte_end":537072,"line_start":141,"line_end":141,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2347},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537479,"byte_end":537485,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"encode","qualname":"<PnmEncoder<W>>::encode","value":"pub fn encode<'s, S>(&mut Self, S, u32, u32, ColorType) -> ImageResult<()>\nwhere S: Into<FlatSamples>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537240,"byte_end":537298,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537303,"byte_end":537306,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537311,"byte_end":537397,"line_start":151,"line_end":151,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":537402,"byte_end":537467,"line_start":152,"line_end":152,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5103},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556532,"byte_end":556538,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::codecs::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":5102},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556473,"byte_end":556527,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5105},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556622,"byte_end":556627,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::codecs::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":5102},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556545,"byte_end":556617,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":5102},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556452,"byte_end":556466,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::codecs::pnm::header::SampleEncoding","value":"pub enum SampleEncoding {\n\n    /// Samples are unsigned binary integers in big endian\n    Binary,\n\n    /// Samples are encoded as decimal ascii strings separated by whitespace\n    Ascii,\n}","parent":null,"children":[{"krate":0,"index":5103},{"krate":0,"index":5105}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556345,"byte_end":556397,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5119},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556942,"byte_end":556948,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::codecs::pnm::header::PNMSubtype::Bitmap","value":"PNMSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":5118},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556910,"byte_end":556937,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5122},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557003,"byte_end":557010,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::codecs::pnm::header::PNMSubtype::Graymap","value":"PNMSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":5118},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556971,"byte_end":556998,"line_start":25,"line_end":25,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5125},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557065,"byte_end":557071,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::codecs::pnm::header::PNMSubtype::Pixmap","value":"PNMSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":5118},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557033,"byte_end":557060,"line_start":28,"line_end":28,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5128},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557118,"byte_end":557130,"line_start":32,"line_end":32,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::codecs::pnm::header::PNMSubtype::ArbitraryMap","value":"PNMSubtype::ArbitraryMap","parent":{"krate":0,"index":5118},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557094,"byte_end":557113,"line_start":31,"line_end":31,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":5118},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556893,"byte_end":556903,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"PNMSubtype","qualname":"::codecs::pnm::header::PNMSubtype","value":"pub enum PNMSubtype {\n\n    /// Magic numbers P1 and P4\n    Bitmap(SampleEncoding),\n\n    /// Magic numbers P2 and P5\n    Graymap(SampleEncoding),\n\n    /// Magic numbers P3 and P6\n    Pixmap(SampleEncoding),\n\n    /// Magic number P7\n    ArbitraryMap,\n}","parent":null,"children":[{"krate":0,"index":5119},{"krate":0,"index":5122},{"krate":0,"index":5125},{"krate":0,"index":5128}],"decl_id":null,"docs":" Denotes the category of the magic number","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556632,"byte_end":556676,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556677,"byte_end":556680,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: The name of this enum will be changed to [`PnmSubtype`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556681,"byte_end":556753,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556754,"byte_end":556757,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ TODO: rename to [`PnmSubtype`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556758,"byte_end":556793,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556794,"byte_end":556797,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`PnmSubtype`]: type.PnmSubtype.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":556798,"byte_end":556838,"line_start":19,"line_end":19,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":2404},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557314,"byte_end":557324,"line_start":43,"line_end":43,"column_start":10,"column_end":20},"name":"PnmSubtype","qualname":"::codecs::pnm::header::PnmSubtype","value":"PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" PNM Subtype","sig":null,"attributes":[{"value":"/ PNM Subtype","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557135,"byte_end":557150,"line_start":35,"line_end":35,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557151,"byte_end":557154,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PNMSubtype`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557155,"byte_end":557186,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557187,"byte_end":557190,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ TODO: remove when [`DXTVariant`] is renamed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557191,"byte_end":557239,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557240,"byte_end":557243,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`PNMSubtype`]: enum.PNMSubtype.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557244,"byte_end":557284,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557285,"byte_end":557304,"line_start":42,"line_end":42,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557727,"byte_end":557736,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"PnmHeader","qualname":"::codecs::pnm::header::PnmHeader","value":"PnmHeader {  }","parent":null,"children":[{"krate":0,"index":2406},{"krate":0,"index":2407}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557340,"byte_end":557386,"line_start":45,"line_end":45,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557387,"byte_end":557390,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557391,"byte_end":557489,"line_start":47,"line_end":47,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557490,"byte_end":557586,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557587,"byte_end":557684,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557685,"byte_end":557715,"line_start":50,"line_end":50,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558014,"byte_end":558023,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"PNMHeader","qualname":"::codecs::pnm::header::PNMHeader","value":"PnmHeader","parent":null,"children":[],"decl_id":null,"docs":" PNM Header","sig":null,"attributes":[{"value":"/ PNM Header","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557821,"byte_end":557835,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557836,"byte_end":557839,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PnmHeader`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557840,"byte_end":557870,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557871,"byte_end":557874,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557875,"byte_end":557891,"line_start":60,"line_end":60,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557892,"byte_end":557895,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ [`PnmHeader`]: struct.PnmHeader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557896,"byte_end":557936,"line_start":62,"line_end":62,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557937,"byte_end":557956,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PnmHeader` instead\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":557957,"byte_end":558004,"line_start":64,"line_end":64,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5142},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558282,"byte_end":558294,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::codecs::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":5143},{"krate":0,"index":5144},{"krate":0,"index":5145}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558184,"byte_end":558240,"line_start":74,"line_end":74,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5143},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558342,"byte_end":558350,"line_start":78,"line_end":78,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::BitmapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":5142},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558301,"byte_end":558333,"line_start":77,"line_end":77,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5144},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558410,"byte_end":558416,"line_start":81,"line_end":81,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":5142},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558373,"byte_end":558401,"line_start":80,"line_end":80,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5145},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558464,"byte_end":558469,"line_start":84,"line_end":84,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":5142},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558428,"byte_end":558455,"line_start":83,"line_end":83,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558578,"byte_end":558591,"line_start":89,"line_end":89,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::codecs::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":5152},{"krate":0,"index":5153},{"krate":0,"index":5154},{"krate":0,"index":5155}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558479,"byte_end":558536,"line_start":87,"line_end":87,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":5152},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558639,"byte_end":558647,"line_start":91,"line_end":91,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::GraymapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":5151},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558598,"byte_end":558630,"line_start":90,"line_end":90,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5153},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558707,"byte_end":558713,"line_start":94,"line_end":94,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":5151},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558670,"byte_end":558698,"line_start":93,"line_end":93,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5154},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558761,"byte_end":558766,"line_start":97,"line_end":97,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":5151},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558725,"byte_end":558752,"line_start":96,"line_end":96,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5155},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558828,"byte_end":558836,"line_start":100,"line_end":100,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::codecs::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":5151},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558778,"byte_end":558819,"line_start":99,"line_end":99,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5161},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558946,"byte_end":558958,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::codecs::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":5162},{"krate":0,"index":5163},{"krate":0,"index":5164},{"krate":0,"index":5165}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558846,"byte_end":558904,"line_start":103,"line_end":103,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":5162},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559006,"byte_end":559014,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::PixmapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":5161},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":558965,"byte_end":558997,"line_start":106,"line_end":106,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5163},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559074,"byte_end":559080,"line_start":110,"line_end":110,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":5161},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559037,"byte_end":559065,"line_start":109,"line_end":109,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5164},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559128,"byte_end":559133,"line_start":113,"line_end":113,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":5161},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559092,"byte_end":559119,"line_start":112,"line_end":112,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5165},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559195,"byte_end":559201,"line_start":116,"line_end":116,"column_start":9,"column_end":15},"name":"maxval","qualname":"::codecs::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":5161},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559145,"byte_end":559186,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559309,"byte_end":559324,"line_start":121,"line_end":121,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::codecs::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":5172},{"krate":0,"index":5173},{"krate":0,"index":5174},{"krate":0,"index":5175},{"krate":0,"index":5176}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559211,"byte_end":559273,"line_start":119,"line_end":119,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":5172},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559368,"byte_end":559374,"line_start":123,"line_end":123,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":5171},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559331,"byte_end":559359,"line_start":122,"line_end":122,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5173},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559422,"byte_end":559427,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":5171},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559386,"byte_end":559413,"line_start":125,"line_end":125,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":5174},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559476,"byte_end":559481,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"depth","qualname":"::codecs::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":5171},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559439,"byte_end":559467,"line_start":128,"line_end":128,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":5175},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559543,"byte_end":559549,"line_start":132,"line_end":132,"column_start":9,"column_end":15},"name":"maxval","qualname":"::codecs::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":5171},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559493,"byte_end":559534,"line_start":131,"line_end":131,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":5176},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559610,"byte_end":559618,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::codecs::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<codecs::pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":5171},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559561,"byte_end":559601,"line_start":134,"line_end":134,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5182},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559821,"byte_end":559834,"line_start":142,"line_end":142,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::codecs::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559772,"byte_end":559816,"line_start":141,"line_end":141,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5184},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559917,"byte_end":559935,"line_start":145,"line_end":145,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559841,"byte_end":559912,"line_start":144,"line_end":144,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5186},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559987,"byte_end":559996,"line_start":148,"line_end":148,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::codecs::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559942,"byte_end":559982,"line_start":147,"line_end":147,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5188},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560054,"byte_end":560068,"line_start":151,"line_end":151,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560003,"byte_end":560049,"line_start":150,"line_end":150,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5190},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560116,"byte_end":560119,"line_start":154,"line_end":154,"column_start":5,"column_end":8},"name":"RGB","qualname":"::codecs::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560075,"byte_end":560111,"line_start":153,"line_end":153,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5192},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560173,"byte_end":560181,"line_start":157,"line_end":157,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560126,"byte_end":560168,"line_start":156,"line_end":156,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5194},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560238,"byte_end":560244,"line_start":160,"line_end":160,"column_start":5,"column_end":11},"name":"Custom","qualname":"::codecs::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":5181},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560188,"byte_end":560233,"line_start":159,"line_end":159,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559748,"byte_end":559765,"line_start":140,"line_end":140,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::codecs::pnm::header::ArbitraryTuplType","value":"pub enum ArbitraryTuplType {\n\n    /// Pixels are either black (0) or white (1)\n    BlackAndWhite,\n\n    /// Pixels are either black (0) or white (1) and a second alpha channel\n    BlackAndWhiteAlpha,\n\n    /// Pixels represent the amount of white\n    Grayscale,\n\n    /// Grayscale with an additional alpha channel\n    GrayscaleAlpha,\n\n    /// Three channels: Red, Green, Blue\n    RGB,\n\n    /// Four channels: Red, Green, Blue, Alpha\n    RGBAlpha,\n\n    /// An image format which is not standardized\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":5182},{"krate":0,"index":5184},{"krate":0,"index":5186},{"krate":0,"index":5188},{"krate":0,"index":5190},{"krate":0,"index":5192},{"krate":0,"index":5194}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":559650,"byte_end":559714,"line_start":138,"line_end":138,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560894,"byte_end":560908,"line_start":179,"line_end":179,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PNMSubtype>::magic_constant","value":"pub fn magic_constant(Self) -> &'static [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560808,"byte_end":560882,"line_start":178,"line_end":178,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561487,"byte_end":561502,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PNMSubtype>::sample_encoding","value":"pub fn sample_encoding(Self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561415,"byte_end":561475,"line_start":191,"line_end":191,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561865,"byte_end":561872,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmHeader>::subtype","value":"pub fn subtype(&Self) -> PNMSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561787,"byte_end":561853,"line_start":203,"line_end":203,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":562387,"byte_end":562392,"line_start":214,"line_end":214,"column_start":12,"column_end":17},"name":"width","qualname":"<PnmHeader>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":562329,"byte_end":562375,"line_start":213,"line_end":213,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":562810,"byte_end":562816,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"height","qualname":"<PnmHeader>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":562751,"byte_end":562798,"line_start":223,"line_end":223,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563274,"byte_end":563288,"line_start":234,"line_end":234,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PnmHeader>::maximal_sample","value":"pub fn maximal_sample(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563183,"byte_end":563262,"line_start":233,"line_end":233,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2433},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563706,"byte_end":563715,"line_start":244,"line_end":244,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PnmHeader>::as_bitmap","value":"pub fn as_bitmap(&Self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563646,"byte_end":563694,"line_start":243,"line_end":243,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563946,"byte_end":563956,"line_start":252,"line_end":252,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PnmHeader>::as_graymap","value":"pub fn as_graymap(&Self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":563885,"byte_end":563934,"line_start":251,"line_end":251,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2435},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564190,"byte_end":564199,"line_start":260,"line_end":260,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PnmHeader>::as_pixmap","value":"pub fn as_pixmap(&Self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564130,"byte_end":564178,"line_start":259,"line_end":259,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2436},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564432,"byte_end":564444,"line_start":268,"line_end":268,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PnmHeader>::as_arbitrary","value":"pub fn as_arbitrary(&Self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564369,"byte_end":564420,"line_start":267,"line_end":267,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2437},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564684,"byte_end":564689,"line_start":276,"line_end":276,"column_start":12,"column_end":17},"name":"write","qualname":"<PnmHeader>::write","value":"pub fn write(&Self, &mut io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":564626,"byte_end":564672,"line_start":275,"line_end":275,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":2453},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::codecs::tga","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456},{"krate":0,"index":2536},{"krate":0,"index":2567}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8133,"byte_end":8156,"line_start":238,"line_end":238,"column_start":5,"column_end":28}},{"value":"/ Decoding of TGA Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":567855,"byte_end":567881,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":567882,"byte_end":567885,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":567886,"byte_end":567905,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/ <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/mod.rs","byte_start":567906,"byte_end":567958,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2489},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569482,"byte_end":569492,"line_start":47,"line_end":47,"column_start":12,"column_end":22},"name":"TgaDecoder","qualname":"::codecs::tga::decoder::TgaDecoder","value":"TgaDecoder {  }","parent":null,"children":[{"krate":0,"index":2491},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569431,"byte_end":569470,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569918,"byte_end":569921,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<TgaDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569849,"byte_end":569906,"line_start":67,"line_end":67,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":582404,"byte_end":582413,"line_start":420,"line_end":420,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::codecs::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":2530},{"krate":0,"index":2531}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2555},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583752,"byte_end":583762,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"TgaEncoder","qualname":"::codecs::tga::encoder::TgaEncoder","value":"TgaEncoder {  }","parent":null,"children":[{"krate":0,"index":2557}],"decl_id":null,"docs":" TGA encoder.\n","sig":null,"attributes":[{"value":"/ TGA encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583724,"byte_end":583740,"line_start":34,"line_end":34,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2560},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583899,"byte_end":583902,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaEncoder<W>>::new","value":"pub fn new(W) -> TgaEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583828,"byte_end":583887,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":584232,"byte_end":584238,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"encode","qualname":"<TgaEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```buf``` that has dimensions ```width```\n and ```height``` and ```ColorType``` ```color_type```.","sig":null,"attributes":[{"value":"/ Encodes the image ```buf``` that has dimensions ```width```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583972,"byte_end":584035,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/ and ```height``` and ```ColorType``` ```color_type```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":584040,"byte_end":584098,"line_start":46,"line_end":46,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":584103,"byte_end":584106,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The dimensions of the image must be between 0 and 65535 (inclusive) or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":584111,"byte_end":584185,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ an error will be returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":584190,"byte_end":584220,"line_start":49,"line_end":49,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":2618},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::codecs::tiff","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","parent":null,"children":[{"krate":0,"index":2619},{"krate":0,"index":2620},{"krate":0,"index":2621},{"krate":0,"index":2622},{"krate":0,"index":2623},{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":7549},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2653},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2661},{"krate":0,"index":2666},{"krate":0,"index":2670},{"krate":0,"index":2678},{"krate":0,"index":2681},{"krate":0,"index":2683},{"krate":0,"index":2687}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8178,"byte_end":8202,"line_start":240,"line_end":240,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of TIFF Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595536,"byte_end":595576,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595577,"byte_end":595580,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595581,"byte_end":595658,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ lossless and lossy compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595659,"byte_end":595694,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595695,"byte_end":595698,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595699,"byte_end":595718,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":595719,"byte_end":595810,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596312,"byte_end":596323,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"TiffDecoder","qualname":"::codecs::tiff::TiffDecoder","value":"TiffDecoder {  }","parent":null,"children":[{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2652}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596272,"byte_end":596300,"line_start":24,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596545,"byte_end":596548,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffDecoder<R>>::new","value":"pub fn new(R) -> Result<TiffDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TiffDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TiffDecoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596504,"byte_end":596533,"line_start":36,"line_end":36,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2661},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":600971,"byte_end":600981,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::codecs::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":600914,"byte_end":600959,"line_start":146,"line_end":146,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":603549,"byte_end":603560,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::codecs::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":2680}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[{"value":"/ Encoder for tiff images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":603510,"byte_end":603537,"line_start":220,"line_end":220,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604286,"byte_end":604289,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"pub fn new(W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604220,"byte_end":604274,"line_start":240,"line_end":240,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2686},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604521,"byte_end":604527,"line_start":248,"line_end":248,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604353,"byte_end":604444,"line_start":245,"line_end":245,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604449,"byte_end":604452,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ 16-bit types assume the buffer is native endian.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604457,"byte_end":604509,"line_start":247,"line_end":247,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":2690},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::codecs::webp","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/mod.rs","parent":null,"children":[{"krate":0,"index":2691},{"krate":0,"index":2692},{"krate":0,"index":2763},{"krate":0,"index":2769}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8225,"byte_end":8249,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ Decoding of WebP Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/mod.rs","byte_start":606116,"byte_end":606143,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2730},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608032,"byte_end":608043,"line_start":53,"line_end":53,"column_start":12,"column_end":23},"name":"WebPDecoder","qualname":"::codecs::webp::decoder::WebPDecoder","value":"WebPDecoder {  }","parent":null,"children":[{"krate":0,"index":2732},{"krate":0,"index":2733},{"krate":0,"index":2734}],"decl_id":null,"docs":" WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded\n images will be grayscale).\n","sig":null,"attributes":[{"value":"/ WebP Image format decoder. Currently only supportes the luma channel (meaning that decoded","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607895,"byte_end":607989,"line_start":51,"line_end":51,"column_start":1,"column_end":95}},{"value":"/ images will be grayscale).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607990,"byte_end":608020,"line_start":52,"line_end":52,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608255,"byte_end":608258,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"new","qualname":"<WebPDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<WebPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebPDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebPDecoder from the Reader ```r```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608137,"byte_end":608190,"line_start":60,"line_end":60,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608195,"byte_end":608243,"line_start":61,"line_end":61,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2746},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":610935,"byte_end":610945,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::codecs::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":610878,"byte_end":610923,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2769},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::codecs::webp::vp8","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2773},{"krate":0,"index":7633},{"krate":0,"index":2774},{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2785},{"krate":0,"index":2786},{"krate":0,"index":2787},{"krate":0,"index":2788},{"krate":0,"index":2789},{"krate":0,"index":2790},{"krate":0,"index":2791},{"krate":0,"index":2792},{"krate":0,"index":2793},{"krate":0,"index":2794},{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2804},{"krate":0,"index":5264},{"krate":0,"index":5289},{"krate":0,"index":5288},{"krate":0,"index":5286},{"krate":0,"index":5283},{"krate":0,"index":5284},{"krate":0,"index":5280},{"krate":0,"index":5281},{"krate":0,"index":5291},{"krate":0,"index":5313},{"krate":0,"index":5312},{"krate":0,"index":5310},{"krate":0,"index":5307},{"krate":0,"index":5308},{"krate":0,"index":5304},{"krate":0,"index":5305},{"krate":0,"index":5315},{"krate":0,"index":5355},{"krate":0,"index":5354},{"krate":0,"index":5352},{"krate":0,"index":5349},{"krate":0,"index":5350},{"krate":0,"index":5346},{"krate":0,"index":5347},{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2808},{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2818},{"krate":0,"index":2820},{"krate":0,"index":2822},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2837},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2848},{"krate":0,"index":5357},{"krate":0,"index":5359},{"krate":0,"index":2850},{"krate":0,"index":5361},{"krate":0,"index":5384},{"krate":0,"index":5381},{"krate":0,"index":5380},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2857},{"krate":0,"index":2863},{"krate":0,"index":5386},{"krate":0,"index":5399},{"krate":0,"index":5395},{"krate":0,"index":5394},{"krate":0,"index":5401},{"krate":0,"index":5416},{"krate":0,"index":5414},{"krate":0,"index":5412},{"krate":0,"index":5418},{"krate":0,"index":5431},{"krate":0,"index":5430},{"krate":0,"index":5428},{"krate":0,"index":2871},{"krate":0,"index":2894},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2923},{"krate":0,"index":2925},{"krate":0,"index":2927},{"krate":0,"index":2929},{"krate":0,"index":2931},{"krate":0,"index":2933},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2947},{"krate":0,"index":2948},{"krate":0,"index":2949},{"krate":0,"index":2950},{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2953},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2956},{"krate":0,"index":2957},{"krate":0,"index":2958}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"/ An implementation of the VP8 Video Codec","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614540,"byte_end":614584,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614585,"byte_end":614588,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains a partial implementation of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614589,"byte_end":614645,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ VP8 video format as defined in RFC-6386.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614646,"byte_end":614690,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614691,"byte_end":614694,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614695,"byte_end":614745,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/ VP8 is the underpinning of the WebP image format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614746,"byte_end":614798,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614799,"byte_end":614802,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614803,"byte_end":614822,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/ * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614823,"byte_end":614916,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":614917,"byte_end":615039,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"/ of the VP8 format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":615040,"byte_end":615061,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":615062,"byte_end":615065,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5401},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645265,"byte_end":645270,"line_start":839,"line_end":839,"column_start":12,"column_end":17},"name":"Frame","qualname":"::codecs::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":5402},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5405},{"krate":0,"index":5406},{"krate":0,"index":5407},{"krate":0,"index":5408},{"krate":0,"index":5409},{"krate":0,"index":5410},{"krate":0,"index":5411}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645168,"byte_end":645220,"line_start":837,"line_end":837,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5402},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645317,"byte_end":645322,"line_start":841,"line_end":841,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645277,"byte_end":645308,"line_start":840,"line_end":840,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5403},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645375,"byte_end":645381,"line_start":844,"line_end":844,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645334,"byte_end":645366,"line_start":843,"line_end":843,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5404},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645433,"byte_end":645437,"line_start":847,"line_end":847,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::codecs::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645393,"byte_end":645424,"line_start":846,"line_end":846,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":5405},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645508,"byte_end":645516,"line_start":850,"line_end":850,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::codecs::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645453,"byte_end":645499,"line_start":849,"line_end":849,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5407},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645612,"byte_end":645623,"line_start":855,"line_end":855,"column_start":9,"column_end":20},"name":"for_display","qualname":"::codecs::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645547,"byte_end":645603,"line_start":854,"line_end":854,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5408},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645754,"byte_end":645764,"line_start":860,"line_end":860,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::codecs::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":5401},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645655,"byte_end":645712,"line_start":858,"line_end":858,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":645717,"byte_end":645745,"line_start":859,"line_end":859,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646140,"byte_end":646150,"line_start":888,"line_end":888,"column_start":12,"column_end":22},"name":"Vp8Decoder","qualname":"::codecs::webp::vp8::Vp8Decoder","value":"Vp8Decoder {  }","parent":null,"children":[{"krate":0,"index":2873},{"krate":0,"index":2874},{"krate":0,"index":2875},{"krate":0,"index":2876},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2882},{"krate":0,"index":2884},{"krate":0,"index":2885},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2893}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646082,"byte_end":646097,"line_start":885,"line_end":885,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646098,"byte_end":646101,"line_start":886,"line_end":886,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646102,"byte_end":646128,"line_start":887,"line_end":887,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2896},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646814,"byte_end":646817,"line_start":923,"line_end":923,"column_start":12,"column_end":15},"name":"new","qualname":"<Vp8Decoder<R>>::new","value":"pub fn new(R) -> Vp8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646710,"byte_end":646735,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646740,"byte_end":646802,"line_start":922,"line_end":922,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2916},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":666951,"byte_end":666963,"line_start":1543,"line_end":1543,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<Vp8Decoder<R>>::decode_frame","value":"pub fn decode_frame(&mut Self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":666880,"byte_end":666939,"line_start":1542,"line_end":1542,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":2959},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8509,"byte_end":8512,"line_start":254,"line_end":254,"column_start":9,"column_end":12},"name":"bmp","qualname":"::bmp","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2960},{"krate":0,"index":2961},{"krate":0,"index":2962},{"krate":0,"index":2963}],"decl_id":null,"docs":" Decoding and Encoding of BMP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8435,"byte_end":8458,"line_start":252,"line_end":252,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::bmp instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8459,"byte_end":8500,"line_start":253,"line_end":253,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of BMP Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8519,"byte_end":8558,"line_start":255,"line_end":255,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":2964},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8730,"byte_end":8733,"line_start":261,"line_end":261,"column_start":9,"column_end":12},"name":"dds","qualname":"::dds","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2965}],"decl_id":null,"docs":" Decoding of DDS images\n","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8656,"byte_end":8679,"line_start":259,"line_end":259,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::dds instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8680,"byte_end":8721,"line_start":260,"line_end":260,"column_start":1,"column_end":42}},{"value":"/ Decoding of DDS images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8740,"byte_end":8766,"line_start":262,"line_end":262,"column_start":5,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":2966},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8884,"byte_end":8887,"line_start":267,"line_end":267,"column_start":9,"column_end":12},"name":"dxt","qualname":"::dxt","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2967},{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2971},{"krate":0,"index":2972},{"krate":0,"index":2973},{"krate":0,"index":2974}],"decl_id":null,"docs":" Decoding of DXT (S3TC) compression\n","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8813,"byte_end":8836,"line_start":265,"line_end":265,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs:: instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8837,"byte_end":8875,"line_start":266,"line_end":266,"column_start":1,"column_end":39}},{"value":"/ Decoding of DXT (S3TC) compression","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8894,"byte_end":8932,"line_start":268,"line_end":268,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":2975},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9175,"byte_end":9183,"line_start":276,"line_end":276,"column_start":9,"column_end":17},"name":"farbfeld","qualname":"::farbfeld","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2978},{"krate":0,"index":2979}],"decl_id":null,"docs":" Decoding of farbfeld images\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9091,"byte_end":9119,"line_start":274,"line_end":274,"column_start":1,"column_end":29}},{"value":"deprecated = \"Use codecs::farbfeld instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9120,"byte_end":9166,"line_start":275,"line_end":275,"column_start":1,"column_end":47}},{"value":"/ Decoding of farbfeld images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9190,"byte_end":9221,"line_start":277,"line_end":277,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":2980},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9387,"byte_end":9390,"line_start":282,"line_end":282,"column_start":9,"column_end":12},"name":"gif","qualname":"::gif","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2981},{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985}],"decl_id":null,"docs":" Decoding of GIF Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9313,"byte_end":9336,"line_start":280,"line_end":280,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::gif instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9337,"byte_end":9378,"line_start":281,"line_end":281,"column_start":1,"column_end":42}},{"value":"/ Decoding of GIF Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9397,"byte_end":9423,"line_start":283,"line_end":283,"column_start":5,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":2986},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9603,"byte_end":9606,"line_start":289,"line_end":289,"column_start":9,"column_end":12},"name":"hdr","qualname":"::hdr","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":2987},{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2999},{"krate":0,"index":3000},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3003}],"decl_id":null,"docs":" Decoding of Radiance HDR Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9529,"byte_end":9552,"line_start":287,"line_end":287,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::hdr instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9553,"byte_end":9594,"line_start":288,"line_end":288,"column_start":1,"column_end":42}},{"value":"/ Decoding of Radiance HDR Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9613,"byte_end":9648,"line_start":290,"line_end":290,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":3004},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10029,"byte_end":10032,"line_start":300,"line_end":300,"column_start":9,"column_end":12},"name":"ico","qualname":"::ico","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3005},{"krate":0,"index":3006},{"krate":0,"index":3007},{"krate":0,"index":3008}],"decl_id":null,"docs":" Decoding and Encoding of ICO files\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9955,"byte_end":9978,"line_start":298,"line_end":298,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::ico instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":9979,"byte_end":10020,"line_start":299,"line_end":299,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of ICO files","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10039,"byte_end":10077,"line_start":301,"line_end":301,"column_start":5,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":3009},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10251,"byte_end":10255,"line_start":307,"line_end":307,"column_start":9,"column_end":13},"name":"jpeg","qualname":"::jpeg","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013},{"krate":0,"index":3014},{"krate":0,"index":3015}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10175,"byte_end":10199,"line_start":305,"line_end":305,"column_start":1,"column_end":25}},{"value":"deprecated = \"Use codecs::jpeg instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10200,"byte_end":10242,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10262,"byte_end":10302,"line_start":308,"line_end":308,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3016},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10525,"byte_end":10528,"line_start":316,"line_end":316,"column_start":9,"column_end":12},"name":"png","qualname":"::png","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019},{"krate":0,"index":3020},{"krate":0,"index":3021},{"krate":0,"index":3022},{"krate":0,"index":3023}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10451,"byte_end":10474,"line_start":314,"line_end":314,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::png instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10475,"byte_end":10516,"line_start":315,"line_end":315,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10535,"byte_end":10574,"line_start":317,"line_end":317,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":3024},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10796,"byte_end":10799,"line_start":325,"line_end":325,"column_start":9,"column_end":12},"name":"pnm","qualname":"::pnm","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3025},{"krate":0,"index":3026},{"krate":0,"index":3027},{"krate":0,"index":3028},{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3032},{"krate":0,"index":3033},{"krate":0,"index":3034},{"krate":0,"index":3035},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3038}],"decl_id":null,"docs":" Decoding and Encoding of netpbm image formats (pbm, pgm, ppm and pam)\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10722,"byte_end":10745,"line_start":323,"line_end":323,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::pnm instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10746,"byte_end":10787,"line_start":324,"line_end":324,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of netpbm image formats (pbm, pgm, ppm and pam)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":10806,"byte_end":10879,"line_start":326,"line_end":326,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":3039},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11215,"byte_end":11218,"line_start":335,"line_end":335,"column_start":9,"column_end":12},"name":"tga","qualname":"::tga","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3040},{"krate":0,"index":3041},{"krate":0,"index":3042}],"decl_id":null,"docs":" Decoding and Encoding of TGA Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11141,"byte_end":11164,"line_start":333,"line_end":333,"column_start":1,"column_end":24}},{"value":"deprecated = \"Use codecs::tga instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11165,"byte_end":11206,"line_start":334,"line_end":334,"column_start":1,"column_end":42}},{"value":"/ Decoding and Encoding of TGA Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11225,"byte_end":11264,"line_start":336,"line_end":336,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":3043},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11426,"byte_end":11430,"line_start":342,"line_end":342,"column_start":9,"column_end":13},"name":"tiff","qualname":"::tiff","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3046},{"krate":0,"index":3047}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11350,"byte_end":11374,"line_start":340,"line_end":340,"column_start":1,"column_end":25}},{"value":"deprecated = \"Use codecs::tiff instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11375,"byte_end":11417,"line_start":341,"line_end":341,"column_start":1,"column_end":43}},{"value":"/ Decoding and Encoding of TIFF Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11437,"byte_end":11477,"line_start":343,"line_end":343,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3048},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11654,"byte_end":11658,"line_start":349,"line_end":349,"column_start":9,"column_end":13},"name":"webp","qualname":"::webp","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","parent":null,"children":[{"krate":0,"index":3049},{"krate":0,"index":3050},{"krate":0,"index":3051}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11578,"byte_end":11602,"line_start":347,"line_end":347,"column_start":1,"column_end":25}},{"value":"deprecated = \"Use codecs::webp instead\"","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11603,"byte_end":11645,"line_start":348,"line_end":348,"column_start":1,"column_end":43}},{"value":"/ Decoding of WebP Images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":11665,"byte_end":11692,"line_start":350,"line_end":350,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3058},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":691956,"byte_end":691962,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":3060}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":691871,"byte_end":691944,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3063},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692142,"byte_end":692145,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692062,"byte_end":692130,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3064},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692537,"byte_end":692551,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692256,"byte_end":692350,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692355,"byte_end":692367,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692372,"byte_end":692434,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692439,"byte_end":692442,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692447,"byte_end":692525,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":5433},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692840,"byte_end":692845,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":5434},{"krate":0,"index":5435},{"krate":0,"index":5436},{"krate":0,"index":5437}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692783,"byte_end":692811,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5440},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693127,"byte_end":693132,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":5441}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693004,"byte_end":693058,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3070},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693234,"byte_end":693237,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693178,"byte_end":693222,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693465,"byte_end":693475,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693428,"byte_end":693453,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":3072},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693687,"byte_end":693692,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693652,"byte_end":693675,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":3073},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693781,"byte_end":693787,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693741,"byte_end":693769,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693883,"byte_end":693894,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693843,"byte_end":693871,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3075},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693983,"byte_end":693987,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693947,"byte_end":693971,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694069,"byte_end":694072,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694033,"byte_end":694057,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3078},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694337,"byte_end":694356,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694132,"byte_end":694180,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694185,"byte_end":694188,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694193,"byte_end":694207,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694212,"byte_end":694215,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694220,"byte_end":694227,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694232,"byte_end":694253,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694258,"byte_end":694313,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694318,"byte_end":694325,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3079},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694999,"byte_end":695023,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694476,"byte_end":694558,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694563,"byte_end":694566,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694571,"byte_end":694665,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694670,"byte_end":694748,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694753,"byte_end":694756,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694761,"byte_end":694775,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694780,"byte_end":694783,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694788,"byte_end":694795,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694800,"byte_end":694828,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694833,"byte_end":694854,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694859,"byte_end":694862,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694867,"byte_end":694912,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694917,"byte_end":694975,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694980,"byte_end":694987,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3081},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":696199,"byte_end":696213,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":695973,"byte_end":696036,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":696041,"byte_end":696044,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":696049,"byte_end":696144,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":696149,"byte_end":696187,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":3130},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703493,"byte_end":703499,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3133}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703453,"byte_end":703481,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":3155},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704660,"byte_end":704669,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":3158}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704612,"byte_end":704648,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":3177},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705925,"byte_end":705929,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":3180}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705719,"byte_end":705752,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705753,"byte_end":705756,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705757,"byte_end":705843,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705844,"byte_end":705847,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705848,"byte_end":705913,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":3204},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708479,"byte_end":708486,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":3207}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708253,"byte_end":708294,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708295,"byte_end":708298,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708299,"byte_end":708389,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708390,"byte_end":708393,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708394,"byte_end":708467,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3228},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710802,"byte_end":710817,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":3231},{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710753,"byte_end":710790,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3251},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712124,"byte_end":712137,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":3254},{"krate":0,"index":3255},{"krate":0,"index":3256}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712077,"byte_end":712112,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3273},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713512,"byte_end":713530,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278},{"krate":0,"index":3279}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713463,"byte_end":713500,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3293},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714674,"byte_end":714690,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":3296},{"krate":0,"index":3297},{"krate":0,"index":3298}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714627,"byte_end":714662,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5460},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718240,"byte_end":718251,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":5463},{"krate":0,"index":5464},{"krate":0,"index":5465},{"krate":0,"index":5466}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715862,"byte_end":715886,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715887,"byte_end":715890,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715891,"byte_end":715985,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715986,"byte_end":716075,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716076,"byte_end":716171,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716172,"byte_end":716267,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716268,"byte_end":716306,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716307,"byte_end":716310,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716311,"byte_end":716410,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716411,"byte_end":716446,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716447,"byte_end":716450,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716451,"byte_end":716496,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716497,"byte_end":716550,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716551,"byte_end":716587,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716588,"byte_end":716626,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716627,"byte_end":716630,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716631,"byte_end":716707,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716708,"byte_end":716711,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716712,"byte_end":716799,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716800,"byte_end":716898,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716899,"byte_end":716974,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716975,"byte_end":716978,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":716979,"byte_end":717023,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717024,"byte_end":717072,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717073,"byte_end":717129,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717130,"byte_end":717133,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717134,"byte_end":717149,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717150,"byte_end":717153,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717154,"byte_end":717205,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717206,"byte_end":717209,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717210,"byte_end":717217,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717218,"byte_end":717249,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717250,"byte_end":717253,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717254,"byte_end":717294,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717295,"byte_end":717298,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717299,"byte_end":717321,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717322,"byte_end":717346,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717347,"byte_end":717397,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717398,"byte_end":717448,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717449,"byte_end":717458,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717459,"byte_end":717464,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717465,"byte_end":717472,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717473,"byte_end":717476,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717477,"byte_end":717536,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717537,"byte_end":717540,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717541,"byte_end":717554,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717555,"byte_end":717622,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717623,"byte_end":717626,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717627,"byte_end":717689,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717690,"byte_end":717747,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717748,"byte_end":717777,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717778,"byte_end":717811,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717812,"byte_end":717828,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717829,"byte_end":717868,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717869,"byte_end":717878,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717879,"byte_end":717886,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717887,"byte_end":717890,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717891,"byte_end":717949,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717950,"byte_end":717957,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717958,"byte_end":717961,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":717962,"byte_end":718002,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718003,"byte_end":718006,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718007,"byte_end":718020,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718021,"byte_end":718057,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718058,"byte_end":718061,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718062,"byte_end":718123,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718124,"byte_end":718182,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718183,"byte_end":718190,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":3315},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719009,"byte_end":719017,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718724,"byte_end":718771,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718776,"byte_end":718812,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718817,"byte_end":718820,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718825,"byte_end":718915,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718920,"byte_end":718997,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719423,"byte_end":719431,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719374,"byte_end":719411,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719531,"byte_end":719537,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719482,"byte_end":719519,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719642,"byte_end":719652,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719591,"byte_end":719630,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3319},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719761,"byte_end":719766,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719721,"byte_end":719749,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719854,"byte_end":719860,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":719813,"byte_end":719842,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720245,"byte_end":720251,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720112,"byte_end":720166,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720171,"byte_end":720233,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3323},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720751,"byte_end":720755,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720404,"byte_end":720456,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720461,"byte_end":720464,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720469,"byte_end":720560,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720565,"byte_end":720658,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720663,"byte_end":720739,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3324},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721070,"byte_end":721086,"line_start":696,"line_end":696,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720849,"byte_end":720893,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720898,"byte_end":720951,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720956,"byte_end":720991,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":720996,"byte_end":721058,"line_start":695,"line_end":695,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3325},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721418,"byte_end":721432,"line_start":708,"line_end":708,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721267,"byte_end":721309,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721314,"byte_end":721366,"line_start":706,"line_end":706,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721371,"byte_end":721406,"line_start":707,"line_end":707,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3326},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721753,"byte_end":721762,"line_start":721,"line_end":721,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721587,"byte_end":721641,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721646,"byte_end":721649,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721654,"byte_end":721666,"line_start":718,"line_end":718,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721671,"byte_end":721674,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":721679,"byte_end":721741,"line_start":720,"line_end":720,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723488,"byte_end":723501,"line_start":762,"line_end":762,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723408,"byte_end":723476,"line_start":761,"line_end":761,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3335},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724115,"byte_end":724132,"line_start":773,"line_end":773,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723704,"byte_end":723778,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723783,"byte_end":723786,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723791,"byte_end":723879,"line_start":769,"line_end":769,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723884,"byte_end":723977,"line_start":770,"line_end":770,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":723982,"byte_end":724076,"line_start":771,"line_end":771,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724081,"byte_end":724103,"line_start":772,"line_end":772,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724615,"byte_end":724630,"line_start":788,"line_end":788,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724473,"byte_end":724516,"line_start":785,"line_end":785,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724521,"byte_end":724524,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724529,"byte_end":724603,"line_start":787,"line_end":787,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3337},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":725063,"byte_end":725082,"line_start":802,"line_end":802,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724913,"byte_end":724964,"line_start":799,"line_end":799,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724969,"byte_end":724972,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":724977,"byte_end":725051,"line_start":801,"line_end":801,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":725829,"byte_end":725839,"line_start":827,"line_end":827,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":725755,"byte_end":725817,"line_start":826,"line_end":826,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3343},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726365,"byte_end":726373,"line_start":838,"line_end":838,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726010,"byte_end":726070,"line_start":833,"line_end":833,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726075,"byte_end":726078,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726083,"byte_end":726174,"line_start":835,"line_end":835,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726179,"byte_end":726272,"line_start":836,"line_end":836,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726277,"byte_end":726353,"line_start":837,"line_end":837,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726643,"byte_end":726663,"line_start":845,"line_end":845,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726481,"byte_end":726525,"line_start":842,"line_end":842,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726530,"byte_end":726583,"line_start":843,"line_end":843,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726588,"byte_end":726631,"line_start":844,"line_end":844,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3345},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727037,"byte_end":727055,"line_start":858,"line_end":858,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726878,"byte_end":726920,"line_start":855,"line_end":855,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726925,"byte_end":726977,"line_start":856,"line_end":856,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":726982,"byte_end":727025,"line_start":857,"line_end":857,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727418,"byte_end":727431,"line_start":872,"line_end":872,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727244,"byte_end":727306,"line_start":867,"line_end":867,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727311,"byte_end":727314,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727319,"byte_end":727331,"line_start":869,"line_end":869,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727336,"byte_end":727339,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727344,"byte_end":727406,"line_start":871,"line_end":871,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3347},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727880,"byte_end":727889,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727731,"byte_end":727768,"line_start":879,"line_end":879,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727773,"byte_end":727776,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727781,"byte_end":727793,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727798,"byte_end":727801,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727806,"byte_end":727868,"line_start":883,"line_end":883,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3351},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728334,"byte_end":728338,"line_start":899,"line_end":899,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728143,"byte_end":728196,"line_start":895,"line_end":895,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728201,"byte_end":728204,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728209,"byte_end":728265,"line_start":897,"line_end":897,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728270,"byte_end":728322,"line_start":898,"line_end":898,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3356},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729013,"byte_end":729029,"line_start":925,"line_end":925,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728806,"byte_end":728861,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728866,"byte_end":728891,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728896,"byte_end":728899,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728904,"byte_end":728976,"line_start":923,"line_end":923,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728981,"byte_end":729001,"line_start":924,"line_end":924,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3404},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735584,"byte_end":735587,"line_start":1138,"line_end":1138,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735394,"byte_end":735455,"line_start":1133,"line_end":1133,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735460,"byte_end":735463,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735468,"byte_end":735480,"line_start":1135,"line_end":1135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735485,"byte_end":735488,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735493,"byte_end":735572,"line_start":1137,"line_end":1137,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3405},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736125,"byte_end":736135,"line_start":1154,"line_end":1154,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735945,"byte_end":735996,"line_start":1149,"line_end":1149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736001,"byte_end":736004,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736009,"byte_end":736021,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736026,"byte_end":736029,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736034,"byte_end":736113,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3406},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736650,"byte_end":736657,"line_start":1169,"line_end":1169,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736356,"byte_end":736438,"line_start":1162,"line_end":1162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736443,"byte_end":736446,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736451,"byte_end":736521,"line_start":1164,"line_end":1164,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736526,"byte_end":736529,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736534,"byte_end":736546,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736551,"byte_end":736554,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736559,"byte_end":736638,"line_start":1168,"line_end":1168,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3408},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737068,"byte_end":737076,"line_start":1182,"line_end":1182,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":736948,"byte_end":737002,"line_start":1180,"line_end":1180,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737007,"byte_end":737056,"line_start":1181,"line_end":1181,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3409},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737363,"byte_end":737371,"line_start":1192,"line_end":1192,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737263,"byte_end":737324,"line_start":1190,"line_end":1190,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737329,"byte_end":737351,"line_start":1191,"line_end":1191,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":3410},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737499,"byte_end":737512,"line_start":1198,"line_end":1198,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":3412}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737433,"byte_end":737488,"line_start":1197,"line_end":1197,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737699,"byte_end":737706,"line_start":1203,"line_end":1203,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737522,"byte_end":737563,"line_start":1199,"line_end":1199,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737568,"byte_end":737571,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737576,"byte_end":737662,"line_start":1201,"line_end":1201,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737667,"byte_end":737691,"line_start":1202,"line_end":1202,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737974,"byte_end":737988,"line_start":1211,"line_end":1211,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737784,"byte_end":737844,"line_start":1208,"line_end":1208,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737849,"byte_end":737917,"line_start":1209,"line_end":1209,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737922,"byte_end":737962,"line_start":1210,"line_end":1210,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":3423},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740123,"byte_end":740131,"line_start":1276,"line_end":1276,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740084,"byte_end":740113,"line_start":1275,"line_end":1275,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":3424},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740220,"byte_end":740229,"line_start":1278,"line_end":1278,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740165,"byte_end":740210,"line_start":1277,"line_end":1277,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":3425},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740309,"byte_end":740318,"line_start":1280,"line_end":1280,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740264,"byte_end":740299,"line_start":1279,"line_end":1279,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":3426},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740414,"byte_end":740428,"line_start":1282,"line_end":1282,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":740353,"byte_end":740404,"line_start":1281,"line_end":1281,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5492},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749041,"byte_end":749043,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749008,"byte_end":749036,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5494},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749104,"byte_end":749107,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749049,"byte_end":749099,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5496},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749162,"byte_end":749166,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749113,"byte_end":749157,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5498},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749221,"byte_end":749226,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749172,"byte_end":749216,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5500},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749267,"byte_end":749270,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749233,"byte_end":749262,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5502},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749332,"byte_end":749336,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749276,"byte_end":749327,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5504},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749370,"byte_end":749375,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749342,"byte_end":749365,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5506},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749410,"byte_end":749416,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749381,"byte_end":749405,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5508},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749472,"byte_end":749476,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749423,"byte_end":749467,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5510},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749531,"byte_end":749536,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749482,"byte_end":749526,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5512},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749562,"byte_end":749577,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5491},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5491},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":748992,"byte_end":749001,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel is 16-bit RGB\n    Rgb16,\n\n    /// Pixel is 16-bit RGBA\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":5492},{"krate":0,"index":5494},{"krate":0,"index":5496},{"krate":0,"index":5498},{"krate":0,"index":5500},{"krate":0,"index":5502},{"krate":0,"index":5504},{"krate":0,"index":5506},{"krate":0,"index":5508},{"krate":0,"index":5510},{"krate":0,"index":5512}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":748871,"byte_end":748931,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749725,"byte_end":749740,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749638,"byte_end":749713,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":3446},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750203,"byte_end":750212,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750150,"byte_end":750191,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3448},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750551,"byte_end":750560,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750472,"byte_end":750539,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3450},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750954,"byte_end":750968,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750820,"byte_end":750916,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":750921,"byte_end":750942,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":3451},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751131,"byte_end":751144,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751055,"byte_end":751119,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5531},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751806,"byte_end":751808,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751773,"byte_end":751801,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5533},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751869,"byte_end":751872,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751814,"byte_end":751864,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5535},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751927,"byte_end":751931,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751878,"byte_end":751922,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5537},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751986,"byte_end":751991,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751937,"byte_end":751981,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5539},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752030,"byte_end":752032,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751997,"byte_end":752025,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5541},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752093,"byte_end":752096,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752038,"byte_end":752088,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5543},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752151,"byte_end":752155,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752102,"byte_end":752146,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5545},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752210,"byte_end":752215,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752161,"byte_end":752205,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5547},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752254,"byte_end":752256,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752221,"byte_end":752249,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5549},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752317,"byte_end":752320,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752262,"byte_end":752312,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5551},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752375,"byte_end":752379,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752326,"byte_end":752370,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5553},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752434,"byte_end":752439,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752385,"byte_end":752429,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5555},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752478,"byte_end":752480,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752445,"byte_end":752473,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5557},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752541,"byte_end":752544,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752486,"byte_end":752536,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5559},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752599,"byte_end":752603,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752550,"byte_end":752594,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5561},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752658,"byte_end":752663,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752609,"byte_end":752653,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5563},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752703,"byte_end":752706,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752669,"byte_end":752698,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5565},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752768,"byte_end":752772,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752712,"byte_end":752763,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5567},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752828,"byte_end":752833,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752778,"byte_end":752823,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5569},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752889,"byte_end":752895,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752839,"byte_end":752884,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5571},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752950,"byte_end":752954,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752901,"byte_end":752945,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5573},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753009,"byte_end":753014,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":752960,"byte_end":753004,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5575},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753243,"byte_end":753250,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753021,"byte_end":753115,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753120,"byte_end":753212,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753217,"byte_end":753238,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5578},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753280,"byte_end":753295,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":5530},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5530},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751749,"byte_end":751766,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n\n    /// Pixel is 1-bit luminance\n    L1,\n\n    /// Pixel is 1-bit luminance with an alpha channel\n    La1,\n\n    /// Pixel contains 1-bit R, G and B channels\n    Rgb1,\n\n    /// Pixel is 1-bit RGB with an alpha channel\n    Rgba1,\n\n    /// Pixel is 2-bit luminance\n    L2,\n\n    /// Pixel is 2-bit luminance with an alpha channel\n    La2,\n\n    /// Pixel contains 2-bit R, G and B channels\n    Rgb2,\n\n    /// Pixel is 2-bit RGB with an alpha channel\n    Rgba2,\n\n    /// Pixel is 4-bit luminance\n    L4,\n\n    /// Pixel is 4-bit luminance with an alpha channel\n    La4,\n\n    /// Pixel contains 4-bit R, G and B channels\n    Rgb4,\n\n    /// Pixel is 4-bit RGB with an alpha channel\n    Rgba4,\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel contains 16-bit R, G and B channels\n    Rgb16,\n\n    /// Pixel is 16-bit RGB with an alpha channel\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    /// Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n    /// which are associated with an external palette. In that case, the pixel value is an index\n    /// into the palette.\n    Unknown(u8),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":5531},{"krate":0,"index":5533},{"krate":0,"index":5535},{"krate":0,"index":5537},{"krate":0,"index":5539},{"krate":0,"index":5541},{"krate":0,"index":5543},{"krate":0,"index":5545},{"krate":0,"index":5547},{"krate":0,"index":5549},{"krate":0,"index":5551},{"krate":0,"index":5553},{"krate":0,"index":5555},{"krate":0,"index":5557},{"krate":0,"index":5559},{"krate":0,"index":5561},{"krate":0,"index":5563},{"krate":0,"index":5565},{"krate":0,"index":5567},{"krate":0,"index":5569},{"krate":0,"index":5571},{"krate":0,"index":5573},{"krate":0,"index":5575},{"krate":0,"index":5578}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751242,"byte_end":751305,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751306,"byte_end":751309,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751310,"byte_end":751407,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751408,"byte_end":751505,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751506,"byte_end":751535,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751536,"byte_end":751539,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751540,"byte_end":751632,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":751633,"byte_end":751688,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753578,"byte_end":753591,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753364,"byte_end":753419,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753424,"byte_end":753427,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753432,"byte_end":753526,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753531,"byte_end":753566,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5896},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":759955,"byte_end":759958,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5925},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760035,"byte_end":760038,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5954},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760114,"byte_end":760118,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5983},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760195,"byte_end":760199,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6012},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760295,"byte_end":760299,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6041},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760394,"byte_end":760399,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755705,"byte_end":755715,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":755716,"byte_end":755738,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":3457},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760566,"byte_end":760575,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":3459}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760494,"byte_end":760555,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3459},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760665,"byte_end":760675,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":3457},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760589,"byte_end":760657,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6122},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788708,"byte_end":788718,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788661,"byte_end":788703,"line_start":43,"line_end":43,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6125},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788794,"byte_end":788805,"line_start":47,"line_end":47,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788736,"byte_end":788789,"line_start":46,"line_end":46,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6128},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788874,"byte_end":788883,"line_start":50,"line_end":50,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788828,"byte_end":788869,"line_start":49,"line_end":49,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6131},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788957,"byte_end":788967,"line_start":53,"line_end":53,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788900,"byte_end":788952,"line_start":52,"line_end":52,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6134},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789031,"byte_end":789040,"line_start":56,"line_end":56,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788985,"byte_end":789026,"line_start":55,"line_end":55,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6137},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789114,"byte_end":789124,"line_start":59,"line_end":59,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789057,"byte_end":789109,"line_start":58,"line_end":58,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6140},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789190,"byte_end":789201,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789142,"byte_end":789185,"line_start":61,"line_end":61,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6143},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789280,"byte_end":789292,"line_start":65,"line_end":65,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789221,"byte_end":789275,"line_start":64,"line_end":64,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6146},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789364,"byte_end":789374,"line_start":68,"line_end":68,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789317,"byte_end":789359,"line_start":67,"line_end":67,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6149},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789451,"byte_end":789462,"line_start":71,"line_end":71,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":6121},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":789393,"byte_end":789446,"line_start":70,"line_end":70,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":6121},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788642,"byte_end":788654,"line_start":42,"line_end":42,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n\n    /// Each pixel in this image is 8-bit Bgr\n    ImageBgr8(BgrImage),\n\n    /// Each pixel in this image is 8-bit Bgr with alpha\n    ImageBgra8(BgraImage),\n\n    /// Each pixel in this image is 16-bit Luma\n    ImageLuma16(Gray16Image),\n\n    /// Each pixel in this image is 16-bit Luma with alpha\n    ImageLumaA16(GrayAlpha16Image),\n\n    /// Each pixel in this image is 16-bit Rgb\n    ImageRgb16(Rgb16Image),\n\n    /// Each pixel in this image is 16-bit Rgb with alpha\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":6122},{"krate":0,"index":6125},{"krate":0,"index":6128},{"krate":0,"index":6131},{"krate":0,"index":6134},{"krate":0,"index":6137},{"krate":0,"index":6140},{"krate":0,"index":6143},{"krate":0,"index":6146},{"krate":0,"index":6149}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":788596,"byte_end":788615,"line_start":40,"line_end":40,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3682},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793677,"byte_end":793686,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793603,"byte_end":793665,"line_start":137,"line_end":137,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3683},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793889,"byte_end":793900,"line_start":144,"line_end":144,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793789,"byte_end":793843,"line_start":142,"line_end":142,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793848,"byte_end":793877,"line_start":143,"line_end":143,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3684},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794077,"byte_end":794085,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794004,"byte_end":794065,"line_start":148,"line_end":148,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794261,"byte_end":794270,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794187,"byte_end":794249,"line_start":153,"line_end":153,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3686},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794447,"byte_end":794456,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794373,"byte_end":794435,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794632,"byte_end":794640,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794559,"byte_end":794620,"line_start":163,"line_end":163,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3688},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794816,"byte_end":794826,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794742,"byte_end":794804,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3689},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795030,"byte_end":795042,"line_start":175,"line_end":175,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794930,"byte_end":794984,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":794989,"byte_end":795018,"line_start":174,"line_end":174,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3690},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795220,"byte_end":795229,"line_start":180,"line_end":180,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795147,"byte_end":795208,"line_start":179,"line_end":179,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3691},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795406,"byte_end":795416,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795332,"byte_end":795394,"line_start":184,"line_end":184,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3692},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795582,"byte_end":795594,"line_start":190,"line_end":190,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795520,"byte_end":795570,"line_start":189,"line_end":189,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3695},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795772,"byte_end":795778,"line_start":197,"line_end":197,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795711,"byte_end":795760,"line_start":196,"line_end":196,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3696},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795947,"byte_end":795954,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":795885,"byte_end":795935,"line_start":203,"line_end":203,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3697},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796123,"byte_end":796129,"line_start":211,"line_end":211,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796062,"byte_end":796111,"line_start":210,"line_end":210,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3698},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796298,"byte_end":796305,"line_start":218,"line_end":218,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796236,"byte_end":796286,"line_start":217,"line_end":217,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3699},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796474,"byte_end":796481,"line_start":225,"line_end":225,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796413,"byte_end":796462,"line_start":224,"line_end":224,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3700},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796651,"byte_end":796664,"line_start":232,"line_end":232,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796589,"byte_end":796639,"line_start":231,"line_end":231,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3701},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796956,"byte_end":796964,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796777,"byte_end":796823,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796828,"byte_end":796831,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796836,"byte_end":796906,"line_start":240,"line_end":240,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":796911,"byte_end":796944,"line_start":241,"line_end":241,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3702},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797281,"byte_end":797290,"line_start":253,"line_end":253,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797101,"byte_end":797148,"line_start":249,"line_end":249,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797153,"byte_end":797156,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797161,"byte_end":797231,"line_start":251,"line_end":251,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797236,"byte_end":797269,"line_start":252,"line_end":252,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3703},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797609,"byte_end":797617,"line_start":264,"line_end":264,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797430,"byte_end":797476,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797481,"byte_end":797484,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797489,"byte_end":797559,"line_start":262,"line_end":262,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797564,"byte_end":797597,"line_start":263,"line_end":263,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3704},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797934,"byte_end":797943,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797754,"byte_end":797801,"line_start":271,"line_end":271,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797806,"byte_end":797809,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797814,"byte_end":797884,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":797889,"byte_end":797922,"line_start":274,"line_end":274,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3705},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798263,"byte_end":798272,"line_start":286,"line_end":286,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798083,"byte_end":798130,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798135,"byte_end":798138,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798143,"byte_end":798213,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798218,"byte_end":798251,"line_start":285,"line_end":285,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3706},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798593,"byte_end":798608,"line_start":297,"line_end":297,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798412,"byte_end":798460,"line_start":293,"line_end":293,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798465,"byte_end":798468,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798473,"byte_end":798543,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798548,"byte_end":798581,"line_start":296,"line_end":296,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3707},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798990,"byte_end":798994,"line_start":308,"line_end":308,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798760,"byte_end":798831,"line_start":304,"line_end":304,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798836,"byte_end":798839,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798844,"byte_end":798895,"line_start":306,"line_end":306,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":798900,"byte_end":798978,"line_start":307,"line_end":307,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3708},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799251,"byte_end":799259,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799168,"byte_end":799239,"line_start":312,"line_end":312,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3709},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799484,"byte_end":799491,"line_start":318,"line_end":318,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799429,"byte_end":799472,"line_start":317,"line_end":317,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3710},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799706,"byte_end":799717,"line_start":326,"line_end":326,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799643,"byte_end":799694,"line_start":325,"line_end":325,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3711},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799936,"byte_end":799943,"line_start":334,"line_end":334,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":799881,"byte_end":799924,"line_start":333,"line_end":333,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3712},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800158,"byte_end":800169,"line_start":342,"line_end":342,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800095,"byte_end":800146,"line_start":341,"line_end":341,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3713},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800389,"byte_end":800397,"line_start":350,"line_end":350,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800333,"byte_end":800377,"line_start":349,"line_end":349,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3714},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800615,"byte_end":800627,"line_start":358,"line_end":358,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800551,"byte_end":800603,"line_start":357,"line_end":357,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3715},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800849,"byte_end":800857,"line_start":366,"line_end":366,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":800793,"byte_end":800837,"line_start":365,"line_end":365,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3716},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801075,"byte_end":801087,"line_start":374,"line_end":374,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801011,"byte_end":801063,"line_start":373,"line_end":373,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3717},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801314,"byte_end":801322,"line_start":382,"line_end":382,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801253,"byte_end":801302,"line_start":381,"line_end":381,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3718},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801545,"byte_end":801557,"line_start":390,"line_end":390,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801476,"byte_end":801533,"line_start":389,"line_end":389,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3719},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801806,"byte_end":801820,"line_start":398,"line_end":398,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801723,"byte_end":801794,"line_start":397,"line_end":397,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3720},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802071,"byte_end":802089,"line_start":406,"line_end":406,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":801980,"byte_end":802059,"line_start":405,"line_end":405,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3721},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802317,"byte_end":802325,"line_start":414,"line_end":414,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802261,"byte_end":802305,"line_start":413,"line_end":413,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3722},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802544,"byte_end":802556,"line_start":422,"line_end":422,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802480,"byte_end":802532,"line_start":421,"line_end":421,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802780,"byte_end":802789,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802723,"byte_end":802768,"line_start":429,"line_end":429,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3724},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803011,"byte_end":803024,"line_start":438,"line_end":438,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":802946,"byte_end":802999,"line_start":437,"line_end":437,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3725},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803255,"byte_end":803264,"line_start":446,"line_end":446,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803193,"byte_end":803243,"line_start":445,"line_end":445,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3726},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803491,"byte_end":803504,"line_start":454,"line_end":454,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803421,"byte_end":803479,"line_start":453,"line_end":453,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3727},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803757,"byte_end":803772,"line_start":462,"line_end":462,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803673,"byte_end":803745,"line_start":461,"line_end":461,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3728},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":804027,"byte_end":804046,"line_start":470,"line_end":470,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":803935,"byte_end":804015,"line_start":469,"line_end":469,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":3729},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":804305,"byte_end":804323,"line_start":478,"line_end":478,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":804221,"byte_end":804293,"line_start":477,"line_end":477,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":3730},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":804957,"byte_end":804976,"line_start":491,"line_end":491,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":804872,"byte_end":804945,"line_start":490,"line_end":490,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3731},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":805443,"byte_end":805451,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":805383,"byte_end":805431,"line_start":501,"line_end":501,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":805559,"byte_end":805564,"line_start":507,"line_end":507,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":805512,"byte_end":805547,"line_start":506,"line_end":506,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3733},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":806368,"byte_end":806377,"line_start":523,"line_end":523,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":806311,"byte_end":806356,"line_start":522,"line_end":522,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3734},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807483,"byte_end":807489,"line_start":540,"line_end":540,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807397,"byte_end":807433,"line_start":538,"line_end":538,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807438,"byte_end":807471,"line_start":539,"line_end":539,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":3735},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807853,"byte_end":807859,"line_start":548,"line_end":548,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807576,"byte_end":807635,"line_start":544,"line_end":544,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807640,"byte_end":807703,"line_start":545,"line_end":545,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807708,"byte_end":807770,"line_start":546,"line_end":546,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":807775,"byte_end":807841,"line_start":547,"line_end":547,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3736},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808323,"byte_end":808335,"line_start":558,"line_end":558,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808121,"byte_end":808180,"line_start":555,"line_end":555,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808185,"byte_end":808241,"line_start":556,"line_end":556,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808246,"byte_end":808311,"line_start":557,"line_end":557,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3737},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809026,"byte_end":809035,"line_start":575,"line_end":575,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808551,"byte_end":808607,"line_start":567,"line_end":567,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808612,"byte_end":808675,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808680,"byte_end":808742,"line_start":569,"line_end":569,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808747,"byte_end":808813,"line_start":570,"line_end":570,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808818,"byte_end":808821,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808826,"byte_end":808889,"line_start":572,"line_end":572,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808894,"byte_end":808944,"line_start":573,"line_end":573,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":808949,"byte_end":809014,"line_start":574,"line_end":574,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3738},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809643,"byte_end":809658,"line_start":587,"line_end":587,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809261,"byte_end":809306,"line_start":581,"line_end":581,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809311,"byte_end":809367,"line_start":582,"line_end":582,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809372,"byte_end":809438,"line_start":583,"line_end":583,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809443,"byte_end":809506,"line_start":584,"line_end":584,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809511,"byte_end":809561,"line_start":585,"line_end":585,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809566,"byte_end":809631,"line_start":586,"line_end":586,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":3739},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":810178,"byte_end":810192,"line_start":597,"line_end":597,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809800,"byte_end":809859,"line_start":591,"line_end":591,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809864,"byte_end":809927,"line_start":592,"line_end":592,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809932,"byte_end":809994,"line_start":593,"line_end":593,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":809999,"byte_end":810061,"line_start":594,"line_end":594,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":810066,"byte_end":810130,"line_start":595,"line_end":595,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":810135,"byte_end":810166,"line_start":596,"line_end":596,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":3740},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811012,"byte_end":811016,"line_start":620,"line_end":620,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":810900,"byte_end":810943,"line_start":618,"line_end":618,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":810948,"byte_end":811000,"line_start":619,"line_end":619,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3741},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811394,"byte_end":811403,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811128,"byte_end":811173,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811178,"byte_end":811229,"line_start":625,"line_end":625,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811234,"byte_end":811290,"line_start":626,"line_end":626,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811295,"byte_end":811298,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811303,"byte_end":811382,"line_start":628,"line_end":628,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3742},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811612,"byte_end":811621,"line_start":634,"line_end":634,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811547,"byte_end":811600,"line_start":633,"line_end":633,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":3743},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812031,"byte_end":812046,"line_start":645,"line_end":645,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811828,"byte_end":811866,"line_start":642,"line_end":642,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811871,"byte_end":811930,"line_start":643,"line_end":643,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":811935,"byte_end":812019,"line_start":644,"line_end":644,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":3744},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812346,"byte_end":812354,"line_start":652,"line_end":652,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812154,"byte_end":812192,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812197,"byte_end":812253,"line_start":650,"line_end":650,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812258,"byte_end":812334,"line_start":651,"line_end":651,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":3745},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812702,"byte_end":812711,"line_start":660,"line_end":660,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812470,"byte_end":812504,"line_start":656,"line_end":656,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812509,"byte_end":812560,"line_start":657,"line_end":657,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812565,"byte_end":812634,"line_start":658,"line_end":658,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812639,"byte_end":812690,"line_start":659,"line_end":659,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3746},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812870,"byte_end":812875,"line_start":665,"line_end":665,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812828,"byte_end":812858,"line_start":664,"line_end":664,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":3747},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813021,"byte_end":813026,"line_start":670,"line_end":670,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":812977,"byte_end":813009,"line_start":669,"line_end":669,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3748},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813185,"byte_end":813193,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813130,"byte_end":813173,"line_start":674,"line_end":674,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3749},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813346,"byte_end":813355,"line_start":680,"line_end":680,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813290,"byte_end":813334,"line_start":679,"line_end":679,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813509,"byte_end":813518,"line_start":685,"line_end":685,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813453,"byte_end":813497,"line_start":684,"line_end":684,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813673,"byte_end":813681,"line_start":690,"line_end":690,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":813616,"byte_end":813661,"line_start":689,"line_end":689,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":817777,"byte_end":817781,"line_start":799,"line_end":799,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":817643,"byte_end":817696,"line_start":796,"line_end":796,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":817701,"byte_end":817704,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":817709,"byte_end":817765,"line_start":798,"line_end":798,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818153,"byte_end":818169,"line_start":813,"line_end":813,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":817946,"byte_end":818001,"line_start":808,"line_end":808,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818006,"byte_end":818031,"line_start":809,"line_end":809,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818036,"byte_end":818039,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818044,"byte_end":818116,"line_start":811,"line_end":811,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818121,"byte_end":818141,"line_start":812,"line_end":812,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3776},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825031,"byte_end":825035,"line_start":991,"line_end":991,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824729,"byte_end":824778,"line_start":984,"line_end":984,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824779,"byte_end":824847,"line_start":985,"line_end":985,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824848,"byte_end":824851,"line_start":986,"line_end":986,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824852,"byte_end":824948,"line_start":987,"line_end":987,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824949,"byte_end":824977,"line_start":988,"line_end":988,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824978,"byte_end":824981,"line_start":989,"line_end":989,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":824982,"byte_end":825023,"line_start":990,"line_end":990,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3778},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825590,"byte_end":825606,"line_start":1006,"line_end":1006,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825225,"byte_end":825292,"line_start":999,"line_end":999,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825293,"byte_end":825373,"line_start":1000,"line_end":1000,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825374,"byte_end":825377,"line_start":1001,"line_end":1001,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825378,"byte_end":825474,"line_start":1002,"line_end":1002,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825475,"byte_end":825536,"line_start":1003,"line_end":1003,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825537,"byte_end":825540,"line_start":1004,"line_end":1004,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825541,"byte_end":825582,"line_start":1005,"line_end":1005,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3780},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826181,"byte_end":826192,"line_start":1021,"line_end":1021,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825806,"byte_end":825868,"line_start":1014,"line_end":1014,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825869,"byte_end":825872,"line_start":1015,"line_end":1015,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825873,"byte_end":825959,"line_start":1016,"line_end":1016,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":825960,"byte_end":826021,"line_start":1017,"line_end":1017,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826023,"byte_end":826114,"line_start":1019,"line_end":1019,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826115,"byte_end":826173,"line_start":1020,"line_end":1020,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":3782},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826846,"byte_end":826869,"line_start":1043,"line_end":1043,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826498,"byte_end":826559,"line_start":1035,"line_end":1035,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826560,"byte_end":826588,"line_start":1036,"line_end":1036,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826589,"byte_end":826592,"line_start":1037,"line_end":1037,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826593,"byte_end":826655,"line_start":1038,"line_end":1038,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826656,"byte_end":826688,"line_start":1039,"line_end":1039,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826689,"byte_end":826749,"line_start":1040,"line_end":1040,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826750,"byte_end":826808,"line_start":1041,"line_end":1041,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":826809,"byte_end":826838,"line_start":1042,"line_end":1042,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":3784},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827432,"byte_end":827448,"line_start":1066,"line_end":1066,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827188,"byte_end":827228,"line_start":1058,"line_end":1058,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827229,"byte_end":827232,"line_start":1059,"line_end":1059,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827233,"byte_end":827284,"line_start":1060,"line_end":1060,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827285,"byte_end":827327,"line_start":1061,"line_end":1061,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827328,"byte_end":827331,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827332,"byte_end":827378,"line_start":1063,"line_end":1063,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827379,"byte_end":827382,"line_start":1064,"line_end":1064,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827383,"byte_end":827424,"line_start":1065,"line_end":1065,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":3785},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827930,"byte_end":827958,"line_start":1081,"line_end":1081,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827603,"byte_end":827643,"line_start":1071,"line_end":1071,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827644,"byte_end":827647,"line_start":1072,"line_end":1072,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827648,"byte_end":827745,"line_start":1073,"line_end":1073,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827746,"byte_end":827780,"line_start":1074,"line_end":1074,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827781,"byte_end":827784,"line_start":1075,"line_end":1075,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827785,"byte_end":827831,"line_start":1076,"line_end":1076,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827832,"byte_end":827835,"line_start":1077,"line_end":1077,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827836,"byte_end":827862,"line_start":1078,"line_end":1078,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827863,"byte_end":827904,"line_start":1079,"line_end":1079,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":827905,"byte_end":827922,"line_start":1080,"line_end":1080,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6155},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832681,"byte_end":832684,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832650,"byte_end":832676,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6157},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832723,"byte_end":832727,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832691,"byte_end":832718,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6159},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832765,"byte_end":832768,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832734,"byte_end":832760,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6161},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832807,"byte_end":832811,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832775,"byte_end":832802,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6163},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832857,"byte_end":832860,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832818,"byte_end":832852,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6165},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832899,"byte_end":832903,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832867,"byte_end":832894,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6167},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832941,"byte_end":832944,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832910,"byte_end":832936,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6169},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832982,"byte_end":832985,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832951,"byte_end":832977,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6171},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833023,"byte_end":833026,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832992,"byte_end":833018,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6173},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833064,"byte_end":833067,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833033,"byte_end":833059,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6175},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833114,"byte_end":833117,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833074,"byte_end":833109,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6177},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833160,"byte_end":833168,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833124,"byte_end":833155,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6179},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833208,"byte_end":833212,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833175,"byte_end":833203,"line_start":60,"line_end":60,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833238,"byte_end":833253,"line_start":64,"line_end":64,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6154},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6154},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832632,"byte_end":832643,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    Png,\n\n    /// An Image in JPEG Format\n    Jpeg,\n\n    /// An Image in GIF Format\n    Gif,\n\n    /// An Image in WEBP Format\n    WebP,\n\n    /// An Image in general PNM Format\n    Pnm,\n\n    /// An Image in TIFF Format\n    Tiff,\n\n    /// An Image in TGA Format\n    Tga,\n\n    /// An Image in DDS Format\n    Dds,\n\n    /// An Image in BMP Format\n    Bmp,\n\n    /// An Image in ICO Format\n    Ico,\n\n    /// An Image in Radiance HDR Format\n    Hdr,\n\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    /// An Image in AVIF format.\n    Avif,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":6155},{"krate":0,"index":6157},{"krate":0,"index":6159},{"krate":0,"index":6161},{"krate":0,"index":6163},{"krate":0,"index":6165},{"krate":0,"index":6167},{"krate":0,"index":6169},{"krate":0,"index":6171},{"krate":0,"index":6173},{"krate":0,"index":6175},{"krate":0,"index":6177},{"krate":0,"index":6179},{"krate":0,"index":6181}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832469,"byte_end":832515,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":832516,"byte_end":832571,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3812},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833395,"byte_end":833404,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833316,"byte_end":833383,"line_start":68,"line_end":68,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":3814},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":834255,"byte_end":834269,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833665,"byte_end":833724,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833729,"byte_end":833732,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833737,"byte_end":833824,"line_start":77,"line_end":77,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833829,"byte_end":833923,"line_start":78,"line_end":78,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833928,"byte_end":834023,"line_start":79,"line_end":79,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":834028,"byte_end":834039,"line_start":80,"line_end":80,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":834044,"byte_end":834047,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":834052,"byte_end":834146,"line_start":82,"line_end":82,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":834151,"byte_end":834243,"line_start":83,"line_end":83,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6200},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835319,"byte_end":835322,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835260,"byte_end":835283,"line_start":108,"line_end":108,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835288,"byte_end":835314,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6202},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835413,"byte_end":835417,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835329,"byte_end":835353,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835358,"byte_end":835408,"line_start":113,"line_end":113,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6205},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835499,"byte_end":835502,"line_start":118,"line_end":118,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageOutputFormat::Pnm","value":"ImageOutputFormat::Pnm(PNMSubtype)","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835428,"byte_end":835451,"line_start":116,"line_end":116,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835456,"byte_end":835494,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6208},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835580,"byte_end":835583,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageOutputFormat::Gif","value":"ImageOutputFormat::Gif","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835521,"byte_end":835544,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/ An Image in GIF Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835549,"byte_end":835575,"line_start":121,"line_end":121,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6210},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835649,"byte_end":835652,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageOutputFormat::Ico","value":"ImageOutputFormat::Ico","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835590,"byte_end":835613,"line_start":124,"line_end":124,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835618,"byte_end":835644,"line_start":125,"line_end":125,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6212},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835718,"byte_end":835721,"line_start":130,"line_end":130,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835659,"byte_end":835682,"line_start":128,"line_end":128,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835687,"byte_end":835713,"line_start":129,"line_end":129,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6214},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835797,"byte_end":835805,"line_start":134,"line_end":134,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageOutputFormat::Farbfeld","value":"ImageOutputFormat::Farbfeld","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835728,"byte_end":835756,"line_start":132,"line_end":132,"column_start":5,"column_end":33}},{"value":"/ An Image in farbfeld Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835761,"byte_end":835792,"line_start":133,"line_end":133,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6216},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835871,"byte_end":835874,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageOutputFormat::Tga","value":"ImageOutputFormat::Tga","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835812,"byte_end":835835,"line_start":136,"line_end":136,"column_start":5,"column_end":28}},{"value":"/ An Image in TGA Format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835840,"byte_end":835866,"line_start":137,"line_end":137,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6218},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":836198,"byte_end":836209,"line_start":147,"line_end":147,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835953,"byte_end":836025,"line_start":144,"line_end":144,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6221},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":836243,"byte_end":836258,"line_start":150,"line_end":150,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":6199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6199},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835236,"byte_end":835253,"line_start":107,"line_end":107,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n\n    #[cfg(feature = \"png\")]\n    /// An Image in PNG Format\n    Png,\n\n    #[cfg(feature = \"jpeg\")]\n    /// An Image in JPEG Format with specified quality\n    Jpeg(u8),\n\n    #[cfg(feature = \"pnm\")]\n    /// An Image in one of the PNM Formats\n    Pnm(PNMSubtype),\n\n    #[cfg(feature = \"gif\")]\n    /// An Image in GIF Format\n    Gif,\n\n    #[cfg(feature = \"ico\")]\n    /// An Image in ICO Format\n    Ico,\n\n    #[cfg(feature = \"bmp\")]\n    /// An Image in BMP Format\n    Bmp,\n\n    #[cfg(feature = \"farbfeld\")]\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    #[cfg(feature = \"tga\")]\n    /// An Image in TGA Format\n    Tga,\n\n    /// A value for signalling an error: An unsupported format was requested\n    Unsupported(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":6200},{"krate":0,"index":6202},{"krate":0,"index":6205},{"krate":0,"index":6208},{"krate":0,"index":6210},{"krate":0,"index":6212},{"krate":0,"index":6214},{"krate":0,"index":6216},{"krate":0,"index":6218},{"krate":0,"index":6221}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":835128,"byte_end":835187,"line_start":105,"line_end":105,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6235},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845569,"byte_end":845577,"line_start":371,"line_end":371,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":6236},{"krate":0,"index":6237}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845165,"byte_end":845215,"line_start":365,"line_end":365,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845216,"byte_end":845219,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845220,"byte_end":845317,"line_start":367,"line_end":367,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845318,"byte_end":845412,"line_start":368,"line_end":368,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845413,"byte_end":845512,"line_start":369,"line_end":369,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845685,"byte_end":845692,"line_start":378,"line_end":378,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845637,"byte_end":845673,"line_start":377,"line_end":377,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3841},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845865,"byte_end":845870,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845740,"byte_end":845785,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845790,"byte_end":845793,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845798,"byte_end":845853,"line_start":384,"line_end":384,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":3842},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845980,"byte_end":845989,"line_start":390,"line_end":390,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845916,"byte_end":845968,"line_start":389,"line_end":389,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":3843},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846118,"byte_end":846130,"line_start":396,"line_end":396,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":3845},{"krate":0,"index":3846},{"krate":0,"index":3847},{"krate":0,"index":3848},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3854}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846066,"byte_end":846107,"line_start":395,"line_end":395,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3845},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846207,"byte_end":846213,"line_start":398,"line_end":398,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846148,"byte_end":846197,"line_start":397,"line_end":397,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846303,"byte_end":846313,"line_start":401,"line_end":401,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846231,"byte_end":846295,"line_start":400,"line_end":400,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3847},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846418,"byte_end":846428,"line_start":404,"line_end":404,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846341,"byte_end":846410,"line_start":403,"line_end":403,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":3848},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846522,"byte_end":846541,"line_start":407,"line_end":407,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846455,"byte_end":846514,"line_start":406,"line_end":406,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3849},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846882,"byte_end":846893,"line_start":414,"line_end":414,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846616,"byte_end":846700,"line_start":411,"line_end":411,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846705,"byte_end":846801,"line_start":412,"line_end":412,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846806,"byte_end":846874,"line_start":413,"line_end":413,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3850},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847280,"byte_end":847291,"line_start":422,"line_end":422,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846935,"byte_end":846994,"line_start":416,"line_end":416,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846999,"byte_end":847002,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847007,"byte_end":847080,"line_start":418,"line_end":418,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847085,"byte_end":847161,"line_start":419,"line_end":419,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847166,"byte_end":847258,"line_start":420,"line_end":420,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847263,"byte_end":847272,"line_start":421,"line_end":421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":3851},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847628,"byte_end":847642,"line_start":429,"line_end":429,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847470,"byte_end":847566,"line_start":427,"line_end":427,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847571,"byte_end":847620,"line_start":428,"line_end":428,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3852},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848531,"byte_end":848541,"line_start":453,"line_end":453,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847697,"byte_end":847736,"line_start":433,"line_end":433,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847741,"byte_end":847744,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847749,"byte_end":847837,"line_start":435,"line_end":435,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847842,"byte_end":847935,"line_start":436,"line_end":436,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":847940,"byte_end":848038,"line_start":437,"line_end":437,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848043,"byte_end":848113,"line_start":438,"line_end":438,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848118,"byte_end":848121,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848126,"byte_end":848138,"line_start":440,"line_end":440,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848143,"byte_end":848146,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848151,"byte_end":848211,"line_start":442,"line_end":442,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848216,"byte_end":848219,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848224,"byte_end":848238,"line_start":444,"line_end":444,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848243,"byte_end":848246,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848251,"byte_end":848266,"line_start":446,"line_end":446,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848271,"byte_end":848310,"line_start":447,"line_end":447,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848315,"byte_end":848379,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848384,"byte_end":848449,"line_start":449,"line_end":449,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848454,"byte_end":848497,"line_start":450,"line_end":450,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848502,"byte_end":848513,"line_start":451,"line_end":451,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848518,"byte_end":848523,"line_start":452,"line_end":452,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":3854},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848769,"byte_end":848793,"line_start":459,"line_end":459,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":3843},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848647,"byte_end":848743,"line_start":457,"line_end":457,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":848748,"byte_end":848761,"line_start":458,"line_end":458,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3856},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849816,"byte_end":849831,"line_start":493,"line_end":493,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":3858},{"krate":0,"index":3860}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849743,"byte_end":849805,"line_start":492,"line_end":492,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3858},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849986,"byte_end":849995,"line_start":495,"line_end":495,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":3856},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849868,"byte_end":849978,"line_start":494,"line_end":494,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":3860},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850937,"byte_end":850960,"line_start":518,"line_end":518,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":3856},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850221,"byte_end":850300,"line_start":506,"line_end":506,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850305,"byte_end":850308,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850313,"byte_end":850374,"line_start":508,"line_end":508,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850379,"byte_end":850453,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850458,"byte_end":850517,"line_start":510,"line_end":510,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850522,"byte_end":850525,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850530,"byte_end":850622,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850627,"byte_end":850686,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850691,"byte_end":850751,"line_start":514,"line_end":514,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850756,"byte_end":850759,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850764,"byte_end":850828,"line_start":516,"line_end":516,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":850833,"byte_end":850929,"line_start":517,"line_end":517,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":3862},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851191,"byte_end":851207,"line_start":530,"line_end":530,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":3864}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851154,"byte_end":851180,"line_start":529,"line_end":529,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":3864},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851279,"byte_end":851290,"line_start":532,"line_end":532,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":3862},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851218,"byte_end":851271,"line_start":531,"line_end":531,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":3865},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851362,"byte_end":851374,"line_start":536,"line_end":536,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":3866}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851315,"byte_end":851351,"line_start":535,"line_end":535,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":3866},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851923,"byte_end":851934,"line_start":547,"line_end":547,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":3865},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851381,"byte_end":851433,"line_start":537,"line_end":537,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851438,"byte_end":851441,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851446,"byte_end":851517,"line_start":539,"line_end":539,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851522,"byte_end":851598,"line_start":540,"line_end":540,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851603,"byte_end":851678,"line_start":541,"line_end":541,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851683,"byte_end":851757,"line_start":542,"line_end":542,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851762,"byte_end":851810,"line_start":543,"line_end":543,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851815,"byte_end":851818,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851823,"byte_end":851892,"line_start":545,"line_end":545,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":851897,"byte_end":851915,"line_start":546,"line_end":546,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6250},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852128,"byte_end":852134,"line_start":558,"line_end":558,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":6253},{"krate":0,"index":6254},{"krate":0,"index":6255},{"krate":0,"index":6256},{"krate":0,"index":6257}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852071,"byte_end":852099,"line_start":556,"line_end":556,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":3875},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852875,"byte_end":852891,"line_start":595,"line_end":595,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3879},{"krate":0,"index":3880},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852834,"byte_end":852864,"line_start":594,"line_end":594,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":3876},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852930,"byte_end":852935,"line_start":597,"line_end":597,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852898,"byte_end":852920,"line_start":596,"line_end":596,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":3877},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853169,"byte_end":853183,"line_start":602,"line_end":602,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852949,"byte_end":853020,"line_start":599,"line_end":599,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853025,"byte_end":853096,"line_start":600,"line_end":600,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853101,"byte_end":853159,"line_start":601,"line_end":601,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3878},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853276,"byte_end":853286,"line_start":605,"line_end":605,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853229,"byte_end":853268,"line_start":604,"line_end":604,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853350,"byte_end":853355,"line_start":608,"line_end":608,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853314,"byte_end":853342,"line_start":607,"line_end":607,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3880},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853470,"byte_end":853476,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853433,"byte_end":853462,"line_start":613,"line_end":613,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":3881},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853603,"byte_end":853609,"line_start":620,"line_end":620,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853554,"byte_end":853595,"line_start":619,"line_end":619,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853726,"byte_end":853735,"line_start":623,"line_end":623,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853647,"byte_end":853718,"line_start":622,"line_end":622,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":3883},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854058,"byte_end":854067,"line_start":635,"line_end":635,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853883,"byte_end":853922,"line_start":628,"line_end":628,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853927,"byte_end":853930,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853935,"byte_end":853947,"line_start":630,"line_end":630,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853952,"byte_end":853955,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":853960,"byte_end":854000,"line_start":632,"line_end":632,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854005,"byte_end":854008,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854013,"byte_end":854050,"line_start":634,"line_end":634,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3884},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854388,"byte_end":854404,"line_start":645,"line_end":645,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854112,"byte_end":854151,"line_start":637,"line_end":637,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854156,"byte_end":854159,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854164,"byte_end":854239,"line_start":639,"line_end":639,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854244,"byte_end":854256,"line_start":640,"line_end":640,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854261,"byte_end":854264,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854269,"byte_end":854324,"line_start":642,"line_end":642,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854329,"byte_end":854332,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854337,"byte_end":854373,"line_start":644,"line_end":644,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":3885},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854636,"byte_end":854642,"line_start":652,"line_end":652,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854485,"byte_end":854539,"line_start":649,"line_end":649,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854544,"byte_end":854597,"line_start":650,"line_end":650,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854602,"byte_end":854628,"line_start":651,"line_end":651,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":3886},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854912,"byte_end":854917,"line_start":665,"line_end":665,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854856,"byte_end":854904,"line_start":664,"line_end":664,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3887},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855114,"byte_end":855118,"line_start":669,"line_end":669,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":3875},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":854956,"byte_end":855022,"line_start":667,"line_end":667,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855027,"byte_end":855106,"line_start":668,"line_end":668,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":3888},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855317,"byte_end":855329,"line_start":675,"line_end":675,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":3889},{"krate":0,"index":3890},{"krate":0,"index":3891},{"krate":0,"index":3892},{"krate":0,"index":3893},{"krate":0,"index":3894},{"krate":0,"index":3896},{"krate":0,"index":3898},{"krate":0,"index":3899}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855270,"byte_end":855306,"line_start":674,"line_end":674,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":3889},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855574,"byte_end":855584,"line_start":679,"line_end":679,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855354,"byte_end":855425,"line_start":676,"line_end":676,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855430,"byte_end":855501,"line_start":677,"line_end":677,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855506,"byte_end":855564,"line_start":678,"line_end":678,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3890},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855774,"byte_end":855787,"line_start":686,"line_end":686,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855626,"byte_end":855688,"line_start":681,"line_end":681,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855693,"byte_end":855696,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855701,"byte_end":855713,"line_start":683,"line_end":683,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855718,"byte_end":855721,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855726,"byte_end":855766,"line_start":685,"line_end":685,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855961,"byte_end":855970,"line_start":693,"line_end":693,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855841,"byte_end":855875,"line_start":688,"line_end":688,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855880,"byte_end":855883,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855888,"byte_end":855900,"line_start":690,"line_end":690,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855905,"byte_end":855908,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855913,"byte_end":855953,"line_start":692,"line_end":692,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":3892},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856324,"byte_end":856340,"line_start":703,"line_end":703,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856024,"byte_end":856059,"line_start":695,"line_end":695,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856064,"byte_end":856067,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856072,"byte_end":856147,"line_start":697,"line_end":697,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856152,"byte_end":856164,"line_start":698,"line_end":698,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856169,"byte_end":856172,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856177,"byte_end":856232,"line_start":700,"line_end":700,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856237,"byte_end":856240,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856245,"byte_end":856309,"line_start":702,"line_end":702,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3893},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856607,"byte_end":856618,"line_start":710,"line_end":710,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856438,"byte_end":856508,"line_start":707,"line_end":707,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856513,"byte_end":856516,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856521,"byte_end":856599,"line_start":709,"line_end":709,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":3894},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857380,"byte_end":857389,"line_start":727,"line_end":727,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856672,"byte_end":856736,"line_start":712,"line_end":712,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856741,"byte_end":856744,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856749,"byte_end":856810,"line_start":714,"line_end":714,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856815,"byte_end":856848,"line_start":715,"line_end":715,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856853,"byte_end":856856,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856861,"byte_end":856946,"line_start":717,"line_end":717,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856951,"byte_end":856954,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":856959,"byte_end":857051,"line_start":719,"line_end":719,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857056,"byte_end":857122,"line_start":720,"line_end":720,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857127,"byte_end":857130,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857135,"byte_end":857148,"line_start":722,"line_end":722,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857153,"byte_end":857234,"line_start":723,"line_end":723,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857239,"byte_end":857242,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857247,"byte_end":857318,"line_start":725,"line_end":725,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":857323,"byte_end":857372,"line_start":726,"line_end":726,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3896},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858436,"byte_end":858447,"line_start":755,"line_end":755,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858088,"byte_end":858175,"line_start":748,"line_end":748,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858180,"byte_end":858183,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858188,"byte_end":858285,"line_start":750,"line_end":750,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858290,"byte_end":858293,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858298,"byte_end":858311,"line_start":752,"line_end":752,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858316,"byte_end":858385,"line_start":753,"line_end":753,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":858390,"byte_end":858428,"line_start":754,"line_end":754,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3898},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860105,"byte_end":860114,"line_start":791,"line_end":791,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860041,"byte_end":860097,"line_start":790,"line_end":790,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":3899},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860309,"byte_end":860318,"line_start":795,"line_end":795,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":3888},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860157,"byte_end":860219,"line_start":793,"line_end":793,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860224,"byte_end":860301,"line_start":794,"line_end":794,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":3900},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860809,"byte_end":860817,"line_start":812,"line_end":812,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":3902},{"krate":0,"index":3903},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3906}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860525,"byte_end":860554,"line_start":806,"line_end":806,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860555,"byte_end":860558,"line_start":807,"line_end":807,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860559,"byte_end":860609,"line_start":808,"line_end":808,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860610,"byte_end":860671,"line_start":809,"line_end":809,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860672,"byte_end":860735,"line_start":810,"line_end":810,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":860736,"byte_end":860797,"line_start":811,"line_end":811,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3913},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861205,"byte_end":861208,"line_start":828,"line_end":828,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861165,"byte_end":861193,"line_start":827,"line_end":827,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":3914},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861497,"byte_end":861510,"line_start":839,"line_end":839,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861441,"byte_end":861485,"line_start":838,"line_end":838,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":3915},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861744,"byte_end":861752,"line_start":847,"line_end":847,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861689,"byte_end":861732,"line_start":846,"line_end":846,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":3948},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875132,"byte_end":875147,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":3949}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875019,"byte_end":875097,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875098,"byte_end":875121,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3949},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875218,"byte_end":875226,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":3948},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875178,"byte_end":875210,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":3954},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875514,"byte_end":875523,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875468,"byte_end":875503,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":3967},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876045,"byte_end":876056,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3968},{"krate":0,"index":3969}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875902,"byte_end":875963,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875964,"byte_end":876034,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":3968},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876095,"byte_end":876101,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":3967},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3969},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876144,"byte_end":876154,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":3967},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3976},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876626,"byte_end":876630,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":3977},{"krate":0,"index":3978}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876555,"byte_end":876615,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":3977},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876661,"byte_end":876666,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":3976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3978},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876687,"byte_end":876691,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":3976},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3985},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877417,"byte_end":877422,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":3986},{"krate":0,"index":3987},{"krate":0,"index":3988},{"krate":0,"index":3989},{"krate":0,"index":3990},{"krate":0,"index":3991},{"krate":0,"index":3992},{"krate":0,"index":3993},{"krate":0,"index":3994},{"krate":0,"index":3995},{"krate":0,"index":3996},{"krate":0,"index":3997},{"krate":0,"index":3998},{"krate":0,"index":3999},{"krate":0,"index":4000},{"krate":0,"index":4001},{"krate":0,"index":4002},{"krate":0,"index":4003},{"krate":0,"index":4004},{"krate":0,"index":4005},{"krate":0,"index":4007},{"krate":0,"index":4009},{"krate":0,"index":4012},{"krate":0,"index":4015},{"krate":0,"index":4018},{"krate":0,"index":4021},{"krate":0,"index":4023},{"krate":0,"index":4025},{"krate":0,"index":4026}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877292,"byte_end":877316,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877317,"byte_end":877320,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877321,"byte_end":877406,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":3986},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877486,"byte_end":877494,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877443,"byte_end":877476,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":3987},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877569,"byte_end":877582,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877512,"byte_end":877558,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3988},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877725,"byte_end":877738,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877592,"byte_end":877646,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877651,"byte_end":877717,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3989},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877834,"byte_end":877842,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877788,"byte_end":877826,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3990},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877930,"byte_end":877942,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877877,"byte_end":877922,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":3991},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878108,"byte_end":878119,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877985,"byte_end":878049,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878054,"byte_end":878097,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3992},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878336,"byte_end":878347,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878139,"byte_end":878211,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878216,"byte_end":878259,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878264,"byte_end":878328,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":3993},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878451,"byte_end":878461,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878405,"byte_end":878440,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3994},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878601,"byte_end":878611,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878478,"byte_end":878525,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878530,"byte_end":878593,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":3995},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878849,"byte_end":878858,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878665,"byte_end":878730,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878735,"byte_end":878810,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878815,"byte_end":878818,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878823,"byte_end":878841,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3996},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879161,"byte_end":879174,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":878994,"byte_end":879050,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879055,"byte_end":879122,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879127,"byte_end":879130,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879135,"byte_end":879153,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":3997},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879528,"byte_end":879538,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879304,"byte_end":879336,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879341,"byte_end":879344,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879349,"byte_end":879433,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879438,"byte_end":879520,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3998},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879818,"byte_end":879832,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879580,"byte_end":879626,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879631,"byte_end":879634,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879639,"byte_end":879723,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879728,"byte_end":879810,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":3999},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879919,"byte_end":879925,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879882,"byte_end":879911,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4000},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880021,"byte_end":880028,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":879962,"byte_end":880013,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880104,"byte_end":880111,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880066,"byte_end":880096,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":4002},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880209,"byte_end":880222,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880149,"byte_end":880201,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4003},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880298,"byte_end":880304,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880261,"byte_end":880290,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":4004},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880400,"byte_end":880407,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880341,"byte_end":880392,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":4005},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880514,"byte_end":880517,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880445,"byte_end":880506,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4007},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880678,"byte_end":880683,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880609,"byte_end":880670,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4009},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880908,"byte_end":880922,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880771,"byte_end":880843,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":880848,"byte_end":880900,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":4012},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881228,"byte_end":881244,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881075,"byte_end":881147,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881152,"byte_end":881220,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4015},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881473,"byte_end":881490,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881393,"byte_end":881465,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":4018},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881782,"byte_end":881801,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881678,"byte_end":881750,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881755,"byte_end":881774,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4021},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882044,"byte_end":882048,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":881942,"byte_end":882006,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882011,"byte_end":882036,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4023},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882288,"byte_end":882294,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882170,"byte_end":882234,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882239,"byte_end":882280,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":4025},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882441,"byte_end":882447,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882412,"byte_end":882433,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":4026},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882558,"byte_end":882563,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882465,"byte_end":882550,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":4028},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":882672,"byte_end":882687,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6262},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886697,"byte_end":886716,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":6263}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":885974,"byte_end":886020,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886021,"byte_end":886024,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886025,"byte_end":886122,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886123,"byte_end":886221,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886222,"byte_end":886282,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886283,"byte_end":886286,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886287,"byte_end":886382,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886383,"byte_end":886481,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886482,"byte_end":886573,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/utils/mod.rs","byte_start":886574,"byte_end":886617,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19853,"byte_end":19869,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20567,"byte_end":20580,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21356,"byte_end":21369,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22146,"byte_end":22160,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22539,"byte_end":22549,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22906,"byte_end":22916,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23032,"byte_end":23047,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23176,"byte_end":23191,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23441,"byte_end":23457,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23760,"byte_end":23770,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":24231,"byte_end":24241,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":24694,"byte_end":24710,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":26332,"byte_end":26348,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":26376,"byte_end":26390,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":27425,"byte_end":27439,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":27644,"byte_end":27657,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28118,"byte_end":28131,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28336,"byte_end":28349,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28796,"byte_end":28809,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29014,"byte_end":29024,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29407,"byte_end":29417,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29445,"byte_end":29460,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34254,"byte_end":34262,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34832,"byte_end":34840,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34989,"byte_end":34997,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67151,"byte_end":67158,"line_start":232,"line_end":232,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67937,"byte_end":67945,"line_start":268,"line_end":268,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":68484,"byte_end":68492,"line_start":292,"line_end":292,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":83706,"byte_end":83718,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102604,"byte_end":102610,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103992,"byte_end":103998,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104784,"byte_end":104790,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119911,"byte_end":119921,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124924,"byte_end":124936,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137531,"byte_end":137534,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137792,"byte_end":137803,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154958,"byte_end":154969,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160821,"byte_end":160825,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166410,"byte_end":166417,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":170793,"byte_end":170804,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":662},{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":171413,"byte_end":171424,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":172028,"byte_end":172032,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":173279,"byte_end":173286,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":174553,"byte_end":174560,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175455,"byte_end":175465,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175617,"byte_end":175640,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175848,"byte_end":175871,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":176445,"byte_end":176450,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":177385,"byte_end":177390,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":177415,"byte_end":177425,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":186319,"byte_end":186330,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":188253,"byte_end":188265,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190336,"byte_end":190346,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190502,"byte_end":190514,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190861,"byte_end":190878,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":199535,"byte_end":199543,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":200929,"byte_end":200938,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":202203,"byte_end":202218,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":204074,"byte_end":204084,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":235988,"byte_end":235997,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":236417,"byte_end":236427,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":237102,"byte_end":237112,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238871,"byte_end":238881,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":245996,"byte_end":246006,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":251190,"byte_end":251202,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":251842,"byte_end":251852,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":252008,"byte_end":252020,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":252489,"byte_end":252500,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":253224,"byte_end":253230,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254906,"byte_end":254916,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1009}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":256408,"byte_end":256418,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258598,"byte_end":258608,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1043},{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259565,"byte_end":259575,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1055}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":261601,"byte_end":261611,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":262508,"byte_end":262518,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263716,"byte_end":263725,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264215,"byte_end":264225,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":288000,"byte_end":288014,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1180}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":289181,"byte_end":289195,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":289974,"byte_end":289988,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292594,"byte_end":292609,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292857,"byte_end":292872,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":293283,"byte_end":293298,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294106,"byte_end":294121,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":295109,"byte_end":295124,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300241,"byte_end":300251,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1275}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300727,"byte_end":300736,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":301149,"byte_end":301159,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":304113,"byte_end":304129,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":304741,"byte_end":304757,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309473,"byte_end":309483,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309976,"byte_end":309986,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":314140,"byte_end":314150,"line_start":421,"line_end":421,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1335},{"krate":0,"index":1337}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":316716,"byte_end":316728,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":318378,"byte_end":318388,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1382}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":318544,"byte_end":318556,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319058,"byte_end":319066,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319890,"byte_end":319900,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392},{"krate":0,"index":1393}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321271,"byte_end":321280,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321696,"byte_end":321706,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322214,"byte_end":322224,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":1414}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323542,"byte_end":323552,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424},{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":325858,"byte_end":325868,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1432},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1442},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":331548,"byte_end":331558,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332796,"byte_end":332819,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":333112,"byte_end":333135,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":334943,"byte_end":334966,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341648,"byte_end":341659,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351790,"byte_end":351800,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":354362,"byte_end":354373,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":354499,"byte_end":354510,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1546},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":355211,"byte_end":355231,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":355490,"byte_end":355510,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1558},{"krate":0,"index":1559}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":369231,"byte_end":369243,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370374,"byte_end":370384,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370540,"byte_end":370552,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370793,"byte_end":370812,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371052,"byte_end":371071,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1612}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371710,"byte_end":371720,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":374009,"byte_end":374017,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375330,"byte_end":375339,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375759,"byte_end":375769,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381570,"byte_end":381580,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1683},{"krate":0,"index":1684}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":382574,"byte_end":382584,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1687}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385377,"byte_end":385388,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1725},{"krate":0,"index":1726}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":387066,"byte_end":387076,"line_start":67,"line_end":67,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":387489,"byte_end":387500,"line_start":81,"line_end":81,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":389246,"byte_end":389255,"line_start":141,"line_end":141,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":389513,"byte_end":389523,"line_start":152,"line_end":152,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":415746,"byte_end":415755,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1827}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419219,"byte_end":419231,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1829}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419569,"byte_end":419581,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420408,"byte_end":420419,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1860},{"krate":0,"index":1864}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":431715,"byte_end":431726,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454258,"byte_end":454267,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":455025,"byte_end":455034,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1976},{"krate":0,"index":1977}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456399,"byte_end":456409,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":461023,"byte_end":461033,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":463094,"byte_end":463105,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2015}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":468653,"byte_end":468664,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":468802,"byte_end":468815,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2026},{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471424,"byte_end":471434,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038},{"krate":0,"index":2039}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":475269,"byte_end":475279,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":476514,"byte_end":476524,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2051}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":477541,"byte_end":477556,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2054}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":477642,"byte_end":477652,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2056}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":485604,"byte_end":485613,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2087},{"krate":0,"index":2088}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":486874,"byte_end":486883,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2091},{"krate":0,"index":2092}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":487509,"byte_end":487518,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2095}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":491368,"byte_end":491380,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2144}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494209,"byte_end":494219,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2146}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494375,"byte_end":494387,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494863,"byte_end":494876,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2150}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":495468,"byte_end":495483,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2152}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496635,"byte_end":496645,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2179}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507339,"byte_end":507348,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507477,"byte_end":507486,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2209},{"krate":0,"index":2210}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507899,"byte_end":507909,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":509616,"byte_end":509626,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":512053,"byte_end":512055,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":512720,"byte_end":512723,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":513995,"byte_end":514001,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":515623,"byte_end":515628,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516478,"byte_end":516490,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2255}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516615,"byte_end":516628,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2257}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516944,"byte_end":516956,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2259}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":517266,"byte_end":517281,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2261}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":534909,"byte_end":534919,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2351},{"krate":0,"index":2352}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":542696,"byte_end":542706,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2355}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":542939,"byte_end":542957,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2358}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":543827,"byte_end":543842,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2362}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":544403,"byte_end":544420,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2365}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":548440,"byte_end":548458,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2368}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":551023,"byte_end":551036,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2371},{"krate":0,"index":2372}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":551347,"byte_end":551359,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2381}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":552776,"byte_end":552787,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2389}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554498,"byte_end":554509,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2392}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554628,"byte_end":554639,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554740,"byte_end":554753,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560262,"byte_end":560279,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2423}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560791,"byte_end":560801,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2425},{"krate":0,"index":2427}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561771,"byte_end":561780,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2434},{"krate":0,"index":2435},{"krate":0,"index":2436},{"krate":0,"index":2437}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":566454,"byte_end":566468,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2444}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567067,"byte_end":567076,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2446}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567269,"byte_end":567278,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2448}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567472,"byte_end":567481,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2450}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567676,"byte_end":567685,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2452}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":568704,"byte_end":568712,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2487},{"krate":0,"index":2488}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569829,"byte_end":569839,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516},{"krate":0,"index":2517},{"krate":0,"index":2518}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":580799,"byte_end":580809,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2522},{"krate":0,"index":2523},{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":582508,"byte_end":582517,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2534}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583162,"byte_end":583174,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2551}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583541,"byte_end":583551,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2553}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583707,"byte_end":583719,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583808,"byte_end":583818,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2560},{"krate":0,"index":2561}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":585267,"byte_end":585277,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/header.rs","byte_start":590649,"byte_end":590658,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/header.rs","byte_start":592704,"byte_end":592710,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2617}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596458,"byte_end":596469,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2655}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":599271,"byte_end":599281,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2659},{"krate":0,"index":2660}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":601036,"byte_end":601046,"line_start":148,"line_end":148,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2668},{"krate":0,"index":2669}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":601466,"byte_end":601477,"line_start":162,"line_end":162,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2675},{"krate":0,"index":2676},{"krate":0,"index":2677}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604199,"byte_end":604210,"line_start":239,"line_end":239,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2685},{"krate":0,"index":2686}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":605885,"byte_end":605896,"line_start":273,"line_end":273,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2689}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":606960,"byte_end":606972,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2720}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607109,"byte_end":607124,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2726}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607711,"byte_end":607721,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2728}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607878,"byte_end":607890,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608116,"byte_end":608127,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2745}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":611000,"byte_end":611010,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2753},{"krate":0,"index":2754}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":611423,"byte_end":611434,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2760},{"krate":0,"index":2761},{"krate":0,"index":2762}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":641016,"byte_end":641028,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642047,"byte_end":642057,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2855}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642214,"byte_end":642226,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642347,"byte_end":642357,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":2868},{"krate":0,"index":2869},{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646690,"byte_end":646700,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2896},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2908},{"krate":0,"index":2909},{"krate":0,"index":2911},{"krate":0,"index":2912},{"krate":0,"index":2916}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668015,"byte_end":668023,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2919},{"krate":0,"index":2920}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668640,"byte_end":668648,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2922}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668713,"byte_end":668723,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2924}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669012,"byte_end":669022,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2926}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669089,"byte_end":669098,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2928}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669635,"byte_end":669644,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2930}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692045,"byte_end":692051,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3063},{"krate":0,"index":3064}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692641,"byte_end":692647,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3067},{"krate":0,"index":3068}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693166,"byte_end":693171,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3070},{"krate":0,"index":3071},{"krate":0,"index":3072},{"krate":0,"index":3073},{"krate":0,"index":3074},{"krate":0,"index":3075},{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694120,"byte_end":694125,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3083},{"krate":0,"index":3084}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":700161,"byte_end":700169,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3091}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703630,"byte_end":703636,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3137},{"krate":0,"index":3138}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703880,"byte_end":703886,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3143}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704035,"byte_end":704041,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3147}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704250,"byte_end":704256,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3151}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704382,"byte_end":704388,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3154}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704803,"byte_end":704812,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3162},{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705068,"byte_end":705077,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3168}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705226,"byte_end":705235,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3172}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705483,"byte_end":705492,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3176}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":706058,"byte_end":706062,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3184}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":706961,"byte_end":706965,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3188},{"krate":0,"index":3189}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707375,"byte_end":707379,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3193}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707528,"byte_end":707532,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3197}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707899,"byte_end":707903,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3200}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708027,"byte_end":708031,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3203}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708618,"byte_end":708625,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3211}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":709546,"byte_end":709553,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3215},{"krate":0,"index":3216}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":709976,"byte_end":709983,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3220}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710132,"byte_end":710139,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3224}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710521,"byte_end":710528,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3227}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710984,"byte_end":710999,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3238},{"krate":0,"index":3239}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711402,"byte_end":711417,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3244}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711543,"byte_end":711558,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3247}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711734,"byte_end":711749,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3250}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712288,"byte_end":712301,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3260},{"krate":0,"index":3261}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712839,"byte_end":712852,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3266}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712976,"byte_end":712989,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3269}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713159,"byte_end":713172,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3272}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713700,"byte_end":713718,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3283},{"krate":0,"index":3284}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714129,"byte_end":714147,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":3289}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714278,"byte_end":714296,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3292}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714844,"byte_end":714860,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":3302},{"krate":0,"index":3303}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715407,"byte_end":715423,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3308}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715552,"byte_end":715568,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3311}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718590,"byte_end":718601,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3325},{"krate":0,"index":3326},{"krate":0,"index":3327},{"krate":0,"index":3329},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3337}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":725390,"byte_end":725401,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3341},{"krate":0,"index":3342},{"krate":0,"index":3343},{"krate":0,"index":3344},{"krate":0,"index":3345},{"krate":0,"index":3346},{"krate":0,"index":3347}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727999,"byte_end":728010,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3351}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728662,"byte_end":728673,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3356}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729416,"byte_end":729427,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3361},{"krate":0,"index":3362}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729691,"byte_end":729702,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729968,"byte_end":729979,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":3370},{"krate":0,"index":3371}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730250,"byte_end":730261,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3375}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730522,"byte_end":730533,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3379}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730892,"byte_end":730903,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3386},{"krate":0,"index":3387},{"krate":0,"index":3388},{"krate":0,"index":3389}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":731727,"byte_end":731738,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3393},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3396},{"krate":0,"index":3397},{"krate":0,"index":3398},{"krate":0,"index":3399}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735323,"byte_end":735334,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3404},{"krate":0,"index":3405},{"krate":0,"index":3406},{"krate":0,"index":3408},{"krate":0,"index":3409}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737768,"byte_end":737777,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3414}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":739175,"byte_end":739186,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":3422}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749622,"byte_end":749631,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3450},{"krate":0,"index":3451}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753340,"byte_end":753357,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3453}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":754645,"byte_end":754662,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3455}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760758,"byte_end":760759,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3462}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":761197,"byte_end":761198,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3469}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762454,"byte_end":762458,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3480}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762687,"byte_end":762691,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3483}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762919,"byte_end":762923,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3486}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763148,"byte_end":763152,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3489}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763379,"byte_end":763383,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3492}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763531,"byte_end":763535,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3494}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763779,"byte_end":763783,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3496}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764027,"byte_end":764031,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3498}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764217,"byte_end":764221,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3500}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764407,"byte_end":764411,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3502}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764648,"byte_end":764653,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3505}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764915,"byte_end":764920,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3508}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765181,"byte_end":765186,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765451,"byte_end":765456,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3514}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765722,"byte_end":765727,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3517}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765940,"byte_end":765945,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3519}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766245,"byte_end":766250,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3521}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766593,"byte_end":766597,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3524}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766898,"byte_end":766902,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3527}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767204,"byte_end":767208,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3530}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767509,"byte_end":767513,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3533}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767814,"byte_end":767818,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3536}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768095,"byte_end":768099,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3538}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768461,"byte_end":768465,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3540}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768862,"byte_end":768866,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3543}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769167,"byte_end":769171,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3546}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769473,"byte_end":769477,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3549}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769778,"byte_end":769782,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":3552}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770083,"byte_end":770087,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3555}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770411,"byte_end":770414,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3558}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770683,"byte_end":770686,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3561}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770954,"byte_end":770957,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3564}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771222,"byte_end":771225,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3567}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771489,"byte_end":771492,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3570}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771730,"byte_end":771733,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3572}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771958,"byte_end":771961,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3574}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772234,"byte_end":772237,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3577}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772505,"byte_end":772508,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3580}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772773,"byte_end":772776,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3583}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":773046,"byte_end":773049,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3586}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":773313,"byte_end":773316,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3589}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":774982,"byte_end":774987,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3595}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":775992,"byte_end":775996,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3598}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":776106,"byte_end":776110,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3601}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":778318,"byte_end":778322,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3604}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780528,"byte_end":780531,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3607}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780640,"byte_end":780643,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3610}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780862,"byte_end":780867,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3615}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781040,"byte_end":781044,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3618}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781232,"byte_end":781236,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3621}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781449,"byte_end":781453,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3624}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781666,"byte_end":781669,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3627}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781931,"byte_end":781934,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3630}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793584,"byte_end":793596,"line_start":136,"line_end":136,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3682},{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3688},{"krate":0,"index":3689},{"krate":0,"index":3690},{"krate":0,"index":3691},{"krate":0,"index":3692},{"krate":0,"index":3695},{"krate":0,"index":3696},{"krate":0,"index":3697},{"krate":0,"index":3698},{"krate":0,"index":3699},{"krate":0,"index":3700},{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3703},{"krate":0,"index":3704},{"krate":0,"index":3705},{"krate":0,"index":3706},{"krate":0,"index":3707},{"krate":0,"index":3708},{"krate":0,"index":3709},{"krate":0,"index":3710},{"krate":0,"index":3711},{"krate":0,"index":3712},{"krate":0,"index":3713},{"krate":0,"index":3714},{"krate":0,"index":3715},{"krate":0,"index":3716},{"krate":0,"index":3717},{"krate":0,"index":3718},{"krate":0,"index":3719},{"krate":0,"index":3720},{"krate":0,"index":3721},{"krate":0,"index":3722},{"krate":0,"index":3723},{"krate":0,"index":3724},{"krate":0,"index":3725},{"krate":0,"index":3726},{"krate":0,"index":3727},{"krate":0,"index":3728},{"krate":0,"index":3729},{"krate":0,"index":3730},{"krate":0,"index":3731},{"krate":0,"index":3732},{"krate":0,"index":3733},{"krate":0,"index":3734},{"krate":0,"index":3735},{"krate":0,"index":3736},{"krate":0,"index":3737},{"krate":0,"index":3738},{"krate":0,"index":3739},{"krate":0,"index":3740},{"krate":0,"index":3741},{"krate":0,"index":3742},{"krate":0,"index":3743},{"krate":0,"index":3744},{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751},{"krate":0,"index":3754},{"krate":0,"index":3756}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818420,"byte_end":818432,"line_start":824,"line_end":824,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3759},{"krate":0,"index":3760},{"krate":0,"index":3761},{"krate":0,"index":3762},{"krate":0,"index":3763},{"krate":0,"index":3764}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818965,"byte_end":818977,"line_start":846,"line_end":846,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3766},{"krate":0,"index":3767},{"krate":0,"index":3768},{"krate":0,"index":3769},{"krate":0,"index":3770}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833298,"byte_end":833309,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3812},{"krate":0,"index":3814}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":836325,"byte_end":836342,"line_start":153,"line_end":153,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3816}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":837737,"byte_end":837752,"line_start":192,"line_end":192,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3824},{"krate":0,"index":3825}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845622,"byte_end":845630,"line_start":376,"line_end":376,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3840},{"krate":0,"index":3841},{"krate":0,"index":3842}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852278,"byte_end":852284,"line_start":566,"line_end":566,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3870},{"krate":0,"index":3871}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852752,"byte_end":852758,"line_start":588,"line_end":588,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3874}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861147,"byte_end":861155,"line_start":826,"line_end":826,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3913},{"krate":0,"index":3914},{"krate":0,"index":3915}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":862292,"byte_end":862300,"line_start":867,"line_end":867,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3918},{"krate":0,"index":3919},{"krate":0,"index":3920},{"krate":0,"index":3921},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":863121,"byte_end":863129,"line_start":899,"line_end":899,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3927},{"krate":0,"index":3928},{"krate":0,"index":3929},{"krate":0,"index":3930},{"krate":0,"index":3931},{"krate":0,"index":3932}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5037,"byte_end":5042,"line_start":146,"line_end":146,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5435,"byte_end":5439,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","byte_start":30394,"byte_end":30396,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/mod.rs","byte_start":30406,"byte_end":30411,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":143}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5480,"byte_end":5488,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":148}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/mod.rs","byte_start":36838,"byte_end":36846,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":238}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5514,"byte_end":5516,"line_start":171,"line_end":171,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":426}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":5562,"byte_end":5566,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":532}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7707,"byte_end":7710,"line_start":219,"line_end":219,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":712}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7752,"byte_end":7755,"line_start":221,"line_end":221,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":967}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7797,"byte_end":7800,"line_start":223,"line_end":223,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1020}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7847,"byte_end":7855,"line_start":225,"line_end":225,"column_start":13,"column_end":21},"ref_id":{"krate":0,"index":1142}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7897,"byte_end":7900,"line_start":227,"line_end":227,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1235}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7942,"byte_end":7945,"line_start":229,"line_end":229,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1339}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":7987,"byte_end":7990,"line_start":231,"line_end":231,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1567}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8033,"byte_end":8037,"line_start":233,"line_end":233,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":1694}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8079,"byte_end":8082,"line_start":235,"line_end":235,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1922}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8124,"byte_end":8127,"line_start":237,"line_end":237,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":2057}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8169,"byte_end":8172,"line_start":239,"line_end":239,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":2453}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8215,"byte_end":8219,"line_start":241,"line_end":241,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":2618}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/lib.rs","byte_start":8262,"byte_end":8266,"line_start":243,"line_end":243,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":2690}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/mod.rs","byte_start":606219,"byte_end":606222,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2769}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":19853,"byte_end":19869,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":4068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":20567,"byte_end":20580,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":4131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":21356,"byte_end":21369,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22146,"byte_end":22160,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4102},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22539,"byte_end":22549,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":22906,"byte_end":22916,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23032,"byte_end":23047,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23176,"byte_end":23191,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4162},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23441,"byte_end":23457,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":4068},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":23760,"byte_end":23770,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":24231,"byte_end":24241,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":4047},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":24694,"byte_end":24710,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":4068},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":26332,"byte_end":26348,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":4068},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":26376,"byte_end":26390,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":4102},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":27425,"byte_end":27439,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":4102},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":27644,"byte_end":27657,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28118,"byte_end":28131,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":4097},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28336,"byte_end":28349,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":4131},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":28796,"byte_end":28809,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":4131},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29014,"byte_end":29024,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":4136},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29407,"byte_end":29417,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":4136},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/error.rs","byte_start":29445,"byte_end":29460,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":4162},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34254,"byte_end":34262,"line_start":86,"line_end":86,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34832,"byte_end":34840,"line_start":105,"line_end":105,"column_start":38,"column_end":46},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":130},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/math/nq.rs","byte_start":34989,"byte_end":34997,"line_start":112,"line_end":112,"column_start":38,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":38,"index":20},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67151,"byte_end":67158,"line_start":232,"line_end":232,"column_start":19,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":4208},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":67937,"byte_end":67945,"line_start":268,"line_end":268,"column_start":23,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/colorops.rs","byte_start":68484,"byte_end":68492,"line_start":292,"line_end":292,"column_start":32,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":38,"index":20},"to":{"krate":0,"index":277}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/imageops/sample.rs","byte_start":83706,"byte_end":83718,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":349},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":102604,"byte_end":102610,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":103992,"byte_end":103998,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/reader.rs","byte_start":104784,"byte_end":104790,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":448},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/io/free_functions.rs","byte_start":119911,"byte_end":119921,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":124924,"byte_end":124936,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":4243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137531,"byte_end":137534,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":4265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":137792,"byte_end":137803,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":154958,"byte_end":154969,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":4232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":160821,"byte_end":160825,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":4293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":166410,"byte_end":166417,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":4306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":170793,"byte_end":170804,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":4232},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":171413,"byte_end":171424,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":4232},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":172028,"byte_end":172032,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":4293},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":173279,"byte_end":173286,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":4306},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":174553,"byte_end":174560,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4306},"to":{"krate":0,"index":3888}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175455,"byte_end":175465,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175617,"byte_end":175640,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4368},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":175848,"byte_end":175871,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4368},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":176445,"byte_end":176450,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":4319},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":177385,"byte_end":177390,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":4319},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/flat.rs","byte_start":177415,"byte_end":177425,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":4343},"to":{"krate":2,"index":1807}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":186319,"byte_end":186330,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":188253,"byte_end":188265,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":4426},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190336,"byte_end":190346,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190502,"byte_end":190514,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":4426},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":190861,"byte_end":190878,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":4503},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":199535,"byte_end":199543,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":4534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":200929,"byte_end":200938,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":4544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":202203,"byte_end":202218,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":856},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":204074,"byte_end":204084,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":235988,"byte_end":235997,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":901},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":236417,"byte_end":236427,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":823},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/decoder.rs","byte_start":237102,"byte_end":237112,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":823},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":238871,"byte_end":238881,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":942},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/bmp/encoder.rs","byte_start":245996,"byte_end":246006,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":942},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":251190,"byte_end":251202,"line_start":34,"line_end":34,"column_start":23,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":4556},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":251842,"byte_end":251852,"line_start":49,"line_end":49,"column_start":29,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":252008,"byte_end":252020,"line_start":55,"line_end":55,"column_start":23,"column_end":35},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":4556},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":252489,"byte_end":252500,"line_start":83,"line_end":83,"column_start":6,"column_end":17},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":4603},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":253224,"byte_end":253230,"line_start":106,"line_end":106,"column_start":6,"column_end":12},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":4591},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":254906,"byte_end":254916,"line_start":159,"line_end":159,"column_start":15,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1004},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dds.rs","byte_start":256408,"byte_end":256418,"line_start":198,"line_end":198,"column_start":45,"column_end":55},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1004},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":258598,"byte_end":258608,"line_start":49,"line_end":49,"column_start":6,"column_end":16},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":4614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":259565,"byte_end":259575,"line_start":85,"line_end":85,"column_start":15,"column_end":25},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":261601,"byte_end":261611,"line_start":136,"line_end":136,"column_start":45,"column_end":55},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1045},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":262508,"byte_end":262518,"line_start":168,"line_end":168,"column_start":55,"column_end":65},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1045},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":263716,"byte_end":263725,"line_start":210,"line_end":210,"column_start":24,"column_end":33},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1073},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/dxt.rs","byte_start":264215,"byte_end":264225,"line_start":233,"line_end":233,"column_start":16,"column_end":26},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":288000,"byte_end":288014,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":289181,"byte_end":289195,"line_start":76,"line_end":76,"column_start":24,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1171},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":289974,"byte_end":289988,"line_start":102,"line_end":102,"column_start":31,"column_end":45},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1171},"to":{"krate":1,"index":3194}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292594,"byte_end":292609,"line_start":167,"line_end":167,"column_start":15,"column_end":30},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":292857,"byte_end":292872,"line_start":174,"line_end":174,"column_start":45,"column_end":60},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1201},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":293283,"byte_end":293298,"line_start":194,"line_end":194,"column_start":55,"column_end":70},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1201},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":294106,"byte_end":294121,"line_start":220,"line_end":220,"column_start":16,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/farbfeld.rs","byte_start":295109,"byte_end":295124,"line_start":252,"line_end":252,"column_start":33,"column_end":48},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1223},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300241,"byte_end":300251,"line_start":51,"line_end":51,"column_start":15,"column_end":25},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1270},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":300727,"byte_end":300736,"line_start":65,"line_end":65,"column_start":18,"column_end":27},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1276},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":301149,"byte_end":301159,"line_start":79,"line_end":79,"column_start":45,"column_end":55},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":304113,"byte_end":304129,"line_start":156,"line_end":156,"column_start":15,"column_end":31},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":304741,"byte_end":304757,"line_start":178,"line_end":178,"column_start":28,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1295},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309473,"byte_end":309483,"line_start":286,"line_end":286,"column_start":49,"column_end":59},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1270},"to":{"krate":0,"index":3862}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":309976,"byte_end":309986,"line_start":309,"line_end":309,"column_start":16,"column_end":26},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/gif.rs","byte_start":314140,"byte_end":314150,"line_start":421,"line_end":421,"column_start":6,"column_end":16},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":4047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":316716,"byte_end":316728,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":4632},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":318378,"byte_end":318388,"line_start":78,"line_end":78,"column_start":29,"column_end":39},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":318544,"byte_end":318556,"line_start":84,"line_end":84,"column_start":23,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":4632},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319058,"byte_end":319066,"line_start":104,"line_end":104,"column_start":23,"column_end":31},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":4676},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":319890,"byte_end":319900,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":4705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321271,"byte_end":321280,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1394},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":321696,"byte_end":321706,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":4705},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":322214,"byte_end":322224,"line_start":211,"line_end":211,"column_start":58,"column_end":68},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":4705},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":323542,"byte_end":323552,"line_start":265,"line_end":265,"column_start":6,"column_end":16},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":4721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":325858,"byte_end":325868,"line_start":330,"line_end":330,"column_start":18,"column_end":28},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":4712},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":331548,"byte_end":331558,"line_start":483,"line_end":483,"column_start":35,"column_end":45},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":4712},"to":{"krate":2,"index":5210}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":332796,"byte_end":332819,"line_start":522,"line_end":522,"column_start":18,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":333112,"byte_end":333135,"line_start":535,"line_end":535,"column_start":31,"column_end":54},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":334943,"byte_end":334966,"line_start":586,"line_end":586,"column_start":40,"column_end":63},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/decoder.rs","byte_start":341648,"byte_end":341659,"line_start":773,"line_end":773,"column_start":6,"column_end":17},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":4741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":351790,"byte_end":351800,"line_start":23,"line_end":23,"column_start":16,"column_end":26},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":354362,"byte_end":354373,"line_start":100,"line_end":100,"column_start":10,"column_end":21},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1537},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":354499,"byte_end":354510,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":355211,"byte_end":355231,"line_start":135,"line_end":135,"column_start":10,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/hdr/encoder.rs","byte_start":355490,"byte_end":355510,"line_start":145,"line_end":145,"column_start":23,"column_end":43},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1549},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":369231,"byte_end":369243,"line_start":48,"line_end":48,"column_start":23,"column_end":35},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":4771},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370374,"byte_end":370384,"line_start":69,"line_end":69,"column_start":29,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370540,"byte_end":370552,"line_start":75,"line_end":75,"column_start":23,"column_end":35},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":4771},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":370793,"byte_end":370812,"line_start":86,"line_end":86,"column_start":23,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":4819},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371052,"byte_end":371071,"line_start":95,"line_end":95,"column_start":28,"column_end":47},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":4819},"to":{"krate":2,"index":1960}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":371710,"byte_end":371720,"line_start":129,"line_end":129,"column_start":22,"column_end":32},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":374009,"byte_end":374017,"line_start":201,"line_end":201,"column_start":6,"column_end":14},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":4842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375330,"byte_end":375339,"line_start":249,"line_end":249,"column_start":18,"column_end":27},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1645},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/decoder.rs","byte_start":375759,"byte_end":375769,"line_start":263,"line_end":263,"column_start":52,"column_end":62},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1613},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":381570,"byte_end":381580,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/ico/encoder.rs","byte_start":382574,"byte_end":382584,"line_start":66,"line_end":66,"column_start":33,"column_end":43},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1676},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":385377,"byte_end":385388,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":387066,"byte_end":387076,"line_start":67,"line_end":67,"column_start":18,"column_end":28},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1727},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":387489,"byte_end":387500,"line_start":81,"line_end":81,"column_start":45,"column_end":56},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1719},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":389246,"byte_end":389255,"line_start":141,"line_end":141,"column_start":6,"column_end":15},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":5491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/decoder.rs","byte_start":389513,"byte_end":389523,"line_start":152,"line_end":152,"column_start":6,"column_end":16},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":4047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":415746,"byte_end":415755,"line_start":169,"line_end":169,"column_start":25,"column_end":34},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419219,"byte_end":419231,"line_start":301,"line_end":301,"column_start":6,"column_end":18},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":4891},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":419569,"byte_end":419581,"line_start":313,"line_end":313,"column_start":18,"column_end":30},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":4891},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":420408,"byte_end":420419,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/jpeg/encoder.rs","byte_start":431715,"byte_end":431726,"line_start":677,"line_end":677,"column_start":37,"column_end":48},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1832},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":454258,"byte_end":454267,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1964},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":455025,"byte_end":455034,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1964},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":456399,"byte_end":456409,"line_start":120,"line_end":120,"column_start":15,"column_end":25},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1978},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":461023,"byte_end":461033,"line_start":209,"line_end":209,"column_start":45,"column_end":55},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1978},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":463094,"byte_end":463105,"line_start":272,"line_end":272,"column_start":15,"column_end":26},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2002},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":468653,"byte_end":468664,"line_start":412,"line_end":412,"column_start":49,"column_end":60},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2002},"to":{"krate":0,"index":3862}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":468802,"byte_end":468815,"line_start":416,"line_end":416,"column_start":36,"column_end":49},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":2020},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":471424,"byte_end":471434,"line_start":502,"line_end":502,"column_start":16,"column_end":26},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2028},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":475269,"byte_end":475279,"line_start":577,"line_end":577,"column_start":33,"column_end":43},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2028},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":476514,"byte_end":476524,"line_start":609,"line_end":609,"column_start":6,"column_end":16},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":4047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":477541,"byte_end":477556,"line_start":637,"line_end":637,"column_start":18,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":4906},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/png.rs","byte_start":477642,"byte_end":477652,"line_start":643,"line_end":643,"column_start":18,"column_end":28},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":4932},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":485604,"byte_end":485613,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2078},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":486874,"byte_end":486883,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2078},"to":{"krate":1,"index":3176}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/autobreak.rs","byte_start":487509,"byte_end":487518,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2078},"to":{"krate":2,"index":2266}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":491368,"byte_end":491380,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":4958},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494209,"byte_end":494219,"line_start":128,"line_end":128,"column_start":29,"column_end":39},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494375,"byte_end":494387,"line_start":134,"line_end":134,"column_start":23,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":4958},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":494863,"byte_end":494876,"line_start":156,"line_end":156,"column_start":18,"column_end":31},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5015},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":495468,"byte_end":495483,"line_start":178,"line_end":178,"column_start":18,"column_end":33},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5042},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":496635,"byte_end":496645,"line_start":226,"line_end":226,"column_start":15,"column_end":25},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":2167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":499810,"byte_end":499817,"line_start":317,"line_end":317,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3200},"to":{"krate":0,"index":2180}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507339,"byte_end":507348,"line_start":511,"line_end":511,"column_start":32,"column_end":41},"kind":{"Impl":{"id":155}},"from":{"krate":1,"index":2450},"to":{"krate":0,"index":2180}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507477,"byte_end":507486,"line_start":515,"line_end":515,"column_start":18,"column_end":27},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":2202},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":507899,"byte_end":507909,"line_start":529,"line_end":529,"column_start":45,"column_end":55},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":2167},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":509616,"byte_end":509626,"line_start":576,"line_end":576,"column_start":15,"column_end":25},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":2167},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":512053,"byte_end":512055,"line_start":642,"line_end":642,"column_start":17,"column_end":19},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":2157},"to":{"krate":0,"index":2153}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":512720,"byte_end":512723,"line_start":669,"line_end":669,"column_start":17,"column_end":20},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":2159},"to":{"krate":0,"index":2153}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":513995,"byte_end":514001,"line_start":708,"line_end":708,"column_start":17,"column_end":23},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":2161},"to":{"krate":0,"index":2153}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":515623,"byte_end":515628,"line_start":762,"line_end":762,"column_start":17,"column_end":22},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":2163},"to":{"krate":0,"index":2153}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516478,"byte_end":516490,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":5142},"to":{"krate":0,"index":2165}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516615,"byte_end":516628,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5151},"to":{"krate":0,"index":2165}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":516944,"byte_end":516956,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5161},"to":{"krate":0,"index":2165}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/decoder.rs","byte_start":517266,"byte_end":517281,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5171},"to":{"krate":0,"index":2165}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":534909,"byte_end":534919,"line_start":92,"line_end":92,"column_start":16,"column_end":26},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":2303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":542696,"byte_end":542706,"line_start":295,"line_end":295,"column_start":33,"column_end":43},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":2303},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":542939,"byte_end":542957,"line_start":307,"line_end":307,"column_start":10,"column_end":28},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":2309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":543827,"byte_end":543842,"line_start":335,"line_end":335,"column_start":10,"column_end":25},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":2315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":544403,"byte_end":544420,"line_start":356,"line_end":356,"column_start":10,"column_end":27},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":548440,"byte_end":548458,"line_start":450,"line_end":450,"column_start":10,"column_end":28},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":551023,"byte_end":551036,"line_start":517,"line_end":517,"column_start":10,"column_end":23},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2327},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":551347,"byte_end":551359,"line_start":530,"line_end":530,"column_start":10,"column_end":22},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":552776,"byte_end":552787,"line_start":575,"line_end":575,"column_start":10,"column_end":21},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":5089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554498,"byte_end":554509,"line_start":629,"line_end":629,"column_start":29,"column_end":40},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":5089},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554628,"byte_end":554639,"line_start":635,"line_end":635,"column_start":30,"column_end":41},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":5089},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/encoder.rs","byte_start":554740,"byte_end":554753,"line_start":641,"line_end":641,"column_start":10,"column_end":23},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560262,"byte_end":560279,"line_start":163,"line_end":163,"column_start":6,"column_end":23},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":5181},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":560791,"byte_end":560801,"line_start":177,"line_end":177,"column_start":6,"column_end":16},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":5118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":561771,"byte_end":561780,"line_start":202,"line_end":202,"column_start":6,"column_end":15},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":566454,"byte_end":566468,"line_start":324,"line_end":324,"column_start":43,"column_end":57},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2438},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567067,"byte_end":567076,"line_start":343,"line_end":343,"column_start":29,"column_end":38},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567269,"byte_end":567278,"line_start":352,"line_end":352,"column_start":30,"column_end":39},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567472,"byte_end":567481,"line_start":361,"line_end":361,"column_start":29,"column_end":38},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/pnm/header.rs","byte_start":567676,"byte_end":567685,"line_start":370,"line_end":370,"column_start":32,"column_end":41},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":568704,"byte_end":568712,"line_start":20,"line_end":20,"column_start":6,"column_end":14},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":2482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":569829,"byte_end":569839,"line_start":66,"line_end":66,"column_start":22,"column_end":32},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":580799,"byte_end":580809,"line_start":368,"line_end":368,"column_start":52,"column_end":62},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2489},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/decoder.rs","byte_start":582508,"byte_end":582517,"line_start":424,"line_end":424,"column_start":31,"column_end":40},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2528},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583162,"byte_end":583174,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":5201},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583541,"byte_end":583551,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583707,"byte_end":583719,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":5201},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":583808,"byte_end":583818,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/encoder.rs","byte_start":585267,"byte_end":585277,"line_start":85,"line_end":85,"column_start":33,"column_end":43},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2555},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/header.rs","byte_start":590649,"byte_end":590658,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tga/header.rs","byte_start":592704,"byte_end":592710,"line_start":87,"line_end":87,"column_start":6,"column_end":12},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":5231},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":596458,"byte_end":596469,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":599271,"byte_end":599281,"line_start":108,"line_end":108,"column_start":6,"column_end":16},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":601036,"byte_end":601046,"line_start":148,"line_end":148,"column_start":18,"column_end":28},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":2661},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":601466,"byte_end":601477,"line_start":162,"line_end":162,"column_start":52,"column_end":63},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":2648},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":604199,"byte_end":604210,"line_start":239,"line_end":239,"column_start":23,"column_end":34},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":2678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/tiff.rs","byte_start":605885,"byte_end":605896,"line_start":273,"line_end":273,"column_start":40,"column_end":51},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2678},"to":{"krate":0,"index":3865}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":606960,"byte_end":606972,"line_start":25,"line_end":25,"column_start":23,"column_end":35},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":5248},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607109,"byte_end":607124,"line_start":28,"line_end":28,"column_start":31,"column_end":46},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2721},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607711,"byte_end":607721,"line_start":43,"line_end":43,"column_start":29,"column_end":39},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":607878,"byte_end":607890,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":5248},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":608116,"byte_end":608127,"line_start":59,"line_end":59,"column_start":15,"column_end":26},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":611000,"byte_end":611010,"line_start":150,"line_end":150,"column_start":18,"column_end":28},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2746},"to":{"krate":1,"index":3117}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/decoder.rs","byte_start":611423,"byte_end":611434,"line_start":164,"line_end":164,"column_start":45,"column_end":56},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":2730},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":641016,"byte_end":641028,"line_start":687,"line_end":687,"column_start":23,"column_end":35},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":5361},"to":{"krate":2,"index":6604}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642047,"byte_end":642057,"line_start":708,"line_end":708,"column_start":29,"column_end":39},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4047},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642214,"byte_end":642226,"line_start":714,"line_end":714,"column_start":23,"column_end":35},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":5361},"to":{"krate":1,"index":1725}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":642347,"byte_end":642357,"line_start":725,"line_end":725,"column_start":6,"column_end":16},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":646690,"byte_end":646700,"line_start":920,"line_end":920,"column_start":15,"column_end":25},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668015,"byte_end":668023,"line_start":1578,"line_end":1578,"column_start":6,"column_end":14},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5264},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668640,"byte_end":668648,"line_start":1601,"line_end":1601,"column_start":18,"column_end":26},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":5264},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":668713,"byte_end":668723,"line_start":1607,"line_end":1607,"column_start":6,"column_end":16},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":5291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669012,"byte_end":669022,"line_start":1619,"line_end":1619,"column_start":18,"column_end":28},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":5291},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669089,"byte_end":669098,"line_start":1625,"line_end":1625,"column_start":6,"column_end":15},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":5315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/codecs/webp/vp8.rs","byte_start":669635,"byte_end":669644,"line_start":1643,"line_end":1643,"column_start":18,"column_end":27},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":5315},"to":{"krate":2,"index":2033}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692045,"byte_end":692051,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":3058},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":692641,"byte_end":692647,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":3058},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":693166,"byte_end":693171,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":5433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":694120,"byte_end":694125,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":5440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/animation.rs","byte_start":700161,"byte_end":700169,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":226}},"from":{"krate":2,"index":34898},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703630,"byte_end":703636,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":703880,"byte_end":703886,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704035,"byte_end":704041,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704250,"byte_end":704256,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704382,"byte_end":704388,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":704803,"byte_end":704812,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705068,"byte_end":705077,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705226,"byte_end":705235,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":705483,"byte_end":705492,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":3155},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":706058,"byte_end":706062,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":3177},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":706961,"byte_end":706965,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707375,"byte_end":707379,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707528,"byte_end":707532,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":707899,"byte_end":707903,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708027,"byte_end":708031,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":3177},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":708618,"byte_end":708625,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":3204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":709546,"byte_end":709553,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":3204},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":709976,"byte_end":709983,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":3204},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710132,"byte_end":710139,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":3204},"to":{"krate":2,"index":5233}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710521,"byte_end":710528,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":3204},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":710984,"byte_end":710999,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711402,"byte_end":711417,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711543,"byte_end":711558,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":711734,"byte_end":711749,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":3228},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712288,"byte_end":712301,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":3251},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712839,"byte_end":712852,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":3251},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":712976,"byte_end":712989,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":3251},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713159,"byte_end":713172,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":3251},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":713700,"byte_end":713718,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3273},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714129,"byte_end":714147,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3273},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714278,"byte_end":714296,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3273},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":714844,"byte_end":714860,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":3293},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715407,"byte_end":715423,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":3293},"to":{"krate":2,"index":5258}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":715552,"byte_end":715568,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":3293},"to":{"krate":2,"index":6599}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":718590,"byte_end":718601,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":725390,"byte_end":725401,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":727999,"byte_end":728010,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":728662,"byte_end":728673,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729416,"byte_end":729427,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":5460},"to":{"krate":2,"index":2242}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729691,"byte_end":729702,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5460},"to":{"krate":2,"index":2255}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":729968,"byte_end":729979,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5460},"to":{"krate":2,"index":2323}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730250,"byte_end":730261,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5460},"to":{"krate":2,"index":2327}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730522,"byte_end":730533,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5460},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":730892,"byte_end":730903,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":5460},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":731727,"byte_end":731738,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":5460},"to":{"krate":0,"index":3888}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":735323,"byte_end":735334,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":5460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":737768,"byte_end":737777,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":3425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/buffer.rs","byte_start":739175,"byte_end":739186,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5460},"to":{"krate":0,"index":3410}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":749622,"byte_end":749631,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":5491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":753340,"byte_end":753357,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":5530},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":754645,"byte_end":754662,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5530},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":760758,"byte_end":760759,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":3461},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":761197,"byte_end":761198,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":3468},"to":{"krate":0,"index":3463}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762454,"byte_end":762458,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762687,"byte_end":762691,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":762919,"byte_end":762923,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763148,"byte_end":763152,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763379,"byte_end":763383,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763531,"byte_end":763535,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":763779,"byte_end":763783,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764027,"byte_end":764031,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764217,"byte_end":764221,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764407,"byte_end":764411,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764648,"byte_end":764653,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":764915,"byte_end":764920,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765181,"byte_end":765186,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765451,"byte_end":765456,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765722,"byte_end":765727,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":765940,"byte_end":765945,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766245,"byte_end":766250,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766593,"byte_end":766597,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":766898,"byte_end":766902,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767204,"byte_end":767208,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767509,"byte_end":767513,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":767814,"byte_end":767818,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768095,"byte_end":768099,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768461,"byte_end":768465,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":768862,"byte_end":768866,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769167,"byte_end":769171,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769473,"byte_end":769477,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":769778,"byte_end":769782,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770083,"byte_end":770087,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770411,"byte_end":770414,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770683,"byte_end":770686,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":770954,"byte_end":770957,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771222,"byte_end":771225,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771489,"byte_end":771492,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771730,"byte_end":771733,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":771958,"byte_end":771961,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772234,"byte_end":772237,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772505,"byte_end":772508,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":772773,"byte_end":772776,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":773046,"byte_end":773049,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":773313,"byte_end":773316,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3457}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":774982,"byte_end":774987,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":775992,"byte_end":775996,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":776106,"byte_end":776110,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":778318,"byte_end":778322,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780528,"byte_end":780531,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780640,"byte_end":780643,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3591}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":780862,"byte_end":780867,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":6041},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781040,"byte_end":781044,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":5954},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781232,"byte_end":781236,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":5983},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781449,"byte_end":781453,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":6012},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781666,"byte_end":781669,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":5896},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/color.rs","byte_start":781931,"byte_end":781934,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":5925},"to":{"krate":0,"index":3611}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":793584,"byte_end":793596,"line_start":136,"line_end":136,"column_start":6,"column_end":18},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":6121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818420,"byte_end":818432,"line_start":824,"line_end":824,"column_start":27,"column_end":39},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":6121},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/dynimage.rs","byte_start":818965,"byte_end":818977,"line_start":846,"line_end":846,"column_start":23,"column_end":35},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":6121},"to":{"krate":0,"index":3888}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":833298,"byte_end":833309,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":6154},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":836325,"byte_end":836342,"line_start":153,"line_end":153,"column_start":28,"column_end":45},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":6199},"to":{"krate":2,"index":1963}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":837737,"byte_end":837752,"line_start":192,"line_end":192,"column_start":6,"column_end":21},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":3817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":845622,"byte_end":845630,"line_start":376,"line_end":376,"column_start":6,"column_end":14},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":6235},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":846136,"byte_end":846141,"line_start":396,"line_end":396,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":3843}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849837,"byte_end":849849,"line_start":493,"line_end":493,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":3843},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":849856,"byte_end":849861,"line_start":493,"line_end":493,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":3856}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852278,"byte_end":852284,"line_start":566,"line_end":566,"column_start":44,"column_end":50},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":6250},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":852752,"byte_end":852758,"line_start":588,"line_end":588,"column_start":27,"column_end":33},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":6250},"to":{"krate":2,"index":1742}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":855331,"byte_end":855347,"line_start":675,"line_end":675,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":3875},"to":{"krate":0,"index":3888}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":861147,"byte_end":861155,"line_start":826,"line_end":826,"column_start":9,"column_end":17},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":3900},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":862292,"byte_end":862300,"line_start":867,"line_end":867,"column_start":30,"column_end":38},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3900},"to":{"krate":0,"index":3875}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/image.rs","byte_start":863121,"byte_end":863129,"line_start":899,"line_end":899,"column_start":26,"column_end":34},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":3900},"to":{"krate":0,"index":3888}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875156,"byte_end":875171,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":4028},"to":{"krate":0,"index":3948}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875525,"byte_end":875529,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875532,"byte_end":875539,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":36,"index":175},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875542,"byte_end":875545,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":36,"index":615},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875548,"byte_end":875558,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1807},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875567,"byte_end":875572,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":875575,"byte_end":875582,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":36,"index":92},"to":{"krate":0,"index":3954}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876058,"byte_end":876063,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":3967}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876066,"byte_end":876073,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":36,"index":92},"to":{"krate":0,"index":3967}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876076,"byte_end":876083,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":36,"index":175},"to":{"krate":0,"index":3967}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876632,"byte_end":876639,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":36,"index":92},"to":{"krate":0,"index":3976}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":876642,"byte_end":876649,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":36,"index":175},"to":{"krate":0,"index":3976}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877424,"byte_end":877428,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":3985}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.11/./src/traits.rs","byte_start":877431,"byte_end":877436,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":3985}}]}