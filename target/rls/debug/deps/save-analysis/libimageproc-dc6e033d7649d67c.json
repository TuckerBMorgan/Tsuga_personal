{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0","program":"/Users/hiroko/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","imageproc","--edition=2018","/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=dc6e033d7649d67c","-C","extra-filename=-dc6e033d7649d67c","--out-dir","/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps","-L","dependency=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps","--extern","conv=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libconv-63977a97115389c2.rmeta","--extern","image=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libimage-a32cf3aa80a26bb6.rmeta","--extern","itertools=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libitertools-25b9771b3cb61611.rmeta","--extern","num=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libnum-311764583625bc31.rmeta","--extern","rand=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/librand-cce16aac135a488a.rmeta","--extern","rand_distr=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/librand_distr-4c66d9604b572a55.rmeta","--extern","rayon=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/librayon-60cf22ea9619edce.rmeta","--extern","rulinalg=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/librulinalg-57e8eb12622e7f25.rmeta","--extern","rusttype=/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/librusttype-f672be8901912e9b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/hiroko/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/hiroko/rl/Tsuga_personal/target/rls/debug/deps/libimageproc-dc6e033d7649d67c.rmeta"},"prelude":{"crate_id":{"name":"imageproc","disambiguator":[13115212329428869117,11695839056590347172]},"crate_root":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src","external_crates":[{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[17558105223599808375,8641134072992365986]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16391569226461738429,2396501197197794813]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15218473559130501536,10412498800867537882]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15002797972794468225,1552711559034990603]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4646254705103034450,52903416994518094]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12433302035576608964,14843331431738146314]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13168698047779456167,15405996809305099045]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1207314236617024250,12058638532209810988]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[9504436150329069197,1560099004311970383]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[3218777832644284082,1601517877419470567]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17216814665906341115,9093190657978815784]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11427017693389760726,5196118128760041763]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[12191498035001760627,7809175471304527825]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[13343118316727369485,17294320461155615024]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[1642168034010785250,9564000522961009442]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":16,"id":{"name":"image","disambiguator":[7057630120943765022,1856708837345080645]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":17,"id":{"name":"tiff","disambiguator":[2149524000029347744,9830074849364904304]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":18,"id":{"name":"jpeg_decoder","disambiguator":[2155820878611964947,14441403873218197368]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":19,"id":{"name":"byteorder","disambiguator":[1329267443577293958,10947708877403875124]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","num":20,"id":{"name":"rayon","disambiguator":[4613191972440160715,11941265620953829332]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":21,"id":{"name":"either","disambiguator":[4098593999036855744,6981551172028397142]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":22,"id":{"name":"rayon_core","disambiguator":[10541163034117822632,2007127896636369639]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":23,"id":{"name":"crossbeam_channel","disambiguator":[2052144082903411827,11013142710888669578]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":24,"id":{"name":"cfg_if","disambiguator":[10645903167683084943,7507394493178449852]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":25,"id":{"name":"crossbeam_utils","disambiguator":[12249674517246884389,3959205480579387847]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":26,"id":{"name":"const_fn","disambiguator":[9962535952213963955,17548729641558516095]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":27,"id":{"name":"lazy_static","disambiguator":[7323878164186592709,3664285558321133328]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":28,"id":{"name":"crossbeam_deque","disambiguator":[2115088636563217883,15495771120442092140]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":29,"id":{"name":"crossbeam_epoch","disambiguator":[17590297872703006707,5300033388501394944]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":30,"id":{"name":"scopeguard","disambiguator":[18211460972924623792,14298880236037486232]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":31,"id":{"name":"memoffset","disambiguator":[772422491141327713,5833899906491032737]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":32,"id":{"name":"num_cpus","disambiguator":[10728630801135717797,10686795360415260461]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":33,"id":{"name":"libc","disambiguator":[14174293587568776457,7192531006648404102]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":34,"id":{"name":"miniz_oxide","disambiguator":[4946607486664554506,13388139498805762589]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":35,"id":{"name":"adler","disambiguator":[15847833449313237884,6308872387609492432]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":36,"id":{"name":"weezl","disambiguator":[12622806663072799639,15200427237786325573]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":37,"id":{"name":"num_traits","disambiguator":[232350437020485540,14986150533027908738]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":38,"id":{"name":"gif","disambiguator":[15236012841866815845,1503531500896124022]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":39,"id":{"name":"color_quant","disambiguator":[2325900947149695645,2593268885279374387]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":40,"id":{"name":"num_rational","disambiguator":[14322971403813460214,9381810979762178918]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":41,"id":{"name":"num_integer","disambiguator":[13975095593645502028,2293873673250647163]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":42,"id":{"name":"scoped_threadpool","disambiguator":[1879448953928954418,17108822839715134690]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":43,"id":{"name":"num_iter","disambiguator":[13413948256480517707,3762242372458390174]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":44,"id":{"name":"png","disambiguator":[12107458353582404290,12452594348952619300]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":45,"id":{"name":"bitflags","disambiguator":[12336448744031530529,17072759629808312431]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":46,"id":{"name":"deflate","disambiguator":[3931980220157176455,4177270683313860943]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":47,"id":{"name":"adler32","disambiguator":[8381659873363603384,2355112727008450281]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":48,"id":{"name":"crc32fast","disambiguator":[1918382646010406692,2005130629612887560]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":49,"id":{"name":"miniz_oxide","disambiguator":[3154633640878676182,5256666017993151097]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":50,"id":{"name":"bytemuck","disambiguator":[15547703730850227799,15682637470514962802]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","num":51,"id":{"name":"itertools","disambiguator":[6919178970439420881,11454509191263377760]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":52,"id":{"name":"conv","disambiguator":[1784946498476337948,49419886187646589]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":53,"id":{"name":"custom_derive","disambiguator":[3777044454467968172,16786072223522044073]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":54,"id":{"name":"rusttype","disambiguator":[10289382649616300398,17470603794359683381]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":55,"id":{"name":"approx","disambiguator":[18106996361998574500,13429148978537009213]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":56,"id":{"name":"ordered_float","disambiguator":[16850323225246302817,15906710180560236906]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","num":57,"id":{"name":"stb_truetype","disambiguator":[15000139600637134108,8399920982593040349]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","num":58,"id":{"name":"num","disambiguator":[15380906904426736577,16355897204118410486]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","num":59,"id":{"name":"num_bigint","disambiguator":[16402499200104339453,16000631506397049799]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","num":60,"id":{"name":"num_complex","disambiguator":[14224875027102548545,14519428777384056250]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","num":61,"id":{"name":"num_rational","disambiguator":[5461690529504296526,2032523861553074343]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","num":62,"id":{"name":"rulinalg","disambiguator":[17868940513983676671,795781761370492005]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","num":63,"id":{"name":"num","disambiguator":[6976797453417280134,4250714669112181414]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","num":64,"id":{"name":"matrixmultiply","disambiguator":[10750378930164230437,2827861848647317897]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","num":65,"id":{"name":"rawpointer","disambiguator":[5503528003527380480,5737696584982103388]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":66,"id":{"name":"rand","disambiguator":[8841027506590630888,4540102988080988792]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":67,"id":{"name":"rand_core","disambiguator":[1379752092512361865,15729090946682141689]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":68,"id":{"name":"getrandom","disambiguator":[10400070268087930655,6477885062036255608]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":69,"id":{"name":"cfg_if","disambiguator":[5589256938825471164,5141487198345647676]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":70,"id":{"name":"rand_chacha","disambiguator":[17269476959177167345,17002892883631735439]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":71,"id":{"name":"ppv_lite86","disambiguator":[8395343582739728967,16935181611998405177]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":72,"id":{"name":"rand_pcg","disambiguator":[11073160206289213938,3631570591439580423]}},{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","num":73,"id":{"name":"rand_distr","disambiguator":[16035858823108431196,13488150459749408276]}}],"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":0,"byte_end":1511,"line_start":1,"line_end":63,"column_start":1,"column_end":16}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":260},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83819,"byte_end":83842,"line_start":4,"line_end":4,"column_start":24,"column_end":47},"alias_span":null,"name":"draw_cubic_bezier_curve","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":262},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83844,"byte_end":83871,"line_start":4,"line_end":4,"column_start":49,"column_end":76},"alias_span":null,"name":"draw_cubic_bezier_curve_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":287},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83910,"byte_end":83915,"line_start":7,"line_end":7,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83910,"byte_end":83915,"line_start":7,"line_end":7,"column_start":24,"column_end":29},"alias_span":null,"name":"Blend","value":"","parent":{"krate":0,"index":298}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83917,"byte_end":83923,"line_start":7,"line_end":7,"column_start":31,"column_end":37},"alias_span":null,"name":"Canvas","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83967,"byte_end":83985,"line_start":11,"line_end":11,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_filled_circle","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":326},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83987,"byte_end":84009,"line_start":11,"line_end":11,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_filled_circle_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84011,"byte_end":84030,"line_start":11,"line_end":11,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_filled_ellipse","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84032,"byte_end":84055,"line_start":11,"line_end":11,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_filled_ellipse_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84061,"byte_end":84079,"line_start":12,"line_end":12,"column_start":5,"column_end":23},"alias_span":null,"name":"draw_hollow_circle","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84081,"byte_end":84103,"line_start":12,"line_end":12,"column_start":25,"column_end":47},"alias_span":null,"name":"draw_hollow_circle_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84105,"byte_end":84124,"line_start":12,"line_end":12,"column_start":49,"column_end":68},"alias_span":null,"name":"draw_hollow_ellipse","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":312},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84126,"byte_end":84149,"line_start":12,"line_end":12,"column_start":70,"column_end":93},"alias_span":null,"name":"draw_hollow_ellipse_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84188,"byte_end":84198,"line_start":16,"line_end":16,"column_start":23,"column_end":33},"alias_span":null,"name":"draw_cross","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":1451},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84200,"byte_end":84214,"line_start":16,"line_end":16,"column_start":35,"column_end":49},"alias_span":null,"name":"draw_cross_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84254,"byte_end":84283,"line_start":20,"line_end":20,"column_start":5,"column_end":34},"alias_span":null,"name":"draw_antialiased_line_segment","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":419},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84285,"byte_end":84318,"line_start":20,"line_end":20,"column_start":36,"column_end":69},"alias_span":null,"name":"draw_antialiased_line_segment_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":411},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84320,"byte_end":84337,"line_start":20,"line_end":20,"column_start":71,"column_end":88},"alias_span":null,"name":"draw_line_segment","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":413},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84343,"byte_end":84364,"line_start":21,"line_end":21,"column_start":5,"column_end":26},"alias_span":null,"name":"draw_line_segment_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":363},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84366,"byte_end":84383,"line_start":21,"line_end":21,"column_start":28,"column_end":45},"alias_span":null,"name":"BresenhamLineIter","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84385,"byte_end":84407,"line_start":21,"line_end":21,"column_start":47,"column_end":69},"alias_span":null,"name":"BresenhamLinePixelIter","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":395},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84409,"byte_end":84434,"line_start":21,"line_end":21,"column_start":71,"column_end":96},"alias_span":null,"name":"BresenhamLinePixelIterMut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84477,"byte_end":84496,"line_start":25,"line_end":25,"column_start":25,"column_end":44},"alias_span":null,"name":"draw_convex_polygon","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":469},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84498,"byte_end":84521,"line_start":25,"line_end":25,"column_start":46,"column_end":69},"alias_span":null,"name":"draw_convex_polygon_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84523,"byte_end":84528,"line_start":25,"line_end":25,"column_start":71,"column_end":76},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":488},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84568,"byte_end":84584,"line_start":29,"line_end":29,"column_start":5,"column_end":21},"alias_span":null,"name":"draw_filled_rect","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":490},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84586,"byte_end":84606,"line_start":29,"line_end":29,"column_start":23,"column_end":43},"alias_span":null,"name":"draw_filled_rect_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":484},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84608,"byte_end":84624,"line_start":29,"line_end":29,"column_start":45,"column_end":61},"alias_span":null,"name":"draw_hollow_rect","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84626,"byte_end":84646,"line_start":29,"line_end":29,"column_start":63,"column_end":83},"alias_span":null,"name":"draw_hollow_rect_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":519},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84683,"byte_end":84692,"line_start":33,"line_end":33,"column_start":22,"column_end":31},"alias_span":null,"name":"draw_text","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":515},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":84694,"byte_end":84707,"line_start":33,"line_end":33,"column_start":33,"column_end":46},"alias_span":null,"name":"draw_text_mut","value":"","parent":{"krate":0,"index":250}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145065,"byte_end":145078,"line_start":4,"line_end":4,"column_start":23,"column_end":36},"alias_span":null,"name":"median_filter","value":"","parent":{"krate":0,"index":547}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145117,"byte_end":145118,"line_start":7,"line_end":7,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":547}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":0,"byte_end":1511,"line_start":1,"line_end":63,"column_start":1,"column_end":16},"name":"","qualname":"::","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":86},{"krate":0,"index":121},{"krate":0,"index":156},{"krate":0,"index":187},{"krate":0,"index":250},{"krate":0,"index":527},{"krate":0,"index":547},{"krate":0,"index":663},{"krate":0,"index":766},{"krate":0,"index":802},{"krate":0,"index":842},{"krate":0,"index":926},{"krate":0,"index":948},{"krate":0,"index":1002},{"krate":0,"index":1015},{"krate":0,"index":1107},{"krate":0,"index":1116},{"krate":0,"index":1132},{"krate":0,"index":1156},{"krate":0,"index":1168},{"krate":0,"index":1188},{"krate":0,"index":1200},{"krate":0,"index":1227},{"krate":0,"index":1260},{"krate":0,"index":1279},{"krate":0,"index":1297}],"decl_id":null,"docs":" An image processing library based on the\n [image] crate.","sig":null,"attributes":[{"value":"/ An image processing library based on the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":0,"byte_end":44,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/ [image] crate.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":45,"byte_end":63,"line_start":2,"line_end":2,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":64,"byte_end":67,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Note that the image crate contains some image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":68,"byte_end":117,"line_start":4,"line_end":4,"column_start":1,"column_end":50}},{"value":"/ processing functions (including image resizing) in its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":118,"byte_end":176,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/ `imageops` module, so check there if you cannot find","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":177,"byte_end":233,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ a standard image processing function in this crate.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":234,"byte_end":289,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":290,"byte_end":293,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [image]: https://github.com/image-rs/image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":294,"byte_end":340,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":341,"byte_end":363,"line_start":10,"line_end":10,"column_start":1,"column_end":23}},{"value":"allow(clippy :: cast_lossless, clippy :: too_many_arguments, clippy ::\n        needless_range_loop, clippy :: useless_let_if_seq, clippy ::\n        match_wild_err_arm, clippy :: needless_doctest_main, clippy ::\n        range_plus_one, clippy :: trivially_copy_pass_by_ref, clippy ::\n        nonminimal_bool, clippy :: expect_fun_call, clippy ::\n        many_single_char_names)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":398,"byte_end":762,"line_start":12,"line_end":24,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":1857},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":1861},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":39},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":54},{"krate":0,"index":64},{"krate":0,"index":73},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":84}],"decl_id":null,"docs":" Utils for testing and debugging.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":854,"byte_end":866,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ Utils for testing and debugging.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":1513,"byte_end":1549,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":26},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11117,"byte_end":11135,"line_start":324,"line_end":324,"column_start":8,"column_end":26},"name":"pixel_diff_summary","qualname":"::utils::pixel_diff_summary","value":"pub fn pixel_diff_summary<I, J, P>(&I, &J) -> Option<String> where P: Pixel +\nPartialEq, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n between left and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":10988,"byte_end":11052,"line_start":322,"line_end":322,"column_start":1,"column_end":65}},{"value":"/ between left and right, or None if all pixels match.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11053,"byte_end":11109,"line_start":323,"line_end":323,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":31},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11566,"byte_end":11596,"line_start":337,"line_end":337,"column_start":8,"column_end":38},"name":"significant_pixel_diff_summary","qualname":"::utils::significant_pixel_diff_summary","value":"pub fn significant_pixel_diff_summary<I, J, F, P>(&I, &J, F) -> Option<String>\nwhere P: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>, F: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel))\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Human readable description of some of the pixels that differ\n signifcantly (according to provided function) between left\n and right, or None if all pixels match.\n","sig":null,"attributes":[{"value":"/ Human readable description of some of the pixels that differ","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11387,"byte_end":11451,"line_start":334,"line_end":334,"column_start":1,"column_end":65}},{"value":"/ signifcantly (according to provided function) between left","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11452,"byte_end":11514,"line_start":335,"line_end":335,"column_start":1,"column_end":63}},{"value":"/ and right, or None if all pixels match.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":11515,"byte_end":11558,"line_start":336,"line_end":336,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":39},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":14552,"byte_end":14563,"line_start":435,"line_end":435,"column_start":8,"column_end":19},"name":"pixel_diffs","qualname":"::utils::pixel_diffs","value":"pub fn pixel_diffs<I, J, F, P>(&I, &J, F) -> Vec<Diff<I::Pixel>> where\nP: Pixel, I: GenericImage<Pixel = P>, J: GenericImage<Pixel = P>,\nF: Fn((u32, u32, I::Pixel), (u32, u32, J::Pixel)) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Lists pixels that differ between left and right images.\n","sig":null,"attributes":[{"value":"/ Lists pixels that differ between left and right images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":14485,"byte_end":14544,"line_start":434,"line_end":434,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":48},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15593,"byte_end":15597,"line_start":469,"line_end":469,"column_start":12,"column_end":16},"name":"Diff","qualname":"::utils::Diff","value":"Diff { x, y, expected, actual }","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" A difference between two images\n","sig":null,"attributes":[{"value":"/ A difference between two images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15546,"byte_end":15581,"line_start":468,"line_end":468,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":50},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15641,"byte_end":15642,"line_start":471,"line_end":471,"column_start":9,"column_end":10},"name":"x","qualname":"::utils::Diff::x","value":"u32","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" x-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ x-coordinate of diff.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15607,"byte_end":15632,"line_start":470,"line_end":470,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":51},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15687,"byte_end":15688,"line_start":473,"line_end":473,"column_start":9,"column_end":10},"name":"y","qualname":"::utils::Diff::y","value":"u32","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" y-coordinate of diff.\n","sig":null,"attributes":[{"value":"/ y-coordinate of diff.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15653,"byte_end":15678,"line_start":472,"line_end":472,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":52},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15742,"byte_end":15750,"line_start":475,"line_end":475,"column_start":9,"column_end":17},"name":"expected","qualname":"::utils::Diff::expected","value":"P","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Pixel value in expected image.\n","sig":null,"attributes":[{"value":"/ Pixel value in expected image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15699,"byte_end":15733,"line_start":474,"line_end":474,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":53},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15800,"byte_end":15806,"line_start":477,"line_end":477,"column_start":9,"column_end":15},"name":"actual","qualname":"::utils::Diff::actual","value":"P","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Pixel value in actual image.\n","sig":null,"attributes":[{"value":"/ Pixel value in actual image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15759,"byte_end":15791,"line_start":476,"line_end":476,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15905,"byte_end":15925,"line_start":481,"line_end":481,"column_start":8,"column_end":28},"name":"describe_pixel_diffs","qualname":"::utils::describe_pixel_diffs","value":"pub fn describe_pixel_diffs<I, J, P>(&I, &J, &[Diff<P>]) -> String where\nP: Pixel, P::Subpixel: fmt::Debug, I: GenericImage<Pixel = P>,\nJ: GenericImage<Pixel = P>","parent":null,"children":[],"decl_id":null,"docs":" Gives a summary description of a list of pixel diffs for use in error messages.\n","sig":null,"attributes":[{"value":"/ Gives a summary description of a list of pixel diffs for use in error messages.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":15814,"byte_end":15897,"line_start":480,"line_end":480,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":81},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21322,"byte_end":21341,"line_start":652,"line_end":652,"column_start":8,"column_end":27},"name":"load_image_or_panic","qualname":"::utils::load_image_or_panic","value":"pub fn load_image_or_panic<P: AsRef<Path> + fmt::Debug>(P) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Loads image at given path, panicking on failure.\n","sig":null,"attributes":[{"value":"/ Loads image at given path, panicking on failure.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21262,"byte_end":21314,"line_start":651,"line_end":651,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":83},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21667,"byte_end":21683,"line_start":659,"line_end":659,"column_start":8,"column_end":24},"name":"gray_bench_image","qualname":"::utils::gray_bench_image","value":"pub fn gray_bench_image(u32, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Gray image to use in benchmarks. This is neither noise nor\n similar to natural images - it's just a convenience method\n to produce an image that's not constant.\n","sig":null,"attributes":[{"value":"/ Gray image to use in benchmarks. This is neither noise nor","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21489,"byte_end":21551,"line_start":656,"line_end":656,"column_start":1,"column_end":63}},{"value":"/ similar to natural images - it's just a convenience method","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21552,"byte_end":21614,"line_start":657,"line_end":657,"column_start":1,"column_end":63}},{"value":"/ to produce an image that's not constant.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21615,"byte_end":21659,"line_start":658,"line_end":658,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":22056,"byte_end":22071,"line_start":671,"line_end":671,"column_start":8,"column_end":23},"name":"rgb_bench_image","qualname":"::utils::rgb_bench_image","value":"pub fn rgb_bench_image(u32, u32) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" RGB image to use in benchmarks. See comment on `gray_bench_image`.\n","sig":null,"attributes":[{"value":"/ RGB image to use in benchmarks. See comment on `gray_bench_image`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/utils.rs","byte_start":21978,"byte_end":22048,"line_start":670,"line_end":670,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":86},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"contrast","qualname":"::contrast","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":1899},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":" Functions for manipulating the contrast of images.\n","sig":null,"attributes":[{"value":"/ Functions for manipulating the contrast of images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":23748,"byte_end":23802,"line_start":1,"line_end":1,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24399,"byte_end":24417,"line_start":15,"line_end":15,"column_start":8,"column_end":26},"name":"adaptive_threshold","qualname":"::contrast::adaptive_threshold","value":"pub fn adaptive_threshold(&GrayImage, u32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Applies an adaptive threshold to an image.","sig":null,"attributes":[{"value":"/ Applies an adaptive threshold to an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24059,"byte_end":24105,"line_start":10,"line_end":10,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24106,"byte_end":24109,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This algorithm compares each pixel's brightness with the average brightness of the pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24110,"byte_end":24203,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ in the (2 * `block_radius` + 1) square block centered on it. If the pixel if at least as bright","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24204,"byte_end":24303,"line_start":13,"line_end":13,"column_start":1,"column_end":100}},{"value":"/ as the threshold then it will have a value of 255 in the output image, otherwise 0.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":24304,"byte_end":24391,"line_start":14,"line_end":14,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":25724,"byte_end":25734,"line_start":48,"line_end":48,"column_start":8,"column_end":18},"name":"otsu_level","qualname":"::contrast::otsu_level","value":"pub fn otsu_level(&GrayImage) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the [Otsu threshold level] of an 8bpp image.","sig":null,"attributes":[{"value":"/ Returns the [Otsu threshold level] of an 8bpp image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":25582,"byte_end":25638,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":25639,"byte_end":25642,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ [Otsu threshold level]: https://en.wikipedia.org/wiki/Otsu%27s_method","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":25643,"byte_end":25716,"line_start":47,"line_end":47,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":107},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28097,"byte_end":28106,"line_start":124,"line_end":124,"column_start":8,"column_end":17},"name":"threshold","qualname":"::contrast::threshold","value":"pub fn threshold(&GrayImage, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a binarized image from an input 8bpp grayscale image\n obtained by applying the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Returns a binarized image from an input 8bpp grayscale image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27503,"byte_end":27567,"line_start":101,"line_end":101,"column_start":1,"column_end":65}},{"value":"/ obtained by applying the given threshold. Pixels with intensity","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27568,"byte_end":27635,"line_start":102,"line_end":102,"column_start":1,"column_end":68}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27636,"byte_end":27694,"line_start":103,"line_end":103,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27695,"byte_end":27698,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27699,"byte_end":27713,"line_start":105,"line_end":105,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27714,"byte_end":27721,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27722,"byte_end":27747,"line_start":107,"line_end":107,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27748,"byte_end":27766,"line_start":108,"line_end":108,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27767,"byte_end":27796,"line_start":109,"line_end":109,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27797,"byte_end":27814,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27815,"byte_end":27854,"line_start":111,"line_end":111,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27855,"byte_end":27858,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27859,"byte_end":27887,"line_start":113,"line_end":113,"column_start":1,"column_end":29}},{"value":"/     10, 80, 20;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27888,"byte_end":27907,"line_start":114,"line_end":114,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27908,"byte_end":27928,"line_start":115,"line_end":115,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27929,"byte_end":27932,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27933,"byte_end":27967,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27968,"byte_end":27988,"line_start":118,"line_end":118,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":27989,"byte_end":28010,"line_start":119,"line_end":119,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28011,"byte_end":28014,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(threshold(&image, 50), thresholded);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28015,"byte_end":28073,"line_start":121,"line_end":121,"column_start":1,"column_end":59}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28074,"byte_end":28081,"line_start":122,"line_end":122,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28082,"byte_end":28089,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":108},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28846,"byte_end":28859,"line_start":155,"line_end":155,"column_start":8,"column_end":21},"name":"threshold_mut","qualname":"::contrast::threshold_mut","value":"pub fn threshold_mut(&mut GrayImage, u8)","parent":null,"children":[],"decl_id":null,"docs":" Mutates given image to form a binarized version produced by applying\n the given threshold. Pixels with intensity\n equal to the threshold are assigned to the background.","sig":null,"attributes":[{"value":"/ Mutates given image to form a binarized version produced by applying","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28234,"byte_end":28306,"line_start":130,"line_end":130,"column_start":1,"column_end":73}},{"value":"/ the given threshold. Pixels with intensity","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28307,"byte_end":28353,"line_start":131,"line_end":131,"column_start":1,"column_end":47}},{"value":"/ equal to the threshold are assigned to the background.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28354,"byte_end":28412,"line_start":132,"line_end":132,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28413,"byte_end":28416,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28417,"byte_end":28431,"line_start":134,"line_end":134,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28432,"byte_end":28439,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28440,"byte_end":28465,"line_start":136,"line_end":136,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28466,"byte_end":28484,"line_start":137,"line_end":137,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28485,"byte_end":28514,"line_start":138,"line_end":138,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28515,"byte_end":28532,"line_start":139,"line_end":139,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::threshold_mut;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28533,"byte_end":28576,"line_start":140,"line_end":140,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28577,"byte_end":28580,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ let mut image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28581,"byte_end":28613,"line_start":142,"line_end":142,"column_start":1,"column_end":33}},{"value":"/     10, 80, 20;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28614,"byte_end":28633,"line_start":143,"line_end":143,"column_start":1,"column_end":20}},{"value":"/     50, 90, 70);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28634,"byte_end":28654,"line_start":144,"line_end":144,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28655,"byte_end":28658,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ let thresholded = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28659,"byte_end":28693,"line_start":146,"line_end":146,"column_start":1,"column_end":35}},{"value":"/     0, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28694,"byte_end":28714,"line_start":147,"line_end":147,"column_start":1,"column_end":21}},{"value":"/     0, 255, 255);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28715,"byte_end":28736,"line_start":148,"line_end":148,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28737,"byte_end":28740,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ threshold_mut(&mut image, 50);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28741,"byte_end":28775,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28776,"byte_end":28779,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(image, thresholded);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28780,"byte_end":28822,"line_start":152,"line_end":152,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28823,"byte_end":28830,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28831,"byte_end":28838,"line_start":154,"line_end":154,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":109},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":29164,"byte_end":29186,"line_start":163,"line_end":163,"column_start":8,"column_end":30},"name":"equalize_histogram_mut","qualname":"::contrast::equalize_histogram_mut","value":"pub fn equalize_histogram_mut(&mut GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image in place. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image in place. See also","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":28987,"byte_end":29060,"line_start":161,"line_end":161,"column_start":1,"column_end":74}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":29061,"byte_end":29156,"line_start":162,"line_end":162,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":111},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":29986,"byte_end":30004,"line_start":181,"line_end":181,"column_start":8,"column_end":26},"name":"equalize_histogram","qualname":"::contrast::equalize_histogram","value":"pub fn equalize_histogram(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Equalises the histogram of an 8bpp grayscale image. See also\n [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).\n","sig":null,"attributes":[{"value":"/ Equalises the histogram of an 8bpp grayscale image. See also","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":29818,"byte_end":29882,"line_start":179,"line_end":179,"column_start":1,"column_end":65}},{"value":"/ [histogram equalization (wikipedia)](https://en.wikipedia.org/wiki/Histogram_equalization).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":29883,"byte_end":29978,"line_start":180,"line_end":180,"column_start":1,"column_end":96}}]},{"kind":"Function","id":{"krate":0,"index":112},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30264,"byte_end":30283,"line_start":189,"line_end":189,"column_start":8,"column_end":27},"name":"match_histogram_mut","qualname":"::contrast::match_histogram_mut","value":"pub fn match_histogram_mut(&mut GrayImage, &GrayImage)","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image in place so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image in place so that its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30121,"byte_end":30189,"line_start":187,"line_end":187,"column_start":1,"column_end":69}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30190,"byte_end":30256,"line_start":188,"line_end":188,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":113},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30728,"byte_end":30743,"line_start":201,"line_end":201,"column_start":8,"column_end":23},"name":"match_histogram","qualname":"::contrast::match_histogram","value":"pub fn match_histogram(&GrayImage, &GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Adjusts contrast of an 8bpp grayscale image so that its\n histogram is as close as possible to that of the target image.\n","sig":null,"attributes":[{"value":"/ Adjusts contrast of an 8bpp grayscale image so that its","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30594,"byte_end":30653,"line_start":199,"line_end":199,"column_start":1,"column_end":60}},{"value":"/ histogram is as close as possible to that of the target image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":30654,"byte_end":30720,"line_start":200,"line_end":200,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33053,"byte_end":33069,"line_start":275,"line_end":275,"column_start":8,"column_end":24},"name":"stretch_contrast","qualname":"::contrast::stretch_contrast","value":"pub fn stretch_contrast(&GrayImage, u8, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32073,"byte_end":32171,"line_start":243,"line_end":243,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32172,"byte_end":32175,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ Is it common to choose `upper` and `lower` values using image percentiles - see [`percentile`](../stats/fn.percentile.html).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32176,"byte_end":32304,"line_start":245,"line_end":245,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32305,"byte_end":32308,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32309,"byte_end":32323,"line_start":247,"line_end":247,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32324,"byte_end":32331,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32332,"byte_end":32357,"line_start":249,"line_end":249,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32358,"byte_end":32376,"line_start":250,"line_end":250,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32377,"byte_end":32406,"line_start":251,"line_end":251,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32407,"byte_end":32424,"line_start":252,"line_end":252,"column_start":1,"column_end":18}},{"value":"/ use imageproc::contrast::stretch_contrast;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32425,"byte_end":32471,"line_start":253,"line_end":253,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32472,"byte_end":32475,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32476,"byte_end":32504,"line_start":255,"line_end":255,"column_start":1,"column_end":29}},{"value":"/      0,   20,  50;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32505,"byte_end":32527,"line_start":256,"line_end":256,"column_start":1,"column_end":23}},{"value":"/     80,  100, 255);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32528,"byte_end":32551,"line_start":257,"line_end":257,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32552,"byte_end":32555,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ let lower = 20;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32556,"byte_end":32575,"line_start":259,"line_end":259,"column_start":1,"column_end":20}},{"value":"/ let upper = 100;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32576,"byte_end":32596,"line_start":260,"line_end":260,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32597,"byte_end":32600,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ // Pixel intensities between 20 and 100 are linearly","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32601,"byte_end":32657,"line_start":262,"line_end":262,"column_start":1,"column_end":57}},{"value":"/ // scaled so that 20 is mapped to 0 and 100 is mapped to 255.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32658,"byte_end":32723,"line_start":263,"line_end":263,"column_start":1,"column_end":66}},{"value":"/ // Pixel intensities less than 20 are sent to 0 and pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32724,"byte_end":32785,"line_start":264,"line_end":264,"column_start":1,"column_end":62}},{"value":"/ // intensities greater than 100 are sent to 255.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32786,"byte_end":32838,"line_start":265,"line_end":265,"column_start":1,"column_end":53}},{"value":"/ let stretched = stretch_contrast(&image, lower, upper);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32839,"byte_end":32898,"line_start":266,"line_end":266,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32899,"byte_end":32902,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32903,"byte_end":32934,"line_start":268,"line_end":268,"column_start":1,"column_end":32}},{"value":"/       0,   0,  95;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32935,"byte_end":32957,"line_start":269,"line_end":269,"column_start":1,"column_end":23}},{"value":"/     191, 255, 255);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32958,"byte_end":32981,"line_start":270,"line_end":270,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32982,"byte_end":32985,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(stretched, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":32986,"byte_end":33029,"line_start":272,"line_end":272,"column_start":1,"column_end":44}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33030,"byte_end":33037,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33038,"byte_end":33045,"line_start":274,"line_end":274,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33422,"byte_end":33442,"line_start":284,"line_end":284,"column_start":8,"column_end":28},"name":"stretch_contrast_mut","qualname":"::contrast::stretch_contrast_mut","value":"pub fn stretch_contrast_mut(&mut GrayImage, u8, u8)","parent":null,"children":[],"decl_id":null,"docs":" Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","sig":null,"attributes":[{"value":"/ Linearly stretches the contrast in an image in place, sending `lower` to `0u8` and `upper` to `2558u8`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33220,"byte_end":33327,"line_start":281,"line_end":281,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33328,"byte_end":33331,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ See the [`stretch_contrast`](fn.stretch_contrast.html) documentation for more.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/contrast.rs","byte_start":33332,"byte_end":33414,"line_start":283,"line_end":283,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"corners","qualname":"::corners","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":1312},{"krate":0,"index":1324},{"krate":0,"index":1322},{"krate":0,"index":1320},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153}],"decl_id":null,"docs":" Functions for detecting corners, also known as interest points.\n","sig":null,"attributes":[{"value":"/ Functions for detecting corners, also known as interest points.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":41680,"byte_end":41747,"line_start":1,"line_end":1,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42013,"byte_end":42019,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Corner","qualname":"::corners::Corner","value":"Corner { x, y, score }","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":1315}],"decl_id":null,"docs":" A location and score for a detected corner.\n The scores need not be comparable between different\n corner detectors.\n","sig":null,"attributes":[{"value":"/ A location and score for a detected corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":41835,"byte_end":41882,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ The scores need not be comparable between different","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":41883,"byte_end":41938,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/ corner detectors.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":41939,"byte_end":41960,"line_start":8,"line_end":8,"column_start":1,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42066,"byte_end":42067,"line_start":12,"line_end":12,"column_start":9,"column_end":10},"name":"x","qualname":"::corners::Corner::x","value":"u32","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" x-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ x-coordinate of the corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42026,"byte_end":42057,"line_start":11,"line_end":11,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1314},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42118,"byte_end":42119,"line_start":14,"line_end":14,"column_start":9,"column_end":10},"name":"y","qualname":"::corners::Corner::y","value":"u32","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" y-coordinate of the corner.\n","sig":null,"attributes":[{"value":"/ y-coordinate of the corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42078,"byte_end":42109,"line_start":13,"line_end":13,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1315},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42172,"byte_end":42177,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"score","qualname":"::corners::Corner::score","value":"f32","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" Score of the detected corner.\n","sig":null,"attributes":[{"value":"/ Score of the detected corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42130,"byte_end":42163,"line_start":15,"line_end":15,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42268,"byte_end":42271,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Corner>::new","value":"pub fn new(u32, u32, f32) -> Corner","parent":null,"children":[],"decl_id":null,"docs":" A corner at location (x, y) with score `score`.\n","sig":null,"attributes":[{"value":"/ A corner at location (x, y) with score `score`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42205,"byte_end":42256,"line_start":20,"line_end":20,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":136},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43313,"byte_end":43317,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Nine","qualname":"::corners::Fast::Nine","value":"Fast::Nine","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Corners require a section of length as least nine.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least nine.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43254,"byte_end":43308,"line_start":53,"line_end":53,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":138},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43384,"byte_end":43390,"line_start":56,"line_end":56,"column_start":5,"column_end":11},"name":"Twelve","qualname":"::corners::Fast::Twelve","value":"Fast::Twelve","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Corners require a section of length as least twelve.\n","sig":null,"attributes":[{"value":"/ Corners require a section of length as least twelve.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43323,"byte_end":43379,"line_start":55,"line_end":55,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":135},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43243,"byte_end":43247,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Fast","qualname":"::corners::Fast","value":"pub enum Fast {\n\n    /// Corners require a section of length as least nine.\n    Nine,\n\n    /// Corners require a section of length as least twelve.\n    Twelve,\n}","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":138}],"decl_id":null,"docs":" Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)\n corner detector. These classify a point based on its intensity relative to the 16 pixels\n in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a\n corner if all pixels in a sufficiently long contiguous section of this circle either\n all have intensity greater than I + t or all have intensity less than\n I - t, for some user-provided threshold t. The score of a corner is\n the greatest threshold for which the given pixel still qualifies as\n a corner.\n","sig":null,"attributes":[{"value":"/ Variants of the [FAST](https://en.wikipedia.org/wiki/Features_from_accelerated_segment_test)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42628,"byte_end":42724,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ corner detector. These classify a point based on its intensity relative to the 16 pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42725,"byte_end":42817,"line_start":45,"line_end":45,"column_start":1,"column_end":93}},{"value":"/ in the Bresenham circle of radius 3 around it. A point P with intensity I is detected as a","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42818,"byte_end":42912,"line_start":46,"line_end":46,"column_start":1,"column_end":95}},{"value":"/ corner if all pixels in a sufficiently long contiguous section of this circle either","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42913,"byte_end":43001,"line_start":47,"line_end":47,"column_start":1,"column_end":89}},{"value":"/ all have intensity greater than I + t or all have intensity less than","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43002,"byte_end":43075,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ I - t, for some user-provided threshold t. The score of a corner is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43076,"byte_end":43147,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/ the greatest threshold for which the given pixel still qualifies as","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43148,"byte_end":43219,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ a corner.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43220,"byte_end":43233,"line_start":51,"line_end":51,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":140},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43467,"byte_end":43481,"line_start":60,"line_end":60,"column_start":8,"column_end":22},"name":"corners_fast12","qualname":"::corners::corners_fast12","value":"pub fn corners_fast12(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-12 features. See comment on `Fast`.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-12 features. See comment on `Fast`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43395,"byte_end":43459,"line_start":59,"line_end":59,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43989,"byte_end":44002,"line_start":77,"line_end":77,"column_start":8,"column_end":21},"name":"corners_fast9","qualname":"::corners::corners_fast9","value":"pub fn corners_fast9(&GrayImage, u8) -> Vec<Corner>","parent":null,"children":[],"decl_id":null,"docs":" Finds corners using FAST-9 features. See comment on Fast enum.\n","sig":null,"attributes":[{"value":"/ Finds corners using FAST-9 features. See comment on Fast enum.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":43915,"byte_end":43981,"line_start":76,"line_end":76,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44862,"byte_end":44879,"line_start":100,"line_end":100,"column_start":8,"column_end":25},"name":"fast_corner_score","qualname":"::corners::fast_corner_score","value":"pub fn fast_corner_score(&GrayImage, u8, u32, u32, Fast) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The score of a corner detected using the FAST\n detector is the largest threshold for which this\n pixel is still a corner. We input the threshold at which\n the corner was detected as a lower bound on the search.\n Note that the corner check uses a strict inequality, so if\n the smallest intensity difference between the center pixel\n and a corner pixel is n then the corner will have a score of n - 1.\n","sig":null,"attributes":[{"value":"/ The score of a corner detected using the FAST","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44433,"byte_end":44482,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/ detector is the largest threshold for which this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44483,"byte_end":44535,"line_start":94,"line_end":94,"column_start":1,"column_end":53}},{"value":"/ pixel is still a corner. We input the threshold at which","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44536,"byte_end":44596,"line_start":95,"line_end":95,"column_start":1,"column_end":61}},{"value":"/ the corner was detected as a lower bound on the search.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44597,"byte_end":44656,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ Note that the corner check uses a strict inequality, so if","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44657,"byte_end":44719,"line_start":97,"line_end":97,"column_start":1,"column_end":63}},{"value":"/ the smallest intensity difference between the center pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44720,"byte_end":44782,"line_start":98,"line_end":98,"column_start":1,"column_end":63}},{"value":"/ and a corner pixel is n then the corner will have a score of n - 1.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":44783,"byte_end":44854,"line_start":99,"line_end":99,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":156},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"definitions","qualname":"::definitions","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":1913},{"krate":0,"index":159},{"krate":0,"index":1915},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":1919},{"krate":0,"index":162},{"krate":0,"index":1921},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":1925},{"krate":0,"index":165},{"krate":0,"index":1927},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":1325},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1357},{"krate":0,"index":1359},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1397},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1419}],"decl_id":null,"docs":" Trait definitions and type aliases.\n","sig":null,"attributes":[{"value":"/ Trait definitions and type aliases.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":58998,"byte_end":59037,"line_start":1,"line_end":1,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59675,"byte_end":59680,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Image","qualname":"::definitions::Image","value":"ImageBuffer<P, Vec<<P as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.\n Most operations in this library only support inputs of type `Image`, rather\n than arbitrary `image::GenericImage`s. This is obviously less flexible, but\n has the advantage of allowing many functions to be more performant. We may want\n to add more flexibility later, but this should not be at the expense of performance.\n When specialisation lands we should be able to do this by defining traits for images\n with contiguous storage.\n","sig":null,"attributes":[{"value":"/ An `ImageBuffer` containing Pixels of type P with storage `Vec<P::Subpixel>`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59133,"byte_end":59214,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/ Most operations in this library only support inputs of type `Image`, rather","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59215,"byte_end":59294,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ than arbitrary `image::GenericImage`s. This is obviously less flexible, but","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59295,"byte_end":59374,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ has the advantage of allowing many functions to be more performant. We may want","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59375,"byte_end":59458,"line_start":9,"line_end":9,"column_start":1,"column_end":84}},{"value":"/ to add more flexibility later, but this should not be at the expense of performance.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59459,"byte_end":59547,"line_start":10,"line_end":10,"column_start":1,"column_end":89}},{"value":"/ When specialisation lands we should be able to do this by defining traits for images","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59548,"byte_end":59636,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ with contiguous storage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59637,"byte_end":59665,"line_start":12,"line_end":12,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":172},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59785,"byte_end":59793,"line_start":16,"line_end":16,"column_start":11,"column_end":19},"name":"HasBlack","qualname":"::definitions::HasBlack","value":"HasBlack","parent":null,"children":[{"krate":0,"index":173}],"decl_id":null,"docs":" Pixels which have a named Black value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named Black value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59732,"byte_end":59774,"line_start":15,"line_end":15,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59847,"byte_end":59852,"line_start":18,"line_end":18,"column_start":8,"column_end":13},"name":"black","qualname":"::definitions::HasBlack::black","value":"pub fn black() -> Self","parent":{"krate":0,"index":172},"children":[],"decl_id":null,"docs":" Returns a black pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a black pixel of this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59800,"byte_end":59839,"line_start":17,"line_end":17,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":174},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59920,"byte_end":59928,"line_start":22,"line_end":22,"column_start":11,"column_end":19},"name":"HasWhite","qualname":"::definitions::HasWhite","value":"HasWhite","parent":null,"children":[{"krate":0,"index":175}],"decl_id":null,"docs":" Pixels which have a named White value.\n","sig":null,"attributes":[{"value":"/ Pixels which have a named White value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59867,"byte_end":59909,"line_start":21,"line_end":21,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59982,"byte_end":59987,"line_start":24,"line_end":24,"column_start":8,"column_end":13},"name":"white","qualname":"::definitions::HasWhite::white","value":"pub fn white() -> Self","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":" Returns a white pixel of this type.\n","sig":null,"attributes":[{"value":"/ Returns a white pixel of this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":59935,"byte_end":59974,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":177},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61498,"byte_end":61506,"line_start":81,"line_end":81,"column_start":11,"column_end":19},"name":"Position","qualname":"::definitions::Position","value":"Position","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" Something with a 2d position.\n","sig":null,"attributes":[{"value":"/ Something with a 2d position.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61454,"byte_end":61487,"line_start":80,"line_end":80,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61538,"byte_end":61539,"line_start":83,"line_end":83,"column_start":8,"column_end":9},"name":"x","qualname":"::definitions::Position::x","value":"pub fn x(&Self) -> u32","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" x-coordinate.\n","sig":null,"attributes":[{"value":"/ x-coordinate.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61513,"byte_end":61530,"line_start":82,"line_end":82,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61584,"byte_end":61585,"line_start":85,"line_end":85,"column_start":8,"column_end":9},"name":"y","qualname":"::definitions::Position::y","value":"pub fn y(&Self) -> u32","parent":{"krate":0,"index":177},"children":[],"decl_id":null,"docs":" y-coordinate.\n","sig":null,"attributes":[{"value":"/ y-coordinate.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61559,"byte_end":61576,"line_start":84,"line_end":84,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61642,"byte_end":61647,"line_start":89,"line_end":89,"column_start":11,"column_end":16},"name":"Score","qualname":"::definitions::Score","value":"Score","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":" Something with a score.\n","sig":null,"attributes":[{"value":"/ Something with a score.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61604,"byte_end":61631,"line_start":88,"line_end":88,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61685,"byte_end":61690,"line_start":91,"line_end":91,"column_start":8,"column_end":13},"name":"score","qualname":"::definitions::Score::score","value":"pub fn score(&Self) -> f32","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Score of this item.\n","sig":null,"attributes":[{"value":"/ Score of this item.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61654,"byte_end":61677,"line_start":90,"line_end":90,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":182},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61837,"byte_end":61842,"line_start":96,"line_end":96,"column_start":11,"column_end":16},"name":"Clamp","qualname":"::definitions::Clamp","value":"Clamp<T>","parent":null,"children":[{"krate":0,"index":184}],"decl_id":null,"docs":" A type to which we can clamp a value of type T.\n Implementations are not required to handle `NaN`s gracefully.\n","sig":null,"attributes":[{"value":"/ A type to which we can clamp a value of type T.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61709,"byte_end":61760,"line_start":94,"line_end":94,"column_start":1,"column_end":52}},{"value":"/ Implementations are not required to handle `NaN`s gracefully.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61761,"byte_end":61826,"line_start":95,"line_end":95,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61905,"byte_end":61910,"line_start":98,"line_end":98,"column_start":8,"column_end":13},"name":"clamp","qualname":"::definitions::Clamp::clamp","value":"pub fn clamp(T) -> Self","parent":{"krate":0,"index":182},"children":[],"decl_id":null,"docs":" Clamp `x` to a valid value for this type.\n","sig":null,"attributes":[{"value":"/ Clamp `x` to a valid value for this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/definitions.rs","byte_start":61852,"byte_end":61897,"line_start":97,"line_end":97,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":187},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distance_transform","qualname":"::distance_transform","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":1945},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":1421},{"krate":0,"index":1436},{"krate":0,"index":1434},{"krate":0,"index":1432},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":1437},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1444},{"krate":0,"index":1442},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":227},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":241},{"krate":0,"index":245},{"krate":0,"index":248}],"decl_id":null,"docs":" Functions for computing distance transforms - the distance of each pixel in an\n image from the nearest pixel of interest.\n","sig":null,"attributes":[{"value":"/ Functions for computing distance transforms - the distance of each pixel in an","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64426,"byte_end":64508,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/ image from the nearest pixel of interest.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64509,"byte_end":64554,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65643,"byte_end":65645,"line_start":25,"line_end":25,"column_start":5,"column_end":7},"name":"L1","qualname":"::distance_transform::Norm::L1","value":"Norm::L1","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).\n Also known as the Manhattan or city block norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65514,"byte_end":65582,"line_start":23,"line_end":23,"column_start":5,"column_end":73}},{"value":"/ Also known as the Manhattan or city block norm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65587,"byte_end":65638,"line_start":24,"line_end":24,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65771,"byte_end":65775,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"LInf","qualname":"::distance_transform::Norm::LInf","value":"Norm::LInf","parent":{"krate":0,"index":1421},"children":[],"decl_id":null,"docs":" Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).\n Also known as the chessboard norm.\n","sig":null,"attributes":[{"value":"/ Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65651,"byte_end":65723,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ Also known as the chessboard norm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65728,"byte_end":65766,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65503,"byte_end":65507,"line_start":22,"line_end":22,"column_start":10,"column_end":14},"name":"Norm","qualname":"::distance_transform::Norm","value":"pub enum Norm {\n\n    /// Defines d((x1, y1), (x2, y2)) to be abs(x1 - x2) + abs(y1 - y2).\n    /// Also known as the Manhattan or city block norm.\n    L1,\n\n    /// Defines d((x1, y1), (x2, y2)) to be max(abs(x1 - x2), abs(y1 - y2)).\n    /// Also known as the chessboard norm.\n    LInf,\n}","parent":null,"children":[{"krate":0,"index":1422},{"krate":0,"index":1424}],"decl_id":null,"docs":" How to measure distance between coordinates.\n See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","sig":null,"attributes":[{"value":"/ How to measure distance between coordinates.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64702,"byte_end":64750,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64751,"byte_end":64841,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64842,"byte_end":64845,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that this enum doesn't currently include the `L2` norm. As `Norm`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64846,"byte_end":64920,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ is used by the [`morphology`](../morphology/index.html) functions, this means that we","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":64921,"byte_end":65010,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/ don't support using the `L2` norm for any of those functions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65011,"byte_end":65076,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65077,"byte_end":65080,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This module does support calculating the `L2` distance function, via the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65081,"byte_end":65157,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ [`euclidean_squared_distance_transform`](fn.euclidean_squared_distance_transform.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65158,"byte_end":65248,"line_start":17,"line_end":17,"column_start":1,"column_end":91}},{"value":"/ function, but the signature of this function is not currently compatible with those for","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65249,"byte_end":65340,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ computing `L1` and `LInf` distance transforms. It would be nice to unify these functions","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65341,"byte_end":65433,"line_start":19,"line_end":19,"column_start":1,"column_end":93}},{"value":"/ in future.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65434,"byte_end":65448,"line_start":20,"line_end":20,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":199},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67049,"byte_end":67067,"line_start":76,"line_end":76,"column_start":8,"column_end":26},"name":"distance_transform","qualname":"::distance_transform::distance_transform","value":"pub fn distance_transform(&GrayImage, Norm) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns an image showing the distance of each pixel from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Returns an image showing the distance of each pixel from a foreground pixel in the original image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65780,"byte_end":65882,"line_start":31,"line_end":31,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65883,"byte_end":65886,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65887,"byte_end":65967,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ has a bit-depth of 8, distances saturate at 255.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":65968,"byte_end":66020,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66021,"byte_end":66024,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66025,"byte_end":66039,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66040,"byte_end":66047,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66048,"byte_end":66073,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66074,"byte_end":66092,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66093,"byte_end":66122,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66123,"byte_end":66140,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66141,"byte_end":66166,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/ use imageproc::distance_transform::{distance_transform, Norm};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66167,"byte_end":66233,"line_start":43,"line_end":43,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66234,"byte_end":66237,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66238,"byte_end":66266,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66267,"byte_end":66297,"line_start":46,"line_end":46,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66298,"byte_end":66328,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/     0,   0,   1,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66329,"byte_end":66359,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66360,"byte_end":66390,"line_start":49,"line_end":49,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66391,"byte_end":66420,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66421,"byte_end":66427,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66428,"byte_end":66431,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66432,"byte_end":66446,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ let l1_distances = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66447,"byte_end":66482,"line_start":54,"line_end":54,"column_start":1,"column_end":36}},{"value":"/     4,   3,   2,   3,   4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66483,"byte_end":66513,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66514,"byte_end":66544,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66545,"byte_end":66575,"line_start":57,"line_end":57,"column_start":1,"column_end":31}},{"value":"/     3,   2,   1,   2,   3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66576,"byte_end":66606,"line_start":58,"line_end":58,"column_start":1,"column_end":31}},{"value":"/     4,   3,   2,   3,   4","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66607,"byte_end":66636,"line_start":59,"line_end":59,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66637,"byte_end":66643,"line_start":60,"line_end":60,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66644,"byte_end":66647,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::L1), l1_distances);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66648,"byte_end":66722,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66723,"byte_end":66726,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66727,"byte_end":66743,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/ let linf_distances = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66744,"byte_end":66781,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/     2,   2,   2,   2,   2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66782,"byte_end":66812,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66813,"byte_end":66843,"line_start":67,"line_end":67,"column_start":1,"column_end":31}},{"value":"/     2,   1,   0,   1,   2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66844,"byte_end":66874,"line_start":68,"line_end":68,"column_start":1,"column_end":31}},{"value":"/     2,   1,   1,   1,   2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66875,"byte_end":66905,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     2,   2,   2,   2,   2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66906,"byte_end":66935,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66936,"byte_end":66942,"line_start":71,"line_end":71,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66943,"byte_end":66946,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(distance_transform(&image, Norm::LInf), linf_distances);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":66947,"byte_end":67025,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67026,"byte_end":67033,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67034,"byte_end":67041,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67560,"byte_end":67582,"line_start":88,"line_end":88,"column_start":8,"column_end":30},"name":"distance_transform_mut","qualname":"::distance_transform::distance_transform_mut","value":"pub fn distance_transform_mut(&mut GrayImage, Norm)","parent":null,"children":[],"decl_id":null,"docs":" Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","sig":null,"attributes":[{"value":"/ Updates an image in place so that each pixel contains its distance from a foreground pixel in the original image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67202,"byte_end":67319,"line_start":82,"line_end":82,"column_start":1,"column_end":118}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67320,"byte_end":67323,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ A pixel belongs to the foreground if it has non-zero intensity. As the image has a bit-depth of 8,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67324,"byte_end":67426,"line_start":84,"line_end":84,"column_start":1,"column_end":103}},{"value":"/ distances saturate at 255.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67427,"byte_end":67457,"line_start":85,"line_end":85,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67458,"byte_end":67461,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See the [`distance_transform`](fn.distance_transform.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":67462,"byte_end":67552,"line_start":87,"line_end":87,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70983,"byte_end":71019,"line_start":184,"line_end":184,"column_start":8,"column_end":44},"name":"euclidean_squared_distance_transform","qualname":"::distance_transform::euclidean_squared_distance_transform","value":"pub fn euclidean_squared_distance_transform(&Image<Luma<u8>>)\n-> Image<Luma<f64>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the\n nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","sig":null,"attributes":[{"value":"/ Computes the square of the `L2` (Euclidean) distance transform of `image`. Distances are to the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70554,"byte_end":70653,"line_start":177,"line_end":177,"column_start":1,"column_end":100}},{"value":"/ nearest foreground pixel, where a pixel is counted as foreground if it has non-zero value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70654,"byte_end":70748,"line_start":178,"line_end":178,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70749,"byte_end":70752,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Uses the algorithm from [Distance Transforms of Sampled Functions] to achieve time linear","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70753,"byte_end":70846,"line_start":180,"line_end":180,"column_start":1,"column_end":94}},{"value":"/ in the size of the image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70847,"byte_end":70876,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70877,"byte_end":70880,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ [Distance Transforms of Sampled Functions]: http://www.cs.cornell.edu/~dph/papers%5Cdt.pdf","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":70881,"byte_end":70975,"line_start":183,"line_end":183,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":250},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"drawing","qualname":"::drawing","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","parent":null,"children":[{"krate":0,"index":251},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":1977},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525}],"decl_id":null,"docs":" Helpers for drawing basic shapes on images.\n","sig":null,"attributes":[{"value":"/ Helpers for drawing basic shapes on images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/mod.rs","byte_start":83735,"byte_end":83782,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/bezier.rs","byte_start":85330,"byte_end":85353,"line_start":9,"line_end":9,"column_start":8,"column_end":31},"name":"draw_cubic_bezier_curve","qualname":"::drawing::bezier::draw_cubic_bezier_curve","value":"pub fn draw_cubic_bezier_curve<I>(&I, (f32, f32), (f32, f32), (f32, f32),\n                                  (f32, f32), I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a cubic bezier curve as lies within image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of a cubic bezier curve as lies within image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/bezier.rs","byte_start":85252,"byte_end":85322,"line_start":8,"line_end":8,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/bezier.rs","byte_start":85846,"byte_end":85873,"line_start":28,"line_end":28,"column_start":8,"column_end":35},"name":"draw_cubic_bezier_curve_mut","qualname":"::drawing::bezier::draw_cubic_bezier_curve_mut","value":"pub fn draw_cubic_bezier_curve_mut<C>(&mut C, (f32, f32), (f32, f32),\n                                      (f32, f32), (f32, f32), C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a cubic bezier curve as lies within image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of a cubic bezier curve as lies within image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/bezier.rs","byte_start":85768,"byte_end":85838,"line_start":27,"line_end":27,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":274},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90483,"byte_end":90489,"line_start":50,"line_end":50,"column_start":11,"column_end":17},"name":"Canvas","qualname":"::drawing::canvas::Canvas","value":"Canvas","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" A surface for drawing on - many drawing functions in this\n library are generic over a `Canvas` to allow the user to\n configure e.g. whether to use blending.","sig":null,"attributes":[{"value":"/ A surface for drawing on - many drawing functions in this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88750,"byte_end":88811,"line_start":3,"line_end":3,"column_start":1,"column_end":62}},{"value":"/ library are generic over a `Canvas` to allow the user to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88812,"byte_end":88872,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/ configure e.g. whether to use blending.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88873,"byte_end":88916,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88917,"byte_end":88920,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All instances of `GenericImage` implement `Canvas`, with","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88921,"byte_end":88981,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"/ the behaviour of `draw_pixel` being equivalent to calling","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":88982,"byte_end":89043,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ `set_pixel` with the same arguments.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89044,"byte_end":89084,"line_start":9,"line_end":9,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89085,"byte_end":89088,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`Blend`](struct.Blend.html) for another example implementation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89089,"byte_end":89160,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ of this trait - its implementation of `draw_pixel` alpha-blends","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89161,"byte_end":89228,"line_start":12,"line_end":12,"column_start":1,"column_end":68}},{"value":"/ the input value with the pixel's current value.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89229,"byte_end":89280,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89281,"byte_end":89284,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89285,"byte_end":89299,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89300,"byte_end":89307,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89308,"byte_end":89333,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89334,"byte_end":89352,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89353,"byte_end":89382,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89383,"byte_end":89400,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::{Pixel, Rgba, RgbaImage};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89401,"byte_end":89441,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/ use imageproc::drawing::{Canvas, Blend};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89442,"byte_end":89486,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89487,"byte_end":89490,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // A trivial function which draws on a Canvas","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89491,"byte_end":89540,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/ fn write_a_pixel<C: Canvas>(canvas: &mut C, c: C::Pixel) {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89541,"byte_end":89603,"line_start":25,"line_end":25,"column_start":1,"column_end":63}},{"value":"/     canvas.draw_pixel(0, 0, c);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89604,"byte_end":89639,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89640,"byte_end":89645,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89646,"byte_end":89649,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Background color","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89650,"byte_end":89673,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ let solid_blue = Rgba([0u8, 0u8, 255u8, 255u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89674,"byte_end":89726,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89727,"byte_end":89730,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Drawing color","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89731,"byte_end":89751,"line_start":32,"line_end":32,"column_start":1,"column_end":21}},{"value":"/ let translucent_red = Rgba([255u8, 0u8, 0u8, 127u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89752,"byte_end":89809,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89810,"byte_end":89813,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ // Blended combination of background and drawing colors","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89814,"byte_end":89873,"line_start":35,"line_end":35,"column_start":1,"column_end":60}},{"value":"/ let mut alpha_blended = solid_blue;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89874,"byte_end":89913,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ alpha_blended.blend(&translucent_red);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89914,"byte_end":89956,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89957,"byte_end":89960,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ // The implementation of Canvas for GenericImage overwrites existing pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":89961,"byte_end":90040,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ let mut image = RgbaImage::from_pixel(1, 1, solid_blue);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90041,"byte_end":90101,"line_start":40,"line_end":40,"column_start":1,"column_end":61}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90102,"byte_end":90149,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.get_pixel(0, 0), translucent_red);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90150,"byte_end":90206,"line_start":42,"line_end":42,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90207,"byte_end":90210,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // This behaviour can be customised by using a different Canvas type","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90211,"byte_end":90283,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ let mut image = Blend(RgbaImage::from_pixel(1, 1, solid_blue));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90284,"byte_end":90351,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ write_a_pixel(&mut image, translucent_red);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90352,"byte_end":90399,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(*image.0.get_pixel(0, 0), alpha_blended);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90400,"byte_end":90456,"line_start":47,"line_end":47,"column_start":1,"column_end":57}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90457,"byte_end":90464,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90465,"byte_end":90472,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":275},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90563,"byte_end":90568,"line_start":52,"line_end":52,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::drawing::canvas::Canvas::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The type of `Pixel` that can be drawn on this canvas.\n","sig":null,"attributes":[{"value":"/ The type of `Pixel` that can be drawn on this canvas.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90496,"byte_end":90553,"line_start":51,"line_end":51,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90630,"byte_end":90640,"line_start":55,"line_end":55,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::drawing::canvas::Canvas::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The width and height of this canvas.\n","sig":null,"attributes":[{"value":"/ The width and height of this canvas.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90582,"byte_end":90622,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90705,"byte_end":90710,"line_start":58,"line_end":58,"column_start":8,"column_end":13},"name":"width","qualname":"::drawing::canvas::Canvas::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The width of this canvas.\n","sig":null,"attributes":[{"value":"/ The width of this canvas.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90668,"byte_end":90697,"line_start":57,"line_end":57,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90804,"byte_end":90810,"line_start":63,"line_end":63,"column_start":8,"column_end":14},"name":"height","qualname":"::drawing::canvas::Canvas::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" The height of this canvas.\n","sig":null,"attributes":[{"value":"/ The height of this canvas.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90766,"byte_end":90796,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90914,"byte_end":90923,"line_start":68,"line_end":68,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::drawing::canvas::Canvas::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y).\n","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90866,"byte_end":90906,"line_start":67,"line_end":67,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91137,"byte_end":91147,"line_start":73,"line_end":73,"column_start":8,"column_end":18},"name":"draw_pixel","qualname":"::drawing::canvas::Canvas::draw_pixel","value":"pub fn draw_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Draw a pixel at the given coordinates. `x` and `y`\n should be within `dimensions` - if not then panicking\n is a valid implementation behaviour.\n","sig":null,"attributes":[{"value":"/ Draw a pixel at the given coordinates. `x` and `y`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":90968,"byte_end":91022,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/ should be within `dimensions` - if not then panicking","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91027,"byte_end":91084,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/ is a valid implementation behaviour.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91089,"byte_end":91129,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":287},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91737,"byte_end":91742,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"Blend","qualname":"::drawing::canvas::Blend","value":"","parent":null,"children":[],"decl_id":null,"docs":" A canvas that blends pixels when drawing.","sig":null,"attributes":[{"value":"/ A canvas that blends pixels when drawing.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91580,"byte_end":91625,"line_start":95,"line_end":95,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91626,"byte_end":91629,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ See the documentation for [`Canvas`](trait.Canvas.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91630,"byte_end":91689,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ for an example using this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91690,"byte_end":91725,"line_start":98,"line_end":98,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":290},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91746,"byte_end":91751,"line_start":99,"line_end":99,"column_start":21,"column_end":26},"name":"0","qualname":"::drawing::canvas::Blend::0","value":"I","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":310},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92691,"byte_end":92710,"line_start":15,"line_end":15,"column_start":8,"column_end":27},"name":"draw_hollow_ellipse","qualname":"::drawing::conics::draw_hollow_ellipse","value":"pub fn draw_hollow_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92339,"byte_end":92402,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92403,"byte_end":92546,"line_start":10,"line_end":10,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92547,"byte_end":92550,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92551,"byte_end":92620,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92621,"byte_end":92624,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ (`x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":92625,"byte_end":92683,"line_start":14,"line_end":14,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":312},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93449,"byte_end":93472,"line_start":38,"line_end":38,"column_start":8,"column_end":31},"name":"draw_hollow_ellipse_mut","qualname":"::drawing::conics::draw_hollow_ellipse_mut","value":"pub fn draw_hollow_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93097,"byte_end":93160,"line_start":32,"line_end":32,"column_start":1,"column_end":64}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93161,"byte_end":93304,"line_start":33,"line_end":33,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93305,"byte_end":93308,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93309,"byte_end":93378,"line_start":35,"line_end":35,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93379,"byte_end":93382,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) = 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":93383,"byte_end":93441,"line_start":37,"line_end":37,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":315},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94622,"byte_end":94641,"line_start":70,"line_end":70,"column_start":8,"column_end":27},"name":"draw_filled_ellipse","qualname":"::drawing::conics::draw_filled_ellipse","value":"pub fn draw_filled_ellipse<I>(&I, (i32, i32), i32, i32, I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse, including its contents, as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse, including its contents, as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94244,"byte_end":94332,"line_start":64,"line_end":64,"column_start":1,"column_end":89}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94333,"byte_end":94476,"line_start":65,"line_end":65,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94477,"byte_end":94480,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94481,"byte_end":94550,"line_start":67,"line_end":67,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94551,"byte_end":94554,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":94555,"byte_end":94614,"line_start":69,"line_end":69,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":317},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95406,"byte_end":95429,"line_start":93,"line_end":93,"column_start":8,"column_end":31},"name":"draw_filled_ellipse_mut","qualname":"::drawing::conics::draw_filled_ellipse_mut","value":"pub fn draw_filled_ellipse_mut<C>(&mut C, (i32, i32), i32, i32, C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of an ellipse, including its contents, as lies inside the image bounds.\n Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","sig":null,"attributes":[{"value":"/ Draw as much of an ellipse, including its contents, as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95028,"byte_end":95116,"line_start":87,"line_end":87,"column_start":1,"column_end":89}},{"value":"/ Uses Midpoint Ellipse Drawing Algorithm. (Modified from Bresenham's algorithm) (http://tutsheap.com/c/mid-point-ellipse-drawing-algorithm/)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95117,"byte_end":95260,"line_start":88,"line_end":88,"column_start":1,"column_end":144}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95261,"byte_end":95264,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The ellipse is axis-aligned and satisfies the following equation:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95265,"byte_end":95334,"line_start":90,"line_end":90,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95335,"byte_end":95338,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ `(x^2 / width_radius^2) + (y^2 / height_radius^2) <= 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":95339,"byte_end":95398,"line_start":92,"line_end":92,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":322},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":97780,"byte_end":97798,"line_start":177,"line_end":177,"column_start":8,"column_end":26},"name":"draw_hollow_circle","qualname":"::drawing::conics::draw_hollow_circle","value":"pub fn draw_hollow_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":97711,"byte_end":97772,"line_start":176,"line_end":176,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":324},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":98202,"byte_end":98224,"line_start":194,"line_end":194,"column_start":8,"column_end":30},"name":"draw_hollow_circle_mut","qualname":"::drawing::conics::draw_hollow_circle_mut","value":"pub fn draw_hollow_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":98133,"byte_end":98194,"line_start":193,"line_end":193,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":326},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":99192,"byte_end":99214,"line_start":226,"line_end":226,"column_start":8,"column_end":30},"name":"draw_filled_circle_mut","qualname":"::drawing::conics::draw_filled_circle_mut","value":"pub fn draw_filled_circle_mut<C>(&mut C, (i32, i32), i32, C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle, including its contents, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle, including its contents, as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":99098,"byte_end":99184,"line_start":225,"line_end":225,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":328},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":100418,"byte_end":100436,"line_start":274,"line_end":274,"column_start":8,"column_end":26},"name":"draw_filled_circle","qualname":"::drawing::conics::draw_filled_circle","value":"pub fn draw_filled_circle<I>(&I, (i32, i32), i32, I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a circle and its contents as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a circle and its contents as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/conics.rs","byte_start":100332,"byte_end":100410,"line_start":273,"line_end":273,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/cross.rs","byte_start":102999,"byte_end":103013,"line_start":8,"line_end":8,"column_start":8,"column_end":22},"name":"draw_cross_mut","qualname":"::drawing::cross::draw_cross_mut","value":"pub fn draw_cross_mut<C>(&mut C, C::Pixel, i32, i32) where C: Canvas","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on an image in place. Handles coordinates outside image bounds.\n","sig":null,"attributes":[{"value":"/ Draws a colored cross on an image in place. Handles coordinates outside image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/cross.rs","byte_start":102885,"byte_end":102974,"line_start":6,"line_end":6,"column_start":1,"column_end":90}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/cross.rs","byte_start":102975,"byte_end":102991,"line_start":7,"line_end":7,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":346},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/cross.rs","byte_start":103787,"byte_end":103797,"line_start":38,"line_end":38,"column_start":8,"column_end":18},"name":"draw_cross","qualname":"::drawing::cross::draw_cross","value":"pub fn draw_cross<I>(&I, I::Pixel, i32, i32) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws a colored cross on an image. Handles coordinates outside image bounds.\n","sig":null,"attributes":[{"value":"/ Draws a colored cross on an image. Handles coordinates outside image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/cross.rs","byte_start":103699,"byte_end":103779,"line_start":37,"line_end":37,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":363},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107137,"byte_end":107154,"line_start":10,"line_end":10,"column_start":12,"column_end":29},"name":"BresenhamLineIter","qualname":"::drawing::line::BresenhamLineIter","value":"BresenhamLineIter {  }","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371}],"decl_id":null,"docs":" Iterates over the coordinates in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the coordinates in a line segment using","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":106966,"byte_end":107023,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107024,"byte_end":107125,"line_start":9,"line_end":9,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107469,"byte_end":107472,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLineIter>::new","value":"pub fn new((f32, f32), (f32, f32)) -> BresenhamLineIter","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates\n between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLineIter`](struct.BresenhamLineIter.html) which will iterate over the integer coordinates","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107308,"byte_end":107422,"line_start":22,"line_end":22,"column_start":5,"column_end":119}},{"value":"/ between `start` and `end`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107427,"byte_end":107457,"line_start":23,"line_end":23,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":380},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109246,"byte_end":109268,"line_start":95,"line_end":95,"column_start":12,"column_end":34},"name":"BresenhamLinePixelIter","qualname":"::drawing::line::BresenhamLinePixelIter","value":"BresenhamLinePixelIter {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109074,"byte_end":109132,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109133,"byte_end":109234,"line_start":94,"line_end":94,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109598,"byte_end":109601,"line_start":103,"line_end":103,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIter>::new","value":"pub fn new(&Image<P>, (f32, f32), (f32, f32)) -> BresenhamLinePixelIter<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIter`](struct.BresenhamLinePixelIter.html) which will iterate over","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109417,"byte_end":109517,"line_start":101,"line_end":101,"column_start":5,"column_end":105}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109522,"byte_end":109586,"line_start":102,"line_end":102,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":395},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110454,"byte_end":110479,"line_start":129,"line_end":129,"column_start":12,"column_end":37},"name":"BresenhamLinePixelIterMut","qualname":"::drawing::line::BresenhamLinePixelIterMut","value":"BresenhamLinePixelIterMut {  }","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399}],"decl_id":null,"docs":" Iterates over the image pixels in a line segment using\n [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Iterates over the image pixels in a line segment using","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110282,"byte_end":110340,"line_start":127,"line_end":127,"column_start":1,"column_end":59}},{"value":"/ [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110341,"byte_end":110442,"line_start":128,"line_end":128,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110822,"byte_end":110825,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<BresenhamLinePixelIterMut>::new","value":"pub fn new(&mut Image<P>, (f32, f32), (f32, f32))\n-> BresenhamLinePixelIterMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over\n the image pixels with coordinates between `start` and `end`.\n","sig":null,"attributes":[{"value":"/ Creates a [`BresenhamLinePixelIterMut`](struct.BresenhamLinePixelIterMut.html) which will iterate over","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110635,"byte_end":110741,"line_start":135,"line_end":135,"column_start":5,"column_end":111}},{"value":"/ the image pixels with coordinates between `start` and `end`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110746,"byte_end":110810,"line_start":136,"line_end":136,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":112084,"byte_end":112101,"line_start":170,"line_end":170,"column_start":8,"column_end":25},"name":"draw_line_segment","qualname":"::drawing::line::draw_line_segment","value":"pub fn draw_line_segment<I>(&I, (f32, f32), (f32, f32), I::Pixel)\n-> Image<I::Pixel> where I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":111877,"byte_end":111969,"line_start":168,"line_end":168,"column_start":1,"column_end":93}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":111970,"byte_end":112076,"line_start":169,"line_end":169,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":112641,"byte_end":112662,"line_start":188,"line_end":188,"column_start":8,"column_end":29},"name":"draw_line_segment_mut","qualname":"::drawing::line::draw_line_segment_mut","value":"pub fn draw_line_segment_mut<C>(&mut C, (f32, f32), (f32, f32), C::Pixel)\nwhere C: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":112434,"byte_end":112526,"line_start":186,"line_end":186,"column_start":1,"column_end":93}},{"value":"/ Uses [Bresenham's line drawing algorithm](https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":112527,"byte_end":112633,"line_start":187,"line_end":187,"column_start":1,"column_end":107}}]},{"kind":"Function","id":{"krate":0,"index":416},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113509,"byte_end":113538,"line_start":212,"line_end":212,"column_start":8,"column_end":37},"name":"draw_antialiased_line_segment","qualname":"::drawing::line::draw_antialiased_line_segment","value":"pub fn draw_antialiased_line_segment<I,\n                                     B>(&I, (i32, i32), (i32, i32), I::Pixel,\n                                        B) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n The parameters of blend are (line color, original color, line weight).\n Consider using [`interpolate`](fn.interpolate.html) for blend.\n Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113166,"byte_end":113258,"line_start":208,"line_end":208,"column_start":1,"column_end":93}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113259,"byte_end":113333,"line_start":209,"line_end":209,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113334,"byte_end":113400,"line_start":210,"line_end":210,"column_start":1,"column_end":67}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113401,"byte_end":113501,"line_start":211,"line_end":211,"column_start":1,"column_end":101}}]},{"kind":"Function","id":{"krate":0,"index":419},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":114298,"byte_end":114331,"line_start":234,"line_end":234,"column_start":8,"column_end":41},"name":"draw_antialiased_line_segment_mut","qualname":"::drawing::line::draw_antialiased_line_segment_mut","value":"pub fn draw_antialiased_line_segment_mut<I,\n                                         B>(&mut I, (i32, i32), (i32, i32),\n                                            I::Pixel, B) where\nI: GenericImage, I::Pixel: 'static, B: Fn(I::Pixel, I::Pixel, f32) -> I::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the line segment between start and end as lies inside the image bounds.\n The parameters of blend are (line color, original color, line weight).\n Consider using [`interpolate`](fn.interpolate.html) for blend.\n Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).\n","sig":null,"attributes":[{"value":"/ Draws as much of the line segment between start and end as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":113955,"byte_end":114047,"line_start":230,"line_end":230,"column_start":1,"column_end":93}},{"value":"/ The parameters of blend are (line color, original color, line weight).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":114048,"byte_end":114122,"line_start":231,"line_end":231,"column_start":1,"column_end":75}},{"value":"/ Consider using [`interpolate`](fn.interpolate.html) for blend.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":114123,"byte_end":114189,"line_start":232,"line_end":232,"column_start":1,"column_end":67}},{"value":"/ Uses [Xu's line drawing algorithm](https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":114190,"byte_end":114290,"line_start":233,"line_end":233,"column_start":1,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126543,"byte_end":126548,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Point","qualname":"::drawing::polygon::Point","value":"Point {  }","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457}],"decl_id":null,"docs":" A 2D point.\n","sig":null,"attributes":[{"value":"/ A 2D point.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126471,"byte_end":126486,"line_start":10,"line_end":10,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126690,"byte_end":126693,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Point<T>>::new","value":"pub fn new(T, T) -> Point<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a point at (x, y).\n","sig":null,"attributes":[{"value":"/ Construct a point at (x, y).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126646,"byte_end":126678,"line_start":18,"line_end":18,"column_start":5,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":467},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127069,"byte_end":127088,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"draw_convex_polygon","qualname":"::drawing::polygon::draw_convex_polygon","value":"pub fn draw_convex_polygon<I>(&I, &[Point<i32>], I::Pixel) -> Image<I::Pixel>\nwhere I: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a filled convex polygon as lies within image bounds. The provided\n list of points should be an open path, i.e. the first and last points must not be equal.\n An implicit edge is added from the last to the first point in the slice.","sig":null,"attributes":[{"value":"/ Draws as much of a filled convex polygon as lies within image bounds. The provided","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126757,"byte_end":126843,"line_start":24,"line_end":24,"column_start":1,"column_end":87}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126844,"byte_end":126936,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126937,"byte_end":127013,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127014,"byte_end":127017,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Does not validate that input is convex.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127018,"byte_end":127061,"line_start":28,"line_end":28,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":469},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127695,"byte_end":127718,"line_start":45,"line_end":45,"column_start":8,"column_end":31},"name":"draw_convex_polygon_mut","qualname":"::drawing::polygon::draw_convex_polygon_mut","value":"pub fn draw_convex_polygon_mut<C>(&mut C, &[Point<i32>], C::Pixel) where\nC: Canvas, C::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of a filled convex polygon as lies within image bounds. The provided\n list of points should be an open path, i.e. the first and last points must not be equal.\n An implicit edge is added from the last to the first point in the slice.","sig":null,"attributes":[{"value":"/ Draws as much of a filled convex polygon as lies within image bounds. The provided","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127383,"byte_end":127469,"line_start":40,"line_end":40,"column_start":1,"column_end":87}},{"value":"/ list of points should be an open path, i.e. the first and last points must not be equal.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127470,"byte_end":127562,"line_start":41,"line_end":41,"column_start":1,"column_end":93}},{"value":"/ An implicit edge is added from the last to the first point in the slice.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127563,"byte_end":127639,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127640,"byte_end":127643,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Does not validate that input is convex.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":127644,"byte_end":127687,"line_start":44,"line_end":44,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":484},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":130622,"byte_end":130638,"line_start":9,"line_end":9,"column_start":8,"column_end":24},"name":"draw_hollow_rect","qualname":"::drawing::rect::draw_hollow_rect","value":"pub fn draw_hollow_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the boundary of a rectangle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of the boundary of a rectangle as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":130533,"byte_end":130614,"line_start":8,"line_end":8,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":486},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":131010,"byte_end":131030,"line_start":21,"line_end":21,"column_start":8,"column_end":28},"name":"draw_hollow_rect_mut","qualname":"::drawing::rect::draw_hollow_rect_mut","value":"pub fn draw_hollow_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas,\nC::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws as much of the boundary of a rectangle as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draws as much of the boundary of a rectangle as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":130921,"byte_end":131002,"line_start":20,"line_end":20,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":131658,"byte_end":131674,"line_start":38,"line_end":38,"column_start":8,"column_end":24},"name":"draw_filled_rect","qualname":"::drawing::rect::draw_filled_rect","value":"pub fn draw_filled_rect<I>(&I, Rect, I::Pixel) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a rectangle, including its boundary, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a rectangle, including its boundary, as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":131561,"byte_end":131650,"line_start":37,"line_end":37,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":132054,"byte_end":132074,"line_start":50,"line_end":50,"column_start":8,"column_end":28},"name":"draw_filled_rect_mut","qualname":"::drawing::rect::draw_filled_rect_mut","value":"pub fn draw_filled_rect_mut<C>(&mut C, Rect, C::Pixel) where C: Canvas,\nC::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draw as much of a rectangle, including its boundary, as lies inside the image bounds.\n","sig":null,"attributes":[{"value":"/ Draw as much of a rectangle, including its boundary, as lies inside the image bounds.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/rect.rs","byte_start":131957,"byte_end":132046,"line_start":49,"line_end":49,"column_start":1,"column_end":90}}]},{"kind":"Function","id":{"krate":0,"index":515},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","byte_start":135888,"byte_end":135901,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"draw_text_mut","qualname":"::drawing::text::draw_text_mut","value":"pub fn draw_text_mut<'a,\n                     C>(&'a mut C, C::Pixel, u32, u32, Scale, &'a Font,\n                        &'a str) where C: Canvas,\n<C::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually\n","sig":null,"attributes":[{"value":"/ Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","byte_start":135685,"byte_end":135880,"line_start":11,"line_end":11,"column_start":1,"column_end":196}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","byte_start":137325,"byte_end":137334,"line_start":52,"line_end":52,"column_start":8,"column_end":17},"name":"draw_text","qualname":"::drawing::text::draw_text","value":"pub fn draw_text<'a,\n                 I>(&'a mut I, I::Pixel, u32, u32, Scale, &'a Font, &'a str)\n-> Image<I::Pixel> where I: GenericImage,\n<I::Pixel as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>, I::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually\n","sig":null,"attributes":[{"value":"/ Draws colored text on an image in place. `scale` is augmented font scaling on both the x and y axis (in pixels). Note that this function *does not* support newlines, you must do this manually","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/text.rs","byte_start":137122,"byte_end":137317,"line_start":51,"line_end":51,"column_start":1,"column_end":196}}]},{"kind":"Mod","id":{"krate":0,"index":527},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"edges","qualname":"::edges","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":2155},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":546}],"decl_id":null,"docs":" Functions for detecting edges in images.\n","sig":null,"attributes":[{"value":"/ Functions for detecting edges in images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":137788,"byte_end":137832,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":541},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":139012,"byte_end":139017,"line_start":30,"line_end":30,"column_start":8,"column_end":13},"name":"canny","qualname":"::edges::canny","value":"pub fn canny(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Runs the canny edge detection algorithm.","sig":null,"attributes":[{"value":"/ Runs the canny edge detection algorithm.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138052,"byte_end":138096,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138097,"byte_end":138100,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Returns a binary image where edge pixels have a value of 255","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138101,"byte_end":138165,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/  and non-edge pixels a value of 0.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138166,"byte_end":138204,"line_start":12,"line_end":12,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138205,"byte_end":138208,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Params","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138209,"byte_end":138221,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138222,"byte_end":138225,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - `low_threshold`: Low threshold for the hysteresis procedure.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138226,"byte_end":138292,"line_start":16,"line_end":16,"column_start":1,"column_end":67}},{"value":"/ Edges with a strength higher than the low threshold will appear","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138293,"byte_end":138360,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ in the output image, if there are strong edges nearby.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138361,"byte_end":138419,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/ - `high_threshold`: High threshold for the hysteresis procedure.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138420,"byte_end":138488,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ Edges with a strength higher than the high threshold will always","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138489,"byte_end":138557,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ appear as edges in the output image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138558,"byte_end":138598,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138599,"byte_end":138602,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The greatest possible edge strength (and so largest sensible threshold)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138603,"byte_end":138678,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ is`sqrt(5) * 2 * 255`, or approximately 1140.39.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138679,"byte_end":138731,"line_start":24,"line_end":24,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138732,"byte_end":138735,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This odd looking value is the result of using a standard","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138736,"byte_end":138796,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/ definition of edge strength: the strength of an edge at a point `p` is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138797,"byte_end":138871,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ defined to be `sqrt(dx^2 + dy^2)`, where `dx` and `dy` are the values","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138872,"byte_end":138945,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ of the horizontal and vertical Sobel gradients at `p`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/edges.rs","byte_start":138946,"byte_end":139004,"line_start":29,"line_end":29,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":547},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":2195},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":631},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660}],"decl_id":null,"docs":" Functions for filtering images.\n","sig":null,"attributes":[{"value":"/ Functions for filtering images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":144994,"byte_end":145029,"line_start":1,"line_end":1,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176530,"byte_end":176543,"line_start":108,"line_end":108,"column_start":8,"column_end":21},"name":"median_filter","qualname":"::filter::median::median_filter","value":"pub fn median_filter<P>(&Image<P>, u32, u32) -> Image<P> where\nP: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Applies a median filter of given dimensions to an image. Each output pixel is the median\n of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","sig":null,"attributes":[{"value":"/ Applies a median filter of given dimensions to an image. Each output pixel is the median","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173702,"byte_end":173794,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ of the pixels in a `(2 * x_radius + 1) * (2 * y_radius + 1)` kernel of pixels in the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173795,"byte_end":173896,"line_start":6,"line_end":6,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173897,"byte_end":173900,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Pads by continuity. Performs O(max(x_radius, y_radius)) operations per pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173901,"byte_end":173982,"line_start":8,"line_end":8,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173983,"byte_end":173986,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":173987,"byte_end":174001,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174002,"byte_end":174009,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174010,"byte_end":174035,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174036,"byte_end":174054,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174055,"byte_end":174084,"line_start":14,"line_end":14,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174085,"byte_end":174102,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174103,"byte_end":174144,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174145,"byte_end":174148,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174149,"byte_end":174177,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/     1,   2,   3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174178,"byte_end":174198,"line_start":19,"line_end":19,"column_start":1,"column_end":21}},{"value":"/   200,   6,   7;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174199,"byte_end":174219,"line_start":20,"line_end":20,"column_start":1,"column_end":21}},{"value":"/     9, 100,  11","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174220,"byte_end":174239,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174240,"byte_end":174246,"line_start":22,"line_end":22,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174247,"byte_end":174250,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Padding by continuity means that the values we use","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174251,"byte_end":174308,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/ // for computing medians of boundary pixels are:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174309,"byte_end":174361,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/ //","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174362,"byte_end":174368,"line_start":26,"line_end":26,"column_start":1,"column_end":7}},{"value":"/ //   1     1     2     3     3","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174369,"byte_end":174403,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174404,"byte_end":174433,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ //   1 |   1     2     3 |   3","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174434,"byte_end":174468,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174469,"byte_end":174475,"line_start":30,"line_end":30,"column_start":1,"column_end":7}},{"value":"/ // 200 | 200     6     7 |   7","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174476,"byte_end":174510,"line_start":31,"line_end":31,"column_start":1,"column_end":35}},{"value":"/ //","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174511,"byte_end":174517,"line_start":32,"line_end":32,"column_start":1,"column_end":7}},{"value":"/ //   9 |   9   100    11 |  11","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174518,"byte_end":174552,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/ //      -----------------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174553,"byte_end":174582,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ //   9     9   100    11    11","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174583,"byte_end":174617,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174618,"byte_end":174621,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174622,"byte_end":174653,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/     2,  3,  3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174654,"byte_end":174672,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/     9,  7,  7;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174673,"byte_end":174691,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/     9, 11, 11","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174692,"byte_end":174709,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174710,"byte_end":174716,"line_start":41,"line_end":41,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174717,"byte_end":174720,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174721,"byte_end":174782,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174783,"byte_end":174790,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174791,"byte_end":174798,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174799,"byte_end":174802,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174803,"byte_end":174810,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174811,"byte_end":174836,"line_start":48,"line_end":48,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174837,"byte_end":174855,"line_start":49,"line_end":49,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174856,"byte_end":174885,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174886,"byte_end":174903,"line_start":51,"line_end":51,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174904,"byte_end":174945,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174946,"byte_end":174949,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // Image channels are handled independently.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174950,"byte_end":174998,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ // This example sets the red channel to have the same","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":174999,"byte_end":175056,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/ // contents as the image from the grayscale example,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175057,"byte_end":175113,"line_start":56,"line_end":56,"column_start":1,"column_end":57}},{"value":"/ // the green channel to a vertically inverted copy of that","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175114,"byte_end":175176,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/ // image and the blue channel to be constant.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175177,"byte_end":175226,"line_start":58,"line_end":58,"column_start":1,"column_end":50}},{"value":"/ //","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175227,"byte_end":175233,"line_start":59,"line_end":59,"column_start":1,"column_end":7}},{"value":"/ // See the grayscale image example for an explanation of how","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175234,"byte_end":175298,"line_start":60,"line_end":60,"column_start":1,"column_end":65}},{"value":"/ // boundary conditions are handled.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175299,"byte_end":175338,"line_start":61,"line_end":61,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175339,"byte_end":175342,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175343,"byte_end":175370,"line_start":63,"line_end":63,"column_start":1,"column_end":28}},{"value":"/     [  1,   9, 10], [  2, 100,  10], [  3,  11,  10];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175371,"byte_end":175428,"line_start":64,"line_end":64,"column_start":1,"column_end":58}},{"value":"/     [200, 200, 10], [  6,   6,  10], [  7,   7,  10];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175429,"byte_end":175486,"line_start":65,"line_end":65,"column_start":1,"column_end":58}},{"value":"/     [  9,   1, 10], [100,   2,  10], [ 11,   3,  10]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175487,"byte_end":175543,"line_start":66,"line_end":66,"column_start":1,"column_end":57}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175544,"byte_end":175550,"line_start":67,"line_end":67,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175551,"byte_end":175554,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let filtered = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175555,"byte_end":175585,"line_start":69,"line_end":69,"column_start":1,"column_end":31}},{"value":"/     [ 2,  9, 10], [ 3, 11, 10], [ 3, 11, 10];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175586,"byte_end":175635,"line_start":70,"line_end":70,"column_start":1,"column_end":50}},{"value":"/     [ 9,  9, 10], [ 7,  7, 10], [ 7,  7, 10];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175636,"byte_end":175685,"line_start":71,"line_end":71,"column_start":1,"column_end":50}},{"value":"/     [ 9,  2, 10], [11,  3, 10], [11,  3, 10]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175686,"byte_end":175734,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175735,"byte_end":175741,"line_start":73,"line_end":73,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175742,"byte_end":175745,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 1, 1), filtered);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175746,"byte_end":175807,"line_start":75,"line_end":75,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175808,"byte_end":175815,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175816,"byte_end":175823,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175824,"byte_end":175827,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175828,"byte_end":175835,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175836,"byte_end":175861,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175862,"byte_end":175880,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175881,"byte_end":175910,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175911,"byte_end":175928,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use imageproc::filter::median_filter;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175929,"byte_end":175970,"line_start":84,"line_end":84,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175971,"byte_end":175974,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // This example uses a kernel with x_radius sets to 2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":175975,"byte_end":176032,"line_start":86,"line_end":86,"column_start":1,"column_end":58}},{"value":"/ // and y_radius sets to 1, which leads to 5 * 3 kernel size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176033,"byte_end":176097,"line_start":87,"line_end":87,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176098,"byte_end":176101,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176102,"byte_end":176130,"line_start":89,"line_end":89,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176131,"byte_end":176153,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/     255, 200, 4, 11, 7;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176154,"byte_end":176181,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     42, 17, 3, 2, 1;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176182,"byte_end":176206,"line_start":92,"line_end":92,"column_start":1,"column_end":25}},{"value":"/     9, 100, 11, 13, 14;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176207,"byte_end":176234,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/     15, 87, 99, 21, 45","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176235,"byte_end":176261,"line_start":94,"line_end":94,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176262,"byte_end":176268,"line_start":95,"line_end":95,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176269,"byte_end":176272,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ let filtered = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176273,"byte_end":176304,"line_start":97,"line_end":97,"column_start":1,"column_end":32}},{"value":"/     2, 3, 4, 5, 5;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176305,"byte_end":176327,"line_start":98,"line_end":98,"column_start":1,"column_end":23}},{"value":"/     17, 4, 4, 4, 4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176328,"byte_end":176351,"line_start":99,"line_end":99,"column_start":1,"column_end":24}},{"value":"/     42, 13, 11, 11, 7;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176352,"byte_end":176378,"line_start":100,"line_end":100,"column_start":1,"column_end":27}},{"value":"/     15, 15, 15, 14, 14;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176379,"byte_end":176406,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/     15, 15, 21, 45, 45","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176407,"byte_end":176433,"line_start":102,"line_end":102,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176434,"byte_end":176440,"line_start":103,"line_end":103,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176441,"byte_end":176444,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(median_filter(&image, 2, 1), filtered);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176445,"byte_end":176506,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176507,"byte_end":176514,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":176515,"byte_end":176522,"line_start":107,"line_end":107,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":595},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186211,"byte_end":186221,"line_start":9,"line_end":9,"column_start":8,"column_end":18},"name":"sharpen3x3","qualname":"::filter::sharpen::sharpen3x3","value":"pub fn sharpen3x3(&GrayImage) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.\n","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image by applying a 3x3 approximation to the Laplacian.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186123,"byte_end":186203,"line_start":8,"line_end":8,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186672,"byte_end":186688,"line_start":19,"line_end":19,"column_start":8,"column_end":24},"name":"sharpen_gaussian","qualname":"::filter::sharpen::sharpen_gaussian","value":"pub fn sharpen_gaussian(&GrayImage, f32, f32) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sharpens a grayscale image using a Gaussian as a low-pass filter.","sig":null,"attributes":[{"value":"/ Sharpens a grayscale image using a Gaussian as a low-pass filter.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186375,"byte_end":186444,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186445,"byte_end":186448,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * `sigma` is the standard deviation of the Gaussian filter used.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186449,"byte_end":186517,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ * `amount` controls the level of sharpening. `output = input + amount * edges`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/sharpen.rs","byte_start":186518,"byte_end":186601,"line_start":17,"line_end":17,"column_start":1,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":146057,"byte_end":146067,"line_start":31,"line_end":31,"column_start":8,"column_end":18},"name":"box_filter","qualname":"::filter::box_filter","value":"pub fn box_filter(&GrayImage, u32, u32) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)\n and height (2 * `y_radius` + 1) whose entries are equal and\n sum to one. i.e. each output pixel is the unweighted mean of\n a rectangular region surrounding its corresponding input pixel.\n We handle locations where the kernel would extend past the image's\n boundary by treating the image as if its boundary pixels were\n repeated indefinitely.\n","sig":null,"attributes":[{"value":"/ Convolves an 8bpp grayscale image with a kernel of width (2 * `x_radius` + 1)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145464,"byte_end":145545,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ and height (2 * `y_radius` + 1) whose entries are equal and","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145546,"byte_end":145609,"line_start":22,"line_end":22,"column_start":1,"column_end":64}},{"value":"/ sum to one. i.e. each output pixel is the unweighted mean of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145610,"byte_end":145674,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ a rectangular region surrounding its corresponding input pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145675,"byte_end":145742,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ We handle locations where the kernel would extend past the image's","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145743,"byte_end":145813,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ boundary by treating the image as if its boundary pixels were","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145814,"byte_end":145879,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/ repeated indefinitely.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":145880,"byte_end":145906,"line_start":27,"line_end":27,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":625},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":147819,"byte_end":147825,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"Kernel","qualname":"::filter::Kernel","value":"Kernel {  }","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630}],"decl_id":null,"docs":" A 2D kernel, used to filter images via convolution.\n","sig":null,"attributes":[{"value":"/ A 2D kernel, used to filter images via convolution.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":147752,"byte_end":147807,"line_start":80,"line_end":80,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":148052,"byte_end":148055,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Kernel>::new","value":"pub fn new(&'a [K], u32, u32) -> Kernel","parent":null,"children":[],"decl_id":null,"docs":" Construct a kernel from a slice and its dimensions. The input slice is\n in row-major form.\n","sig":null,"attributes":[{"value":"/ Construct a kernel from a slice and its dimensions. The input slice is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":147939,"byte_end":148013,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ in row-major form.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":148018,"byte_end":148040,"line_start":89,"line_end":89,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":148696,"byte_end":148702,"line_start":109,"line_end":109,"column_start":12,"column_end":18},"name":"filter","qualname":"<Kernel>::filter","value":"pub fn filter<P, F, Q>(&Self, &Image<P>, F) -> Image<Q> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K>, Q: Pixel + 'static,\nF: FnMut(&mut Q::Subpixel, K) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image. Intermediate calculations are performed\n at type K, and the results converted to pixel Q via f. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image. Intermediate calculations are performed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":148522,"byte_end":148601,"line_start":107,"line_end":107,"column_start":5,"column_end":84}},{"value":"/ at type K, and the results converted to pixel Q via f. Pads by continuity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":148606,"byte_end":148684,"line_start":108,"line_end":108,"column_start":5,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":641},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151135,"byte_end":151152,"line_start":175,"line_end":175,"column_start":8,"column_end":25},"name":"gaussian_blur_f32","qualname":"::filter::gaussian_blur_f32","value":"pub fn gaussian_blur_f32<P>(&Image<P>, f32) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Blurs an image using a Gaussian of standard deviation sigma.\n The kernel used has type f32 and all intermediate calculations are performed\n at this type.","sig":null,"attributes":[{"value":"/ Blurs an image using a Gaussian of standard deviation sigma.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":150843,"byte_end":150907,"line_start":167,"line_end":167,"column_start":1,"column_end":65}},{"value":"/ The kernel used has type f32 and all intermediate calculations are performed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":150908,"byte_end":150988,"line_start":168,"line_end":168,"column_start":1,"column_end":81}},{"value":"/ at this type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":150989,"byte_end":151006,"line_start":169,"line_end":169,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151007,"byte_end":151010,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151011,"byte_end":151023,"line_start":171,"line_end":171,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151024,"byte_end":151027,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Panics if `sigma <= 0.0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151028,"byte_end":151057,"line_start":173,"line_end":173,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":643},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151541,"byte_end":151557,"line_start":187,"line_end":187,"column_start":8,"column_end":24},"name":"separable_filter","qualname":"::filter::separable_filter","value":"pub fn separable_filter<P, K>(&Image<P>, &[K], &[K]) -> Image<P> where\nP: Pixel + 'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of view with the outer product of the 1d\n kernels `h_kernel` and `v_kernel`.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of view with the outer product of the 1d","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151427,"byte_end":151494,"line_start":185,"line_end":185,"column_start":1,"column_end":68}},{"value":"/ kernels `h_kernel` and `v_kernel`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151495,"byte_end":151533,"line_start":186,"line_end":186,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151925,"byte_end":151947,"line_start":199,"line_end":199,"column_start":8,"column_end":30},"name":"separable_filter_equal","qualname":"::filter::separable_filter_equal","value":"pub fn separable_filter_equal<P, K>(&Image<P>, &[K]) -> Image<P> where\nP: Pixel + 'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num +\nCopy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with the outer product of the 1d\n kernel filter with itself.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with the outer product of the 1d","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151815,"byte_end":151886,"line_start":197,"line_end":197,"column_start":1,"column_end":72}},{"value":"/ kernel filter with itself.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":151887,"byte_end":151917,"line_start":198,"line_end":198,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":649},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152343,"byte_end":152352,"line_start":210,"line_end":210,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::filter::filter3x3","value":"pub fn filter3x3<P, K, S>(&Image<P>, &[K]) -> Image<ChannelMap<P, S>> where\nP::Subpixel: ValueInto<K>, S: Clamp<K> + Primitive + 'static,\nP: WithChannel<S> + 'static, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are\n performed at type K, and the results clamped to subpixel type S. Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns 2d correlation of an image with a 3x3 row-major kernel. Intermediate calculations are","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152149,"byte_end":152246,"line_start":208,"line_end":208,"column_start":1,"column_end":98}},{"value":"/ performed at type K, and the results clamped to subpixel type S. Pads by continuity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152247,"byte_end":152335,"line_start":209,"line_end":209,"column_start":1,"column_end":89}}]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152820,"byte_end":152837,"line_start":224,"line_end":224,"column_start":8,"column_end":25},"name":"horizontal_filter","qualname":"::filter::horizontal_filter","value":"pub fn horizontal_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity. Intermediate calculations are performed at\n type K.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152664,"byte_end":152733,"line_start":221,"line_end":221,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity. Intermediate calculations are performed at","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152734,"byte_end":152800,"line_start":222,"line_end":222,"column_start":1,"column_end":67}},{"value":"/ type K.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":152801,"byte_end":152812,"line_start":223,"line_end":223,"column_start":1,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":156492,"byte_end":156507,"line_start":319,"line_end":319,"column_start":8,"column_end":23},"name":"vertical_filter","qualname":"::filter::vertical_filter","value":"pub fn vertical_filter<P, K>(&Image<P>, &[K]) -> Image<P> where P: Pixel +\n'static, <P as Pixel>::Subpixel: ValueInto<K> + Clamp<K>, K: Num + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns horizontal correlations between an image and a 1d kernel.\n Pads by continuity.\n","sig":null,"attributes":[{"value":"/ Returns horizontal correlations between an image and a 1d kernel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":156391,"byte_end":156460,"line_start":317,"line_end":317,"column_start":1,"column_end":70}},{"value":"/ Pads by continuity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":156461,"byte_end":156484,"line_start":318,"line_end":318,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":663},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"geometric_transformations","qualname":"::geometric_transformations","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":1477},{"krate":0,"index":1488},{"krate":0,"index":1486},{"krate":0,"index":1484},{"krate":0,"index":1489},{"krate":0,"index":1501},{"krate":0,"index":1497},{"krate":0,"index":1495},{"krate":0,"index":677},{"krate":0,"index":690},{"krate":0,"index":694},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":735},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":1505},{"krate":0,"index":1521},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1514},{"krate":0,"index":1512}],"decl_id":null,"docs":" Geometric transformations of images. This includes rotations, translation, and general\n projective transformations.\n","sig":null,"attributes":[{"value":"/ Geometric transformations of images. This includes rotations, translation, and general","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187021,"byte_end":187111,"line_start":1,"line_end":1,"column_start":1,"column_end":91}},{"value":"/ projective transformations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187112,"byte_end":187143,"line_start":2,"line_end":2,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1489},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188093,"byte_end":188103,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"Projection","qualname":"::geometric_transformations::Projection","value":"Projection {  }","parent":null,"children":[{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494}],"decl_id":null,"docs":" A 2d projective transformation, stored as a row major 3x3 matrix.","sig":null,"attributes":[{"value":"/ A 2d projective transformation, stored as a row major 3x3 matrix.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187435,"byte_end":187504,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187505,"byte_end":187508,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Transformations combine by pre-multiplication, i.e. applying `P * Q` is equivalent to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187509,"byte_end":187598,"line_start":20,"line_end":20,"column_start":1,"column_end":90}},{"value":"/ applying `Q` and then applying `P`. For example, the following defines a rotation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187599,"byte_end":187684,"line_start":21,"line_end":21,"column_start":1,"column_end":86}},{"value":"/ about the point (320.0, 240.0).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187685,"byte_end":187720,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187721,"byte_end":187724,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187725,"byte_end":187732,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187733,"byte_end":187781,"line_start":25,"line_end":25,"column_start":1,"column_end":49}},{"value":"/ use std::f32::consts::PI;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187782,"byte_end":187811,"line_start":26,"line_end":26,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187812,"byte_end":187815,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let (cx, cy) = (320.0, 240.0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187816,"byte_end":187850,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187851,"byte_end":187854,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let c_rotation = Projection::translate(cx, cy)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187855,"byte_end":187905,"line_start":30,"line_end":30,"column_start":1,"column_end":51}},{"value":"/     * Projection::rotate(PI / 6.0)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187906,"byte_end":187944,"line_start":31,"line_end":31,"column_start":1,"column_end":39}},{"value":"/     * Projection::translate(-cx, -cy);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187945,"byte_end":187987,"line_start":32,"line_end":32,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187988,"byte_end":187995,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":187996,"byte_end":187999,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See ./examples/projection.rs for more examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188000,"byte_end":188051,"line_start":35,"line_end":35,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188380,"byte_end":188391,"line_start":47,"line_end":47,"column_start":12,"column_end":23},"name":"from_matrix","qualname":"<Projection>::from_matrix","value":"pub fn from_matrix([f32; ]) -> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","sig":null,"attributes":[{"value":"/ Creates a 2d projective transform from a row-major 3x3 matrix in homogeneous coordinates.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188211,"byte_end":188304,"line_start":44,"line_end":44,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188309,"byte_end":188312,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the matrix is not invertible.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188317,"byte_end":188368,"line_start":46,"line_end":46,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188740,"byte_end":188749,"line_start":59,"line_end":59,"column_start":12,"column_end":21},"name":"translate","qualname":"<Projection>::translate","value":"pub fn translate(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A translation by (tx, ty).\n","sig":null,"attributes":[{"value":"/ A translation by (tx, ty).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188677,"byte_end":188707,"line_start":57,"line_end":57,"column_start":5,"column_end":35}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188712,"byte_end":188728,"line_start":58,"line_end":58,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189254,"byte_end":189260,"line_start":77,"line_end":77,"column_start":12,"column_end":18},"name":"rotate","qualname":"<Projection>::rotate","value":"pub fn rotate(f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" A clockwise rotation around the top-left corner of the image by theta radians.\n","sig":null,"attributes":[{"value":"/ A clockwise rotation around the top-left corner of the image by theta radians.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189139,"byte_end":189221,"line_start":75,"line_end":75,"column_start":5,"column_end":87}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189226,"byte_end":189242,"line_start":76,"line_end":76,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189951,"byte_end":189956,"line_start":100,"line_end":100,"column_start":12,"column_end":17},"name":"scale","qualname":"<Projection>::scale","value":"pub fn scale(f32, f32) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" An anisotropic scaling (sx, sy).","sig":null,"attributes":[{"value":"/ An anisotropic scaling (sx, sy).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189699,"byte_end":189735,"line_start":95,"line_end":95,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189740,"byte_end":189743,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Note that the `warp` function does not change the size of the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189748,"byte_end":189826,"line_start":97,"line_end":97,"column_start":5,"column_end":83}},{"value":"/ If you want to resize an image then use the `imageops` module in the `image` crate.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189831,"byte_end":189918,"line_start":98,"line_end":98,"column_start":5,"column_end":92}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":189923,"byte_end":189939,"line_start":99,"line_end":99,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":190416,"byte_end":190422,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"invert","qualname":"<Projection>::invert","value":"pub fn invert(Self) -> Projection","parent":null,"children":[],"decl_id":null,"docs":" Inverts the transformation.\n","sig":null,"attributes":[{"value":"/ Inverts the transformation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":190373,"byte_end":190404,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":190671,"byte_end":190690,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"from_control_points","qualname":"<Projection>::from_control_points","value":"pub fn from_control_points([(f32, f32); ], [(f32, f32); ])\n-> Option<Projection>","parent":null,"children":[],"decl_id":null,"docs":" Calculates a projection from a set of four control point pairs.\n","sig":null,"attributes":[{"value":"/ Calculates a projection from a set of four control point pairs.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":190592,"byte_end":190659,"line_start":125,"line_end":125,"column_start":5,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":195610,"byte_end":195629,"line_start":282,"line_end":282,"column_start":8,"column_end":27},"name":"rotate_about_center","qualname":"::geometric_transformations::rotate_about_center","value":"pub fn rotate_about_center<P>(&Image<P>, f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about its center.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about its center.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":195410,"byte_end":195458,"line_start":279,"line_end":279,"column_start":1,"column_end":49}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":195459,"byte_end":195531,"line_start":280,"line_end":280,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":195532,"byte_end":195602,"line_start":281,"line_end":281,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":709},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196276,"byte_end":196282,"line_start":306,"line_end":306,"column_start":8,"column_end":14},"name":"rotate","qualname":"::geometric_transformations::rotate","value":"pub fn rotate<P>(&Image<P>, (f32, f32), f32, Interpolation, P) -> Image<P>\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Rotates an image clockwise about the provided center by theta radians.\n The output image has the same dimensions as the input. Output pixels\n whose pre-image lies outside the input image are set to `default`.\n","sig":null,"attributes":[{"value":"/ Rotates an image clockwise about the provided center by theta radians.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196050,"byte_end":196124,"line_start":303,"line_end":303,"column_start":1,"column_end":75}},{"value":"/ The output image has the same dimensions as the input. Output pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196125,"byte_end":196197,"line_start":304,"line_end":304,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196198,"byte_end":196268,"line_start":305,"line_end":305,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":711},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":197145,"byte_end":197154,"line_start":329,"line_end":329,"column_start":8,"column_end":17},"name":"translate","qualname":"::geometric_transformations::translate","value":"pub fn translate<P>(&Image<P>, (i32, i32)) -> Image<P> where P: Pixel +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Translates the input image by t. Note that image coordinates increase from\n top left to bottom right. Output pixels whose pre-image are not in the input\n image are set to the boundary pixel in the input image nearest to their pre-image.\n","sig":null,"attributes":[{"value":"/ Translates the input image by t. Note that image coordinates increase from","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196762,"byte_end":196840,"line_start":324,"line_end":324,"column_start":1,"column_end":79}},{"value":"/ top left to bottom right. Output pixels whose pre-image are not in the input","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196841,"byte_end":196921,"line_start":325,"line_end":325,"column_start":1,"column_end":81}},{"value":"/ image are set to the boundary pixel in the input image nearest to their pre-image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":196922,"byte_end":197008,"line_start":326,"line_end":326,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":713},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":199019,"byte_end":199023,"line_start":379,"line_end":379,"column_start":8,"column_end":12},"name":"warp","qualname":"::geometric_transformations::warp","value":"pub fn warp<P>(&Image<P>, &Projection, Interpolation, P) -> Image<P> where\nP: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198670,"byte_end":198722,"line_start":372,"line_end":372,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198723,"byte_end":198726,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"/ The returned image has the same dimensions as `image`. Output pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198727,"byte_end":198799,"line_start":374,"line_end":374,"column_start":1,"column_end":73}},{"value":"/ whose pre-image lies outside the input image are set to `default`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198800,"byte_end":198870,"line_start":375,"line_end":375,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198871,"byte_end":198874,"line_start":376,"line_end":376,"column_start":1,"column_end":4}},{"value":"/ The provided projection defines a mapping from locations in the input image to their","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198875,"byte_end":198963,"line_start":377,"line_end":377,"column_start":1,"column_end":89}},{"value":"/ corresponding location in the output image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":198964,"byte_end":199011,"line_start":378,"line_end":378,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":199628,"byte_end":199637,"line_start":399,"line_end":399,"column_start":8,"column_end":17},"name":"warp_into","qualname":"::geometric_transformations::warp_into","value":"pub fn warp_into<P>(&Image<P>, &Projection, Interpolation, P, &mut Image<P>)\nwhere P: Pixel + Send + Sync + 'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32> + Sync","parent":null,"children":[],"decl_id":null,"docs":" Applies a projective transformation to an image, writing to a provided output.","sig":null,"attributes":[{"value":"/ Applies a projective transformation to an image, writing to a provided output.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":199463,"byte_end":199545,"line_start":396,"line_end":396,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":199546,"byte_end":199549,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ See the [`warp`](fn.warp.html) documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":199550,"byte_end":199620,"line_start":398,"line_end":398,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":725},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201492,"byte_end":201501,"line_start":450,"line_end":450,"column_start":8,"column_end":17},"name":"warp_with","qualname":"::geometric_transformations::warp_with","value":"pub fn warp_with<P, F>(&Image<P>, F, Interpolation, P) -> Image<P> where\nF: Fn(f32, f32) -> (f32, f32) + Sync + Send, P: Pixel + Send + Sync + 'static,\n<P as Pixel>::Subpixel: Send + Sync, <P as Pixel>::Subpixel: ValueInto<f32> +\nClamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201006,"byte_end":201098,"line_start":433,"line_end":433,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201099,"byte_end":201102,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201103,"byte_end":201117,"line_start":435,"line_end":435,"column_start":1,"column_end":15}},{"value":"/ Applying a wave pattern.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201118,"byte_end":201146,"line_start":436,"line_end":436,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201147,"byte_end":201154,"line_start":437,"line_end":437,"column_start":1,"column_end":8}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201155,"byte_end":201190,"line_start":438,"line_end":438,"column_start":1,"column_end":36}},{"value":"/ use imageproc::utils::gray_bench_image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201191,"byte_end":201234,"line_start":439,"line_end":439,"column_start":1,"column_end":44}},{"value":"/ use imageproc::geometric_transformations::*;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201235,"byte_end":201283,"line_start":440,"line_end":440,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201284,"byte_end":201287,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ let image = gray_bench_image(300, 300);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201288,"byte_end":201331,"line_start":442,"line_end":442,"column_start":1,"column_end":44}},{"value":"/ let warped = warp_with(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201332,"byte_end":201359,"line_start":443,"line_end":443,"column_start":1,"column_end":28}},{"value":"/     &image,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201360,"byte_end":201375,"line_start":444,"line_end":444,"column_start":1,"column_end":16}},{"value":"/     |x, y| (x, y + (x / 30.0).sin()),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201376,"byte_end":201417,"line_start":445,"line_end":445,"column_start":1,"column_end":42}},{"value":"/     Interpolation::Nearest,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201418,"byte_end":201449,"line_start":446,"line_end":446,"column_start":1,"column_end":32}},{"value":"/     Luma([0u8])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201450,"byte_end":201469,"line_start":447,"line_end":447,"column_start":1,"column_end":20}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201470,"byte_end":201476,"line_start":448,"line_end":448,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201477,"byte_end":201484,"line_start":449,"line_end":449,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":202207,"byte_end":202221,"line_start":472,"line_end":472,"column_start":8,"column_end":22},"name":"warp_into_with","qualname":"::geometric_transformations::warp_into_with","value":"pub fn warp_into_with<P, F>(&Image<P>, F, Interpolation, P, &mut Image<P>)\nwhere F: Fn(f32, f32) -> (f32, f32) + Send + Sync, P: Pixel + Send + Sync +\n'static, <P as Pixel>::Subpixel: Send + Sync,\n<P as Pixel>::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Warps an image using the provided function to define the pre-image of each output pixel,\n writing into a preallocated output.","sig":null,"attributes":[{"value":"/ Warps an image using the provided function to define the pre-image of each output pixel,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":201982,"byte_end":202074,"line_start":468,"line_end":468,"column_start":1,"column_end":93}},{"value":"/ writing into a preallocated output.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":202075,"byte_end":202114,"line_start":469,"line_end":469,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":202115,"byte_end":202118,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ See the [`warp_with`](fn.warp_with.html) documentation for more information.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":202119,"byte_end":202199,"line_start":471,"line_end":471,"column_start":1,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210222,"byte_end":210229,"line_start":733,"line_end":733,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::geometric_transformations::Interpolation::Nearest","value":"Interpolation::Nearest","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" Choose the nearest pixel to the pre-image of the\n output pixel.\n","sig":null,"attributes":[{"value":"/ Choose the nearest pixel to the pre-image of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210143,"byte_end":210195,"line_start":731,"line_end":731,"column_start":5,"column_end":57}},{"value":"/ output pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210200,"byte_end":210217,"line_start":732,"line_end":732,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1508},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210344,"byte_end":210352,"line_start":736,"line_end":736,"column_start":5,"column_end":13},"name":"Bilinear","qualname":"::geometric_transformations::Interpolation::Bilinear","value":"Interpolation::Bilinear","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" Bilinearly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bilinearly interpolate between the four pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210235,"byte_end":210285,"line_start":734,"line_end":734,"column_start":5,"column_end":55}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210290,"byte_end":210339,"line_start":735,"line_end":735,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1510},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210466,"byte_end":210473,"line_start":739,"line_end":739,"column_start":5,"column_end":12},"name":"Bicubic","qualname":"::geometric_transformations::Interpolation::Bicubic","value":"Interpolation::Bicubic","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" Bicubicly interpolate between the four pixels\n closest to the pre-image of the output pixel.\n","sig":null,"attributes":[{"value":"/ Bicubicly interpolate between the four pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210358,"byte_end":210407,"line_start":737,"line_end":737,"column_start":5,"column_end":54}},{"value":"/ closest to the pre-image of the output pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210412,"byte_end":210461,"line_start":738,"line_end":738,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210123,"byte_end":210136,"line_start":730,"line_end":730,"column_start":10,"column_end":23},"name":"Interpolation","qualname":"::geometric_transformations::Interpolation","value":"pub enum Interpolation {\n\n    /// Choose the nearest pixel to the pre-image of the\n    /// output pixel.\n    Nearest,\n\n    /// Bilinearly interpolate between the four pixels\n    /// closest to the pre-image of the output pixel.\n    Bilinear,\n\n    /// Bicubicly interpolate between the four pixels\n    /// closest to the pre-image of the output pixel.\n    Bicubic,\n}","parent":null,"children":[{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510}],"decl_id":null,"docs":" How to handle pixels whose pre-image lies between input pixels.\n","sig":null,"attributes":[{"value":"/ How to handle pixels whose pre-image lies between input pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":210001,"byte_end":210068,"line_start":728,"line_end":728,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":766},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gradients","qualname":"::gradients","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":2267},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":1523},{"krate":0,"index":1525},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":793},{"krate":0,"index":795},{"krate":0,"index":801}],"decl_id":null,"docs":" Functions for computing gradients of image intensities.\n","sig":null,"attributes":[{"value":"/ Functions for computing gradients of image intensities.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":222731,"byte_end":222790,"line_start":1,"line_end":1,"column_start":1,"column_end":60}}]},{"kind":"Static","id":{"krate":0,"index":1523},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223155,"byte_end":223169,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"VERTICAL_SOBEL","qualname":"::gradients::VERTICAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223003,"byte_end":223053,"line_start":9,"line_end":9,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223054,"byte_end":223057,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_sobel`](fn.vertical_sobel.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223058,"byte_end":223126,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223127,"byte_end":223143,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":1525},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223392,"byte_end":223408,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"HORIZONTAL_SOBEL","qualname":"::gradients::HORIZONTAL_SOBEL","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Sobel filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Sobel filter for detecting horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223234,"byte_end":223286,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223287,"byte_end":223290,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_sobel`](fn.horizontal_sobel.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223291,"byte_end":223363,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223364,"byte_end":223380,"line_start":21,"line_end":21,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223622,"byte_end":223637,"line_start":31,"line_end":31,"column_start":12,"column_end":27},"name":"VERTICAL_SCHARR","qualname":"::gradients::VERTICAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223467,"byte_end":223518,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223519,"byte_end":223522,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_scharr`](fn.vertical_scharr.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223523,"byte_end":223593,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223594,"byte_end":223610,"line_start":30,"line_end":30,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":1529},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223869,"byte_end":223886,"line_start":40,"line_end":40,"column_start":12,"column_end":29},"name":"HORIZONTAL_SCHARR","qualname":"::gradients::HORIZONTAL_SCHARR","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Scharr filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Scharr filter for detecting horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223708,"byte_end":223761,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223762,"byte_end":223765,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_scharr`](fn.horizontal_scharr.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223766,"byte_end":223840,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223841,"byte_end":223857,"line_start":39,"line_end":39,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":1531},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224115,"byte_end":224131,"line_start":49,"line_end":49,"column_start":12,"column_end":28},"name":"VERTICAL_PREWITT","qualname":"::gradients::VERTICAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting vertical gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":223957,"byte_end":224009,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224010,"byte_end":224013,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Used by the [`vertical_prewitt`](fn.vertical_prewitt.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224014,"byte_end":224086,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224087,"byte_end":224103,"line_start":48,"line_end":48,"column_start":1,"column_end":17}}]},{"kind":"Static","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224360,"byte_end":224378,"line_start":58,"line_end":58,"column_start":12,"column_end":30},"name":"HORIZONTAL_PREWITT","qualname":"::gradients::HORIZONTAL_PREWITT","value":"[i32; ]","parent":null,"children":[],"decl_id":null,"docs":" Prewitt filter for detecting horizontal gradients.","sig":null,"attributes":[{"value":"/ Prewitt filter for detecting horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224196,"byte_end":224250,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224251,"byte_end":224254,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Used by the [`horizontal_prewitt`](fn.horizontal_prewitt.html) function.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224255,"byte_end":224331,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"rustfmt::skip","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224332,"byte_end":224348,"line_start":57,"line_end":57,"column_start":1,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":781},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224570,"byte_end":224586,"line_start":65,"line_end":65,"column_start":8,"column_end":24},"name":"horizontal_sobel","qualname":"::gradients::horizontal_sobel","value":"pub fn horizontal_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SOBEL`](static.HORIZONTAL_SOBEL.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224437,"byte_end":224519,"line_start":63,"line_end":63,"column_start":1,"column_end":83}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224520,"byte_end":224562,"line_start":64,"line_end":64,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":782},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224798,"byte_end":224812,"line_start":71,"line_end":71,"column_start":8,"column_end":22},"name":"vertical_sobel","qualname":"::gradients::vertical_sobel","value":"pub fn vertical_sobel(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SOBEL`](static.VERTICAL_SOBEL.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224671,"byte_end":224749,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224750,"byte_end":224790,"line_start":70,"line_end":70,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":783},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225030,"byte_end":225047,"line_start":77,"line_end":77,"column_start":8,"column_end":25},"name":"horizontal_scharr","qualname":"::gradients::horizontal_scharr","value":"pub fn horizontal_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_SCHARR`](static.HORIZONTAL_SCHARR.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224895,"byte_end":224979,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":224980,"byte_end":225022,"line_start":76,"line_end":76,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":784},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225262,"byte_end":225277,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"vertical_scharr","qualname":"::gradients::vertical_scharr","value":"pub fn vertical_scharr(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_SCHARR`](static.VERTICAL_SCHARR.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225133,"byte_end":225213,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225214,"byte_end":225254,"line_start":82,"line_end":82,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":785},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225498,"byte_end":225516,"line_start":89,"line_end":89,"column_start":8,"column_end":26},"name":"horizontal_prewitt","qualname":"::gradients::horizontal_prewitt","value":"pub fn horizontal_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)\n kernel to detect horizontal gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`HORIZONTAL_PREWITT`](static.HORIZONTAL_PREWITT.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225361,"byte_end":225447,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/ kernel to detect horizontal gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225448,"byte_end":225490,"line_start":88,"line_end":88,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":786},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225734,"byte_end":225750,"line_start":95,"line_end":95,"column_start":8,"column_end":24},"name":"vertical_prewitt","qualname":"::gradients::vertical_prewitt","value":"pub fn vertical_prewitt(&GrayImage) -> Image<Luma<i16>>","parent":null,"children":[],"decl_id":null,"docs":" Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)\n kernel to detect vertical gradients.\n","sig":null,"attributes":[{"value":"/ Convolves an image with the [`VERTICAL_PREWITT`](static.VERTICAL_PREWITT.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225603,"byte_end":225685,"line_start":93,"line_end":93,"column_start":1,"column_end":83}},{"value":"/ kernel to detect vertical gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225686,"byte_end":225726,"line_start":94,"line_end":94,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":787},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225915,"byte_end":225930,"line_start":100,"line_end":100,"column_start":8,"column_end":23},"name":"sobel_gradients","qualname":"::gradients::sobel_gradients","value":"pub fn sobel_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Sobel filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Sobel filters.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":225835,"byte_end":225907,"line_start":99,"line_end":99,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227849,"byte_end":227867,"line_start":170,"line_end":170,"column_start":8,"column_end":26},"name":"sobel_gradient_map","qualname":"::gradients::sobel_gradient_map","value":"pub fn sobel_gradient_map<P, F, Q>(&Image<P>, F) -> Image<Q> where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16> + 'static,\nQ: Pixel + 'static, ChannelMap<P, u16>: HasBlack, F: Fn(ChannelMap<P, u16>) ->\nQ","parent":null,"children":[],"decl_id":null,"docs":" Computes per-channel gradients using Sobel filters and calls `f`\n to compute each output pixel.","sig":null,"attributes":[{"value":"/ Computes per-channel gradients using Sobel filters and calls `f`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226039,"byte_end":226107,"line_start":104,"line_end":104,"column_start":1,"column_end":69}},{"value":"/ to compute each output pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226108,"byte_end":226141,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226142,"byte_end":226145,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226146,"byte_end":226160,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226161,"byte_end":226168,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226169,"byte_end":226194,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226195,"byte_end":226213,"line_start":110,"line_end":110,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226214,"byte_end":226243,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226244,"byte_end":226261,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ use imageproc::gradients::{sobel_gradient_map};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226262,"byte_end":226313,"line_start":113,"line_end":113,"column_start":1,"column_end":52}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226314,"byte_end":226334,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/ use std::cmp;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226335,"byte_end":226352,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226353,"byte_end":226356,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // A shallow horizontal gradient in the red","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226357,"byte_end":226404,"line_start":117,"line_end":117,"column_start":1,"column_end":48}},{"value":"/ // channel, a steeper vertical gradient in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226405,"byte_end":226455,"line_start":118,"line_end":118,"column_start":1,"column_end":51}},{"value":"/ // blue channel, constant in the green channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226456,"byte_end":226507,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ let input = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226508,"byte_end":226535,"line_start":120,"line_end":120,"column_start":1,"column_end":28}},{"value":"/     [0, 5, 0], [1, 5, 0], [2, 5, 0];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226536,"byte_end":226576,"line_start":121,"line_end":121,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 2], [1, 5, 2], [2, 5, 2];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226577,"byte_end":226617,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/     [0, 5, 4], [1, 5, 4], [2, 5, 4]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226618,"byte_end":226657,"line_start":123,"line_end":123,"column_start":1,"column_end":40}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226658,"byte_end":226664,"line_start":124,"line_end":124,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226665,"byte_end":226668,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ // Computing independent per-channel gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226669,"byte_end":226720,"line_start":126,"line_end":126,"column_start":1,"column_end":52}},{"value":"/ let channel_gradient = rgb_image!(type: u16,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226721,"byte_end":226769,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226770,"byte_end":226819,"line_start":128,"line_end":128,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0, 16], [ 8,  0, 16], [ 4,  0, 16];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226820,"byte_end":226869,"line_start":129,"line_end":129,"column_start":1,"column_end":50}},{"value":"/     [ 4,  0,  8], [ 8,  0,  8], [ 4,  0,  8]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226870,"byte_end":226918,"line_start":130,"line_end":130,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226919,"byte_end":226925,"line_start":131,"line_end":131,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226926,"byte_end":226929,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226930,"byte_end":226952,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| p),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226953,"byte_end":226995,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/     channel_gradient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":226996,"byte_end":227020,"line_start":135,"line_end":135,"column_start":1,"column_end":25}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227021,"byte_end":227027,"line_start":136,"line_end":136,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227028,"byte_end":227031,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227032,"byte_end":227086,"line_start":138,"line_end":138,"column_start":1,"column_end":55}},{"value":"/ // mean of its per-channel gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227087,"byte_end":227128,"line_start":139,"line_end":139,"column_start":1,"column_end":42}},{"value":"/ let mean_gradient = gray_image!(type: u16,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227129,"byte_end":227175,"line_start":140,"line_end":140,"column_start":1,"column_end":47}},{"value":"/     4, 5, 4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227176,"byte_end":227192,"line_start":141,"line_end":141,"column_start":1,"column_end":17}},{"value":"/     6, 8, 6;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227193,"byte_end":227209,"line_start":142,"line_end":142,"column_start":1,"column_end":17}},{"value":"/     4, 5, 4","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227210,"byte_end":227225,"line_start":143,"line_end":143,"column_start":1,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227226,"byte_end":227232,"line_start":144,"line_end":144,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227233,"byte_end":227236,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227237,"byte_end":227259,"line_start":146,"line_end":146,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227260,"byte_end":227300,"line_start":147,"line_end":147,"column_start":1,"column_end":41}},{"value":"/         let mean = (p[0] + p[1] + p[2]) / 3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227301,"byte_end":227349,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/         Luma([mean])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227350,"byte_end":227374,"line_start":149,"line_end":149,"column_start":1,"column_end":25}},{"value":"/     }),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227375,"byte_end":227386,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"/     mean_gradient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227387,"byte_end":227408,"line_start":151,"line_end":151,"column_start":1,"column_end":22}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227409,"byte_end":227415,"line_start":152,"line_end":152,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227416,"byte_end":227419,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // Defining the gradient of an RGB image to be the pixelwise","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227420,"byte_end":227484,"line_start":154,"line_end":154,"column_start":1,"column_end":65}},{"value":"/ // maximum of its per-channel gradients.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227485,"byte_end":227529,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ let max_gradient = gray_image!(type: u16,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227530,"byte_end":227575,"line_start":156,"line_end":156,"column_start":1,"column_end":46}},{"value":"/      8,  8,  8;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227576,"byte_end":227595,"line_start":157,"line_end":157,"column_start":1,"column_end":20}},{"value":"/     16, 16, 16;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227596,"byte_end":227615,"line_start":158,"line_end":158,"column_start":1,"column_end":20}},{"value":"/      8,  8,  8","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227616,"byte_end":227634,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227635,"byte_end":227641,"line_start":160,"line_end":160,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227642,"byte_end":227645,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227646,"byte_end":227668,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"/     sobel_gradient_map(&input, |p| {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227669,"byte_end":227709,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/         let max = cmp::max(cmp::max(p[0], p[1]), p[2]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227710,"byte_end":227769,"line_start":164,"line_end":164,"column_start":1,"column_end":60}},{"value":"/         Luma([max])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227770,"byte_end":227793,"line_start":165,"line_end":165,"column_start":1,"column_end":24}},{"value":"/     }),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227794,"byte_end":227805,"line_start":166,"line_end":166,"column_start":1,"column_end":12}},{"value":"/     max_gradient","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227806,"byte_end":227826,"line_start":167,"line_end":167,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227827,"byte_end":227833,"line_start":168,"line_end":168,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":227834,"byte_end":227841,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":793},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":228237,"byte_end":228254,"line_start":181,"line_end":181,"column_start":8,"column_end":25},"name":"prewitt_gradients","qualname":"::gradients::prewitt_gradients","value":"pub fn prewitt_gradients(&GrayImage) -> Image<Luma<u16>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the magnitudes of gradients in an image using Prewitt filters.\n","sig":null,"attributes":[{"value":"/ Returns the magnitudes of gradients in an image using Prewitt filters.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/gradients.rs","byte_start":228155,"byte_end":228229,"line_start":180,"line_end":180,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":802},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"haar","qualname":"::haar","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":2285},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":2289},{"krate":0,"index":814},{"krate":0,"index":1535},{"krate":0,"index":1552},{"krate":0,"index":1550},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1541},{"krate":0,"index":1553},{"krate":0,"index":1568},{"krate":0,"index":1566},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1558},{"krate":0,"index":1569},{"krate":0,"index":1593},{"krate":0,"index":1591},{"krate":0,"index":1588},{"krate":0,"index":1585},{"krate":0,"index":1586},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1580},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":1594},{"krate":0,"index":1619},{"krate":0,"index":1617},{"krate":0,"index":1614},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1605},{"krate":0,"index":1599},{"krate":0,"index":1597},{"krate":0,"index":1620},{"krate":0,"index":1645},{"krate":0,"index":1643},{"krate":0,"index":1640},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1631},{"krate":0,"index":1625},{"krate":0,"index":1623},{"krate":0,"index":1646},{"krate":0,"index":1672},{"krate":0,"index":1669},{"krate":0,"index":1665},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1651},{"krate":0,"index":829},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":840}],"decl_id":null,"docs":" Functions for creating and evaluating [Haar-like features].","sig":null,"attributes":[{"value":"/ Functions for creating and evaluating [Haar-like features].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234225,"byte_end":234288,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234289,"byte_end":234292,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Haar-like features]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234293,"byte_end":234367,"line_start":3,"line_end":3,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234725,"byte_end":234736,"line_start":15,"line_end":15,"column_start":12,"column_end":23},"name":"HaarFeature","qualname":"::haar::HaarFeature","value":"HaarFeature {  }","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540}],"decl_id":null,"docs":" A [Haar-like feature].","sig":null,"attributes":[{"value":"/ A [Haar-like feature].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234564,"byte_end":234590,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234591,"byte_end":234594,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [Haar-like feature]: https://en.wikipedia.org/wiki/Haar-like_features","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":234595,"byte_end":234668,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235675,"byte_end":235694,"line_start":44,"line_end":44,"column_start":5,"column_end":24},"name":"TwoRegionHorizontal","qualname":"::haar::HaarFeatureType::TwoRegionHorizontal","value":"HaarFeatureType::TwoRegionHorizontal","parent":{"krate":0,"index":1569},"children":[],"decl_id":null,"docs":" Two horizontally-adjacent regions of equal width.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Two horizontally-adjacent regions of equal width.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235512,"byte_end":235565,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235570,"byte_end":235579,"line_start":39,"line_end":39,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235584,"byte_end":235604,"line_start":40,"line_end":40,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235609,"byte_end":235630,"line_start":41,"line_end":41,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235635,"byte_end":235655,"line_start":42,"line_end":42,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235660,"byte_end":235670,"line_start":43,"line_end":43,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235883,"byte_end":235904,"line_start":51,"line_end":51,"column_start":5,"column_end":26},"name":"ThreeRegionHorizontal","qualname":"::haar::HaarFeatureType::ThreeRegionHorizontal","value":"HaarFeatureType::ThreeRegionHorizontal","parent":{"krate":0,"index":1569},"children":[],"decl_id":null,"docs":" Three horizontally-adjacent regions of equal width.\n <pre>\n      -----------------\n     |  *  |  &  |  *  |\n      -----------------\n </pre>\n","sig":null,"attributes":[{"value":"/ Three horizontally-adjacent regions of equal width.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235700,"byte_end":235755,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235760,"byte_end":235769,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"/      -----------------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235774,"byte_end":235800,"line_start":47,"line_end":47,"column_start":5,"column_end":31}},{"value":"/     |  *  |  &  |  *  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235805,"byte_end":235832,"line_start":48,"line_end":48,"column_start":5,"column_end":32}},{"value":"/      -----------------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235837,"byte_end":235863,"line_start":49,"line_end":49,"column_start":5,"column_end":31}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235868,"byte_end":235878,"line_start":50,"line_end":50,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236093,"byte_end":236110,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"TwoRegionVertical","qualname":"::haar::HaarFeatureType::TwoRegionVertical","value":"HaarFeatureType::TwoRegionVertical","parent":{"krate":0,"index":1569},"children":[],"decl_id":null,"docs":" Two vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Two vertically-adjacent regions of equal height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235910,"byte_end":235962,"line_start":52,"line_end":52,"column_start":5,"column_end":57}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235967,"byte_end":235976,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235981,"byte_end":235995,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236000,"byte_end":236015,"line_start":55,"line_end":55,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236020,"byte_end":236034,"line_start":56,"line_end":56,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236039,"byte_end":236054,"line_start":57,"line_end":57,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236059,"byte_end":236073,"line_start":58,"line_end":58,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236078,"byte_end":236088,"line_start":59,"line_end":59,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236340,"byte_end":236359,"line_start":71,"line_end":71,"column_start":5,"column_end":24},"name":"ThreeRegionVertical","qualname":"::haar::HaarFeatureType::ThreeRegionVertical","value":"HaarFeatureType::ThreeRegionVertical","parent":{"krate":0,"index":1569},"children":[],"decl_id":null,"docs":" Three vertically-adjacent regions of equal height.\n <pre>\n      -----\n     |  *  |\n      -----\n     |  &  |\n      -----\n     |  *  |\n      -----\n </pre>\n","sig":null,"attributes":[{"value":"/ Three vertically-adjacent regions of equal height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236116,"byte_end":236170,"line_start":61,"line_end":61,"column_start":5,"column_end":59}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236175,"byte_end":236184,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236189,"byte_end":236203,"line_start":63,"line_end":63,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236208,"byte_end":236223,"line_start":64,"line_end":64,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236228,"byte_end":236242,"line_start":65,"line_end":65,"column_start":5,"column_end":19}},{"value":"/     |  &  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236247,"byte_end":236262,"line_start":66,"line_end":66,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236267,"byte_end":236281,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/     |  *  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236286,"byte_end":236301,"line_start":68,"line_end":68,"column_start":5,"column_end":20}},{"value":"/      -----","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236306,"byte_end":236320,"line_start":69,"line_end":69,"column_start":5,"column_end":19}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236325,"byte_end":236335,"line_start":70,"line_end":70,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236650,"byte_end":236660,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"FourRegion","qualname":"::haar::HaarFeatureType::FourRegion","value":"HaarFeatureType::FourRegion","parent":{"krate":0,"index":1569},"children":[],"decl_id":null,"docs":" Four regions arranged in a two-by-two grid. The two columns\n have equal width and the two rows have equal height.\n <pre>\n      -----------\n     |  *  |  &  |\n      -----------\n     |  &  |  *  |\n      -----------\n </pre>\n","sig":null,"attributes":[{"value":"/ Four regions arranged in a two-by-two grid. The two columns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236365,"byte_end":236428,"line_start":72,"line_end":72,"column_start":5,"column_end":68}},{"value":"/ have equal width and the two rows have equal height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236433,"byte_end":236489,"line_start":73,"line_end":73,"column_start":5,"column_end":61}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236494,"byte_end":236503,"line_start":74,"line_end":74,"column_start":5,"column_end":14}},{"value":"/      -----------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236508,"byte_end":236528,"line_start":75,"line_end":75,"column_start":5,"column_end":25}},{"value":"/     |  *  |  &  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236533,"byte_end":236554,"line_start":76,"line_end":76,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236559,"byte_end":236579,"line_start":77,"line_end":77,"column_start":5,"column_end":25}},{"value":"/     |  &  |  *  |","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236584,"byte_end":236605,"line_start":78,"line_end":78,"column_start":5,"column_end":26}},{"value":"/      -----------","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236610,"byte_end":236630,"line_start":79,"line_end":79,"column_start":5,"column_end":25}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236635,"byte_end":236645,"line_start":80,"line_end":80,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235490,"byte_end":235505,"line_start":37,"line_end":37,"column_start":10,"column_end":25},"name":"HaarFeatureType","qualname":"::haar::HaarFeatureType","value":"pub enum HaarFeatureType {\n\n    /// Two horizontally-adjacent regions of equal width.\n    /// <pre>\n    ///      -----------\n    ///     |  *  |  &  |\n    ///      -----------\n    /// </pre>\n    TwoRegionHorizontal,\n\n    /// Three horizontally-adjacent regions of equal width.\n    /// <pre>\n    ///      -----------------\n    ///     |  *  |  &  |  *  |\n    ///      -----------------\n    /// </pre>\n    ThreeRegionHorizontal,\n\n    /// Two vertically-adjacent regions of equal height.\n    /// <pre>\n    ///      -----\n    ///     |  *  |\n    ///      -----\n    ///     |  &  |\n    ///      -----\n    /// </pre>\n    TwoRegionVertical,\n\n    /// Three vertically-adjacent regions of equal height.\n    /// <pre>\n    ///      -----\n    ///     |  *  |\n    ///      -----\n    ///     |  &  |\n    ///      -----\n    ///     |  *  |\n    ///      -----\n    /// </pre>\n    ThreeRegionVertical,\n\n    /// Four regions arranged in a two-by-two grid. The two columns\n    /// have equal width and the two rows have equal height.\n    /// <pre>\n    ///      -----------\n    ///     |  *  |  &  |\n    ///      -----------\n    ///     |  &  |  *  |\n    ///      -----------\n    /// </pre>\n    FourRegion,\n}","parent":null,"children":[{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578}],"decl_id":null,"docs":" The type of a Haar-like feature determines the number of regions it contains and their orientation.\n The diagrams in the comments for each variant use the symbols (*, &) to represent either\n (+, -) or (-, +), depending on which `Sign` the feature type is used with.\n","sig":null,"attributes":[{"value":"/ The type of a Haar-like feature determines the number of regions it contains and their orientation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235154,"byte_end":235257,"line_start":33,"line_end":33,"column_start":1,"column_end":104}},{"value":"/ The diagrams in the comments for each variant use the symbols (*, &) to represent either","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235258,"byte_end":235350,"line_start":34,"line_end":34,"column_start":1,"column_end":93}},{"value":"/ (+, -) or (-, +), depending on which `Sign` the feature type is used with.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":235351,"byte_end":235429,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":818},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":237256,"byte_end":237264,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"evaluate","qualname":"<HaarFeature>::evaluate","value":"pub fn evaluate(&Self, &Image<Luma<u32>>) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Evaluates the Haar-like feature on an integral image.\n","sig":null,"attributes":[{"value":"/ Evaluates the Haar-like feature on an integral image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":237187,"byte_end":237244,"line_start":98,"line_end":98,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":826},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":242938,"byte_end":242961,"line_start":262,"line_end":262,"column_start":8,"column_end":31},"name":"enumerate_haar_features","qualname":"::haar::enumerate_haar_features","value":"pub fn enumerate_haar_features(u8, u8) -> Vec<HaarFeature>","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of all valid Haar-like features for an image with given width and height.\n","sig":null,"attributes":[{"value":"/ Returns a vector of all valid Haar-like features for an image with given width and height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":242836,"byte_end":242930,"line_start":261,"line_end":261,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":836},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246557,"byte_end":246580,"line_start":361,"line_end":361,"column_start":8,"column_end":31},"name":"number_of_haar_features","qualname":"::haar::number_of_haar_features","value":"pub fn number_of_haar_features(u32, u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of distinct Haar-like features for an image of the given dimensions.","sig":null,"attributes":[{"value":"/ Returns the number of distinct Haar-like features for an image of the given dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":245905,"byte_end":245996,"line_start":350,"line_end":350,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":245997,"byte_end":246000,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ Includes positive and negative, two and three region, vertical and horizontal features,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246001,"byte_end":246092,"line_start":352,"line_end":352,"column_start":1,"column_end":92}},{"value":"/ as well as positive and negative four region features.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246093,"byte_end":246151,"line_start":353,"line_end":353,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246152,"byte_end":246155,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ Consider a `k`-region horizontal feature in an image of height `1` and width `w`. The largest valid block size","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246156,"byte_end":246270,"line_start":355,"line_end":355,"column_start":1,"column_end":115}},{"value":"/ for such a feature is `M = floor(w / k)`, and for a block size `s` there are `(w + 1) - 2 * s`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246271,"byte_end":246369,"line_start":356,"line_end":356,"column_start":1,"column_end":99}},{"value":"/ valid locations for the leftmost column of this feature.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246370,"byte_end":246430,"line_start":357,"line_end":357,"column_start":1,"column_end":61}},{"value":"/ Summing over `s` gives `M * (w + 1) - k * [(M * (M + 1)) / 2]`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246431,"byte_end":246498,"line_start":358,"line_end":358,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246499,"byte_end":246502,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ An equivalent argument applies vertically.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":246503,"byte_end":246549,"line_start":360,"line_end":360,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":838},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247431,"byte_end":247448,"line_start":384,"line_end":384,"column_start":8,"column_end":25},"name":"draw_haar_feature","qualname":"::haar::draw_haar_feature","value":"pub fn draw_haar_feature<I>(&I, HaarFeature) -> Image<I::Pixel> where\nI: GenericImage, I::Pixel: HasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image, drawing pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247289,"byte_end":247354,"line_start":382,"line_end":382,"column_start":1,"column_end":66}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247355,"byte_end":247423,"line_start":383,"line_end":383,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":840},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247894,"byte_end":247915,"line_start":397,"line_end":397,"column_start":8,"column_end":29},"name":"draw_haar_feature_mut","qualname":"::haar::draw_haar_feature_mut","value":"pub fn draw_haar_feature_mut<I>(&mut I, HaarFeature) where I: GenericImage,\nI::Pixel: HasBlack + HasWhite","parent":null,"children":[],"decl_id":null,"docs":" Draws the given Haar-like feature on an image in place, drawing pixels\n with a positive sign white and those with a negative sign black.\n","sig":null,"attributes":[{"value":"/ Draws the given Haar-like feature on an image in place, drawing pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247743,"byte_end":247817,"line_start":395,"line_end":395,"column_start":1,"column_end":75}},{"value":"/ with a positive sign white and those with a negative sign black.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":247818,"byte_end":247886,"line_start":396,"line_end":396,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":842},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hog","qualname":"::hog","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":2309},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":1674},{"krate":0,"index":1690},{"krate":0,"index":1689},{"krate":0,"index":1687},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":857},{"krate":0,"index":1692},{"krate":0,"index":1708},{"krate":0,"index":1707},{"krate":0,"index":1705},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":859},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":1710},{"krate":0,"index":1724},{"krate":0,"index":1723},{"krate":0,"index":1719},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":913},{"krate":0,"index":924}],"decl_id":null,"docs":" [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)\n and helpers for visualizing them.\n","sig":null,"attributes":[{"value":"/ [HoG features](https://en.wikipedia.org/wiki/Histogram_of_oriented_gradients)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259446,"byte_end":259527,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ and helpers for visualizing them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259528,"byte_end":259565,"line_start":2,"line_end":2,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1674},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259870,"byte_end":259880,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"HogOptions","qualname":"::hog::HogOptions","value":"HogOptions { orientations, signed, cell_side, block_side, block_stride }","parent":null,"children":[{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679}],"decl_id":null,"docs":" Parameters for HoG descriptors.\n","sig":null,"attributes":[{"value":"/ Parameters for HoG descriptors.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259778,"byte_end":259813,"line_start":11,"line_end":11,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1675},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259936,"byte_end":259948,"line_start":15,"line_end":15,"column_start":9,"column_end":21},"name":"orientations","qualname":"::hog::HogOptions::orientations","value":"usize","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Number of gradient orientation bins.\n","sig":null,"attributes":[{"value":"/ Number of gradient orientation bins.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259887,"byte_end":259927,"line_start":14,"line_end":14,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260036,"byte_end":260042,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"name":"signed","qualname":"::hog::HogOptions::signed","value":"bool","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Whether gradients in opposite directions are treated as equal.\n","sig":null,"attributes":[{"value":"/ Whether gradients in opposite directions are treated as equal.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":259961,"byte_end":260027,"line_start":16,"line_end":16,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1677},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260102,"byte_end":260111,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"cell_side","qualname":"::hog::HogOptions::cell_side","value":"usize","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Width and height of cell in pixels.\n","sig":null,"attributes":[{"value":"/ Width and height of cell in pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260054,"byte_end":260093,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1678},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260172,"byte_end":260182,"line_start":21,"line_end":21,"column_start":9,"column_end":19},"name":"block_side","qualname":"::hog::HogOptions::block_side","value":"usize","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Width and height of block in cells.\n","sig":null,"attributes":[{"value":"/ Width and height of block in cells.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260124,"byte_end":260163,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1679},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260264,"byte_end":260276,"line_start":23,"line_end":23,"column_start":9,"column_end":21},"name":"block_stride","qualname":"::hog::HogOptions::block_stride","value":"usize","parent":{"krate":0,"index":1674},"children":[],"decl_id":null,"docs":" Offset of the start of one block from the next in cells.\n","sig":null,"attributes":[{"value":"/ Offset of the start of one block from the next in cells.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260195,"byte_end":260255,"line_start":22,"line_end":22,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260442,"byte_end":260445,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<HogOptions>::new","value":"pub fn new(usize, bool, usize, usize, usize) -> HogOptions","parent":null,"children":[],"decl_id":null,"docs":" User-provided options, prior to validation.\n","sig":null,"attributes":[{"value":"/ User-provided options, prior to validation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260383,"byte_end":260430,"line_start":27,"line_end":27,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1692},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":261040,"byte_end":261047,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"HogSpec","qualname":"::hog::HogSpec","value":"HogSpec {  }","parent":null,"children":[{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697}],"decl_id":null,"docs":" HoG options plus values calculated from these options and the desired\n image dimensions. Validation must occur when instances of this struct\n are created - functions receiving a spec will assume that it is valid.\n","sig":null,"attributes":[{"value":"/ HoG options plus values calculated from these options and the desired","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260761,"byte_end":260834,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ image dimensions. Validation must occur when instances of this struct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260835,"byte_end":260908,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ are created - functions receiving a spec will assume that it is valid.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260909,"byte_end":260983,"line_start":47,"line_end":47,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":261646,"byte_end":261658,"line_start":64,"line_end":64,"column_start":12,"column_end":24},"name":"from_options","qualname":"<HogSpec>::from_options","value":"pub fn from_options(u32, u32, HogOptions) -> Result<HogSpec, String>","parent":null,"children":[],"decl_id":null,"docs":" Returns an error message if image dimensions aren't compatible with the provided options.\n","sig":null,"attributes":[{"value":"/ Returns an error message if image dimensions aren't compatible with the provided options.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":261541,"byte_end":261634,"line_start":63,"line_end":63,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":264488,"byte_end":264505,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"descriptor_length","qualname":"<HogSpec>::descriptor_length","value":"pub fn descriptor_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The total size in floats of the HoG descriptor with these dimensions.\n","sig":null,"attributes":[{"value":"/ The total size in floats of the HoG descriptor with these dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":264403,"byte_end":264476,"line_start":136,"line_end":136,"column_start":5,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":874},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":266550,"byte_end":266553,"line_start":191,"line_end":191,"column_start":8,"column_end":11},"name":"hog","qualname":"::hog::hog","value":"pub fn hog(&GrayImage, HogOptions) -> Result<Vec<f32>, String>","parent":null,"children":[],"decl_id":null,"docs":" Computes the HoG descriptor of an image, or None if the provided\n options are incompatible with the image size.\n","sig":null,"attributes":[{"value":"/ Computes the HoG descriptor of an image, or None if the provided","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":266336,"byte_end":266404,"line_start":188,"line_end":188,"column_start":1,"column_end":69}},{"value":"/ options are incompatible with the image size.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":266405,"byte_end":266454,"line_start":189,"line_end":189,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":879},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":268922,"byte_end":268937,"line_start":255,"line_end":255,"column_start":8,"column_end":23},"name":"cell_histograms","qualname":"::hog::cell_histograms","value":"pub fn cell_histograms(&GrayImage, HogSpec) -> Array3d<f32>","parent":null,"children":[],"decl_id":null,"docs":" Computes orientation histograms for each cell of an image. Assumes that\n the provided dimensions are valid.\n","sig":null,"attributes":[{"value":"/ Computes orientation histograms for each cell of an image. Assumes that","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":268800,"byte_end":268875,"line_start":253,"line_end":253,"column_start":1,"column_end":76}},{"value":"/ the provided dimensions are valid.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":268876,"byte_end":268914,"line_start":254,"line_end":254,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":890},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":273051,"byte_end":273067,"line_start":371,"line_end":371,"column_start":8,"column_end":24},"name":"render_hist_grid","qualname":"::hog::render_hist_grid","value":"pub fn render_hist_grid(u32, &View3d<, f32>, bool) -> Image<Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Visualises an array of orientation histograms.\n The dimensions of the provided Array3d are orientation bucket,\n horizontal location of the cell, then vertical location of the cell.\n Note that we ignore block-level aggregation or normalisation here.\n Each rendered star has side length `star_side`, so the image will have\n width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.\n","sig":null,"attributes":[{"value":"/ Visualises an array of orientation histograms.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272625,"byte_end":272675,"line_start":365,"line_end":365,"column_start":1,"column_end":51}},{"value":"/ The dimensions of the provided Array3d are orientation bucket,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272676,"byte_end":272742,"line_start":366,"line_end":366,"column_start":1,"column_end":67}},{"value":"/ horizontal location of the cell, then vertical location of the cell.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272743,"byte_end":272815,"line_start":367,"line_end":367,"column_start":1,"column_end":73}},{"value":"/ Note that we ignore block-level aggregation or normalisation here.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272816,"byte_end":272886,"line_start":368,"line_end":368,"column_start":1,"column_end":71}},{"value":"/ Each rendered star has side length `star_side`, so the image will have","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272887,"byte_end":272961,"line_start":369,"line_end":369,"column_start":1,"column_end":75}},{"value":"/ width grid.lengths[1] * `star_side` and height grid.lengths[2] * `star_side`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":272962,"byte_end":273043,"line_start":370,"line_end":370,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275434,"byte_end":275441,"line_start":435,"line_end":435,"column_start":12,"column_end":19},"name":"Array3d","qualname":"::hog::Array3d","value":"Array3d {  }","parent":null,"children":[{"krate":0,"index":899},{"krate":0,"index":900}],"decl_id":null,"docs":" A 3d array that owns its data.\n","sig":null,"attributes":[{"value":"/ A 3d array that owns its data.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275388,"byte_end":275422,"line_start":434,"line_end":434,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":902},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275643,"byte_end":275649,"line_start":443,"line_end":443,"column_start":12,"column_end":18},"name":"View3d","qualname":"::hog::View3d","value":"View3d {  }","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":906}],"decl_id":null,"docs":" A view into a 3d array.\n","sig":null,"attributes":[{"value":"/ A view into a 3d array.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275604,"byte_end":275631,"line_start":442,"line_end":442,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":276121,"byte_end":276129,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"name":"view_mut","qualname":"<Array3d<T>>::view_mut","value":"pub fn view_mut(&mut Self) -> View3d<, T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a 3d view of the data.\n","sig":null,"attributes":[{"value":"/ Provides a 3d view of the data.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":276074,"byte_end":276109,"line_start":457,"line_end":457,"column_start":5,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":926},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hough","qualname":"::hough","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":2333},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":1726},{"krate":0,"index":1737},{"krate":0,"index":1735},{"krate":0,"index":1733},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1738},{"krate":0,"index":1752},{"krate":0,"index":1750},{"krate":0,"index":1748},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":938},{"krate":0,"index":940},{"krate":0,"index":942},{"krate":0,"index":944},{"krate":0,"index":946},{"krate":0,"index":947}],"decl_id":null,"docs":" Line detection via the [Hough transform].","sig":null,"attributes":[{"value":"/ Line detection via the [Hough transform].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283400,"byte_end":283445,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283446,"byte_end":283449,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [Hough transform]: https://en.wikipedia.org/wiki/Hough_transform","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283450,"byte_end":283518,"line_start":3,"line_end":3,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283829,"byte_end":283838,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"PolarLine","qualname":"::hough::PolarLine","value":"PolarLine { r, angle_in_degrees }","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1728}],"decl_id":null,"docs":" A detected line, in polar coordinates.\n","sig":null,"attributes":[{"value":"/ A detected line, in polar coordinates.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283734,"byte_end":283776,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283937,"byte_end":283938,"line_start":15,"line_end":15,"column_start":9,"column_end":10},"name":"r","qualname":"::hough::PolarLine::r","value":"f32","parent":{"krate":0,"index":1726},"children":[],"decl_id":null,"docs":" Signed distance of the line from the origin (top-left of the image), in pixels.\n","sig":null,"attributes":[{"value":"/ Signed distance of the line from the origin (top-left of the image), in pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283845,"byte_end":283928,"line_start":14,"line_end":14,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284055,"byte_end":284071,"line_start":18,"line_end":18,"column_start":9,"column_end":25},"name":"angle_in_degrees","qualname":"::hough::PolarLine::angle_in_degrees","value":"u32","parent":{"krate":0,"index":1726},"children":[],"decl_id":null,"docs":" Clockwise angle in degrees between the x-axis and the line.\n Always between 0 and 180.\n","sig":null,"attributes":[{"value":"/ Clockwise angle in degrees between the x-axis and the line.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":283949,"byte_end":284012,"line_start":16,"line_end":16,"column_start":5,"column_end":68}},{"value":"/ Always between 0 and 180.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284017,"byte_end":284046,"line_start":17,"line_end":17,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284175,"byte_end":284195,"line_start":23,"line_end":23,"column_start":12,"column_end":32},"name":"LineDetectionOptions","qualname":"::hough::LineDetectionOptions","value":"LineDetectionOptions { vote_threshold, suppression_radius }","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740}],"decl_id":null,"docs":" Options for Hough line detection.\n","sig":null,"attributes":[{"value":"/ Options for Hough line detection.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284081,"byte_end":284118,"line_start":21,"line_end":21,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284265,"byte_end":284279,"line_start":25,"line_end":25,"column_start":9,"column_end":23},"name":"vote_threshold","qualname":"::hough::LineDetectionOptions::vote_threshold","value":"u32","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Number of votes required to be detected as a line.\n","sig":null,"attributes":[{"value":"/ Number of votes required to be detected as a line.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284202,"byte_end":284256,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284596,"byte_end":284614,"line_start":30,"line_end":30,"column_start":9,"column_end":27},"name":"suppression_radius","qualname":"::hough::LineDetectionOptions::suppression_radius","value":"u32","parent":{"krate":0,"index":1738},"children":[],"decl_id":null,"docs":" Non-maxima suppression is applied to accumulator buckets before\n returning lines. Only lines which have the greatest vote in the\n block centred on them of side length `2 * suppression_radius + 1`\n are returned. Set to `0` if you don't want to apply non-maxima suppression.\n","sig":null,"attributes":[{"value":"/ Non-maxima suppression is applied to accumulator buckets before","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284290,"byte_end":284357,"line_start":26,"line_end":26,"column_start":5,"column_end":72}},{"value":"/ returning lines. Only lines which have the greatest vote in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284362,"byte_end":284429,"line_start":27,"line_end":27,"column_start":5,"column_end":72}},{"value":"/ block centred on them of side length `2 * suppression_radius + 1`","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284434,"byte_end":284503,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ are returned. Set to `0` if you don't want to apply non-maxima suppression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284508,"byte_end":284587,"line_start":29,"line_end":29,"column_start":5,"column_end":84}}]},{"kind":"Function","id":{"krate":0,"index":938},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284867,"byte_end":284879,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"detect_lines","qualname":"::hough::detect_lines","value":"pub fn detect_lines(&GrayImage, LineDetectionOptions) -> Vec<PolarLine>","parent":null,"children":[],"decl_id":null,"docs":" Detects lines in a binary input image using the Hough transform.","sig":null,"attributes":[{"value":"/ Detects lines in a binary input image using the Hough transform.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284624,"byte_end":284692,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284693,"byte_end":284696,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Points are considered to be in the foreground (and thus vote for lines)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284697,"byte_end":284772,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ if their intensity is non-zero.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284773,"byte_end":284808,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284809,"byte_end":284812,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":284813,"byte_end":284859,"line_start":38,"line_end":38,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":940},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":286951,"byte_end":286967,"line_start":99,"line_end":99,"column_start":8,"column_end":24},"name":"draw_polar_lines","qualname":"::hough::draw_polar_lines","value":"pub fn draw_polar_lines<P>(&Image<P>, &[PolarLine], P) -> Image<P> where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":286823,"byte_end":286892,"line_start":96,"line_end":96,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":286893,"byte_end":286896,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":286897,"byte_end":286943,"line_start":98,"line_end":98,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":942},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":287286,"byte_end":287306,"line_start":111,"line_end":111,"column_start":8,"column_end":28},"name":"draw_polar_lines_mut","qualname":"::hough::draw_polar_lines_mut","value":"pub fn draw_polar_lines_mut<P>(&mut Image<P>, &[PolarLine], P) where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Draws each element of `lines` on `image` in the provided `color`.","sig":null,"attributes":[{"value":"/ Draws each element of `lines` on `image` in the provided `color`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":287158,"byte_end":287227,"line_start":108,"line_end":108,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":287228,"byte_end":287231,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ See ./examples/hough.rs for example usage.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hough.rs","byte_start":287232,"byte_end":287278,"line_start":110,"line_end":110,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":948},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"integral_image","qualname":"::integral_image","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","parent":null,"children":[{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":2349},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":2355},{"krate":0,"index":960},{"krate":0,"index":2357},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":976},{"krate":0,"index":983},{"krate":0,"index":990},{"krate":0,"index":997},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"decl_id":null,"docs":" Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)\n and running sums of rows and columns.\n","sig":null,"attributes":[{"value":"/ Functions for computing [integral images](https://en.wikipedia.org/wiki/Summed_area_table)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":300858,"byte_end":300952,"line_start":1,"line_end":1,"column_start":1,"column_end":95}},{"value":"/ and running sums of rows and columns.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":300953,"byte_end":300994,"line_start":2,"line_end":2,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":962},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302832,"byte_end":302846,"line_start":50,"line_end":50,"column_start":8,"column_end":22},"name":"integral_image","qualname":"::integral_image::integral_image","value":"pub fn integral_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>> where\nP: Pixel<Subpixel = u8> + WithChannel<T> + 'static, T: From<u8> + Primitive +\nAddAssign + 'static","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of an image. Channels are summed independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of an image. Channels are summed independently.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301173,"byte_end":301252,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301253,"byte_end":301256,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ An integral image I has width and height one greater than its source image F,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301257,"byte_end":301338,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ and is defined by I(x, y) = sum of F(x', y') for x' < x, y' < y, i.e. each pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301339,"byte_end":301423,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ in the integral image contains the sum of the pixel intensities of all input pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301424,"byte_end":301511,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/ that are strictly above it and strictly to its left. In particular, the left column","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301512,"byte_end":301599,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ and top row of an integral image are all 0, and the value of the bottom right pixel of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301600,"byte_end":301690,"line_start":15,"line_end":15,"column_start":1,"column_end":91}},{"value":"/ an integral image is equal to the sum of all pixels in the source image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301691,"byte_end":301767,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301768,"byte_end":301771,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Integral images have the helpful property of allowing us to","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301772,"byte_end":301835,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"/ compute the sum of pixel intensities in a rectangular region of an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301836,"byte_end":301912,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ in constant time. Specifically, given a rectangle [l, r] * [t, b] in F,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301913,"byte_end":301988,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ the sum of the pixels in this rectangle is","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":301989,"byte_end":302035,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ I(r + 1, b + 1) - I(r + 1, t) - I(l, b + 1) + I(l, t).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302036,"byte_end":302094,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302095,"byte_end":302098,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302099,"byte_end":302113,"line_start":24,"line_end":24,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302114,"byte_end":302121,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302122,"byte_end":302147,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302148,"byte_end":302166,"line_start":27,"line_end":27,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302167,"byte_end":302196,"line_start":28,"line_end":28,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302197,"byte_end":302214,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, sum_image_pixels};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302215,"byte_end":302285,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302286,"byte_end":302289,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302290,"byte_end":302318,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302319,"byte_end":302335,"line_start":33,"line_end":33,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302336,"byte_end":302353,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302354,"byte_end":302357,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302358,"byte_end":302399,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302400,"byte_end":302422,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/     0,  1,  3,  6;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302423,"byte_end":302445,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/     0,  5, 12, 21);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302446,"byte_end":302469,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302470,"byte_end":302473,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_image::<_, u32>(&image), integral);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302474,"byte_end":302540,"line_start":41,"line_end":41,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302541,"byte_end":302544,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the right two columns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302545,"byte_end":302606,"line_start":43,"line_end":43,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 2 + 3 + 5 + 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302607,"byte_end":302681,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302682,"byte_end":302685,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of all pixels in the top row","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302686,"byte_end":302737,"line_start":46,"line_end":46,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 2 + 3);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302738,"byte_end":302808,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302809,"byte_end":302816,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":302817,"byte_end":302824,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":965},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":304071,"byte_end":304093,"line_start":89,"line_end":89,"column_start":8,"column_end":30},"name":"integral_squared_image","qualname":"::integral_image::integral_squared_image","value":"pub fn integral_squared_image<P, T>(&Image<P>) -> Image<ChannelMap<P, T>>\nwhere P: Pixel<Subpixel = u8> + WithChannel<T> + 'static, T: From<u8> +\nPrimitive + AddAssign + 'static","parent":null,"children":[],"decl_id":null,"docs":" Computes the 2d running sum of the squares of the intensities in an image. Channels are summed\n independently.","sig":null,"attributes":[{"value":"/ Computes the 2d running sum of the squares of the intensities in an image. Channels are summed","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303054,"byte_end":303152,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"/ independently.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303153,"byte_end":303171,"line_start":59,"line_end":59,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303172,"byte_end":303175,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303176,"byte_end":303285,"line_start":61,"line_end":61,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303286,"byte_end":303289,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303290,"byte_end":303304,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303305,"byte_end":303312,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303313,"byte_end":303338,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303339,"byte_end":303357,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303358,"byte_end":303387,"line_start":67,"line_end":67,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303388,"byte_end":303405,"line_start":68,"line_end":68,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_squared_image, sum_image_pixels};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303406,"byte_end":303484,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303485,"byte_end":303488,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303489,"byte_end":303517,"line_start":71,"line_end":71,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303518,"byte_end":303534,"line_start":72,"line_end":72,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303535,"byte_end":303552,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303553,"byte_end":303556,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let integral = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303557,"byte_end":303598,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/     0,  0,  0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303599,"byte_end":303621,"line_start":76,"line_end":76,"column_start":1,"column_end":23}},{"value":"/     0,  1,  5, 14;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303622,"byte_end":303644,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"/     0, 17, 46, 91);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303645,"byte_end":303668,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303669,"byte_end":303672,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(integral_squared_image::<_, u32>(&image), integral);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303673,"byte_end":303747,"line_start":80,"line_end":80,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303748,"byte_end":303751,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the right two columns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303752,"byte_end":303828,"line_start":82,"line_end":82,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 1, 0, 2, 1)[0], 4 + 9 + 25 + 36);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303829,"byte_end":303905,"line_start":83,"line_end":83,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303906,"byte_end":303909,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // Compute the sum of the squares of all pixels in the top row","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303910,"byte_end":303976,"line_start":85,"line_end":85,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(sum_image_pixels(&integral, 0, 0, 2, 0)[0], 1 + 4 + 9);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":303977,"byte_end":304047,"line_start":86,"line_end":86,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":304048,"byte_end":304055,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":304056,"byte_end":304063,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":971},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306769,"byte_end":306778,"line_start":151,"line_end":151,"column_start":11,"column_end":20},"name":"ArrayData","qualname":"::integral_image::ArrayData","value":"ArrayData","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975}],"decl_id":null,"docs":" Hack to get around lack of const generics. See comment on `sum_image_pixels`.\n","sig":null,"attributes":[{"value":"/ Hack to get around lack of const generics. See comment on `sum_image_pixels`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306677,"byte_end":306758,"line_start":150,"line_end":150,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":972},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306889,"byte_end":306897,"line_start":154,"line_end":154,"column_start":10,"column_end":18},"name":"DataType","qualname":"::integral_image::ArrayData::DataType","value":"type DataType;","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" The type of the data for this array.\n e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.\n","sig":null,"attributes":[{"value":"/ The type of the data for this array.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306785,"byte_end":306825,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"/ e.g. `[T; 1]` for `Luma`, `[T; 3]` for `Rgb`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306830,"byte_end":306879,"line_start":153,"line_end":153,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306972,"byte_end":306976,"line_start":157,"line_end":157,"column_start":8,"column_end":12},"name":"data","qualname":"::integral_image::ArrayData::data","value":"pub fn data(&Self) -> Self::DataType","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" Get the data from this pixel as a constant length array.\n","sig":null,"attributes":[{"value":"/ Get the data from this pixel as a constant length array.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":306904,"byte_end":306964,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307068,"byte_end":307071,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"add","qualname":"::integral_image::ArrayData::add","value":"pub fn add(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" Add the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Add the elements of two data arrays elementwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307008,"byte_end":307060,"line_start":159,"line_end":159,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307205,"byte_end":307208,"line_start":163,"line_end":163,"column_start":8,"column_end":11},"name":"sub","qualname":"::integral_image::ArrayData::sub","value":"pub fn sub(Self::DataType, Self::DataType) -> Self::DataType","parent":{"krate":0,"index":971},"children":[],"decl_id":null,"docs":" Subtract the elements of two data arrays elementwise.\n","sig":null,"attributes":[{"value":"/ Subtract the elements of two data arrays elementwise.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307140,"byte_end":307197,"line_start":162,"line_end":162,"column_start":5,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":997},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309415,"byte_end":309431,"line_start":238,"line_end":238,"column_start":8,"column_end":24},"name":"sum_image_pixels","qualname":"::integral_image::sum_image_pixels","value":"pub fn sum_image_pixels<P>(&Image<P>, u32, u32, u32, u32) -> P::DataType where\nP: Pixel + ArrayData + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F.","sig":null,"attributes":[{"value":"/ Sums the pixels in positions [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308834,"byte_end":308932,"line_start":229,"line_end":229,"column_start":1,"column_end":99}},{"value":"/ integral image of F.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308933,"byte_end":308957,"line_start":230,"line_end":230,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308958,"byte_end":308961,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ The of `ArrayData` here is due to lack of const generics. This library contains","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308962,"byte_end":309045,"line_start":232,"line_end":232,"column_start":1,"column_end":84}},{"value":"/ implementations of `ArrayData` for `Luma`, `Rgb` and `Rgba` for any element type `T` that","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309046,"byte_end":309139,"line_start":233,"line_end":233,"column_start":1,"column_end":94}},{"value":"/ implements `Primitive`. In that case, this function returns `[T; 1]` for an image","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309140,"byte_end":309225,"line_start":234,"line_end":234,"column_start":1,"column_end":86}},{"value":"/ whose pixels are of type `Luma`, `[T; 3]` for `Rgb` pixels and `[T; 4]` for `Rgba` pixels.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309226,"byte_end":309320,"line_start":235,"line_end":235,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309321,"byte_end":309324,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":309325,"byte_end":309407,"line_start":237,"line_end":237,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":999},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311175,"byte_end":311183,"line_start":291,"line_end":291,"column_start":8,"column_end":16},"name":"variance","qualname":"::integral_image::variance","value":"pub fn variance(&Image<Luma<u32>>, &Image<Luma<u32>>, u32, u32, u32, u32)\n-> f64","parent":null,"children":[],"decl_id":null,"docs":" Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the\n integral image of F and `integral_squared_image` is the integral image of the squares of the\n pixels in F.","sig":null,"attributes":[{"value":"/ Computes the variance of [left, right] * [top, bottom] in F, where `integral_image` is the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310095,"byte_end":310189,"line_start":259,"line_end":259,"column_start":1,"column_end":95}},{"value":"/ integral image of F and `integral_squared_image` is the integral image of the squares of the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310190,"byte_end":310286,"line_start":260,"line_end":260,"column_start":1,"column_end":97}},{"value":"/ pixels in F.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310287,"byte_end":310303,"line_start":261,"line_end":261,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310304,"byte_end":310307,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ See the [`integral_image`](fn.integral_image.html) documentation for more information on integral images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310308,"byte_end":310417,"line_start":263,"line_end":263,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310418,"byte_end":310421,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/# Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310422,"byte_end":310435,"line_start":265,"line_end":265,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310436,"byte_end":310443,"line_start":266,"line_end":266,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310444,"byte_end":310469,"line_start":267,"line_end":267,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310470,"byte_end":310488,"line_start":268,"line_end":268,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310489,"byte_end":310518,"line_start":269,"line_end":269,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310519,"byte_end":310536,"line_start":270,"line_end":270,"column_start":1,"column_end":18}},{"value":"/ use std::f64;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310537,"byte_end":310554,"line_start":271,"line_end":271,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::{integral_image, integral_squared_image, variance};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310555,"byte_end":310641,"line_start":272,"line_end":272,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310642,"byte_end":310645,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310646,"byte_end":310674,"line_start":274,"line_end":274,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310675,"byte_end":310691,"line_start":275,"line_end":275,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310692,"byte_end":310709,"line_start":276,"line_end":276,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310710,"byte_end":310713,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ let integral = integral_image(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310714,"byte_end":310756,"line_start":278,"line_end":278,"column_start":1,"column_end":43}},{"value":"/ let integral_squared = integral_squared_image(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310757,"byte_end":310815,"line_start":279,"line_end":279,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310816,"byte_end":310819,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ // Compute the variance of the pixels in the right two columns","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310820,"byte_end":310886,"line_start":281,"line_end":281,"column_start":1,"column_end":67}},{"value":"/ let mean: f64 = (2.0 + 3.0 + 5.0 + 6.0) / 4.0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310887,"byte_end":310937,"line_start":282,"line_end":282,"column_start":1,"column_end":51}},{"value":"/ let var = ((2.0 - mean).powi(2)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310938,"byte_end":310973,"line_start":283,"line_end":283,"column_start":1,"column_end":36}},{"value":"/     + (3.0 - mean).powi(2)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":310974,"byte_end":311004,"line_start":284,"line_end":284,"column_start":1,"column_end":31}},{"value":"/     + (5.0 - mean).powi(2)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311005,"byte_end":311035,"line_start":285,"line_end":285,"column_start":1,"column_end":31}},{"value":"/     + (6.0 - mean).powi(2)) / 4.0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311036,"byte_end":311074,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311075,"byte_end":311078,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(variance(&integral, &integral_squared, 1, 0, 2, 1), var);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311079,"byte_end":311151,"line_start":288,"line_end":288,"column_start":1,"column_end":73}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311152,"byte_end":311159,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311160,"byte_end":311167,"line_start":290,"line_end":290,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312590,"byte_end":312605,"line_start":336,"line_end":336,"column_start":8,"column_end":23},"name":"row_running_sum","qualname":"::integral_image::row_running_sum","value":"pub fn row_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one row of image, padded\n at the beginning and end. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all rows in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one row of image, padded","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311727,"byte_end":311783,"line_start":306,"line_end":306,"column_start":1,"column_end":57}},{"value":"/ at the beginning and end. The padding is by continuity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311784,"byte_end":311843,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311844,"byte_end":311902,"line_start":308,"line_end":308,"column_start":1,"column_end":59}},{"value":"/ for all rows in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311903,"byte_end":311932,"line_start":309,"line_end":309,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311933,"byte_end":311936,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311937,"byte_end":311949,"line_start":311,"line_end":311,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.width()`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":311950,"byte_end":312004,"line_start":312,"line_end":312,"column_start":1,"column_end":55}},{"value":"/ - If `row >= image.height()`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312005,"byte_end":312038,"line_start":313,"line_end":313,"column_start":1,"column_end":34}},{"value":"/ - If `image.width() == 0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312039,"byte_end":312069,"line_start":314,"line_end":314,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312070,"byte_end":312073,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312074,"byte_end":312088,"line_start":316,"line_end":316,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312089,"byte_end":312096,"line_start":317,"line_end":317,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312097,"byte_end":312122,"line_start":318,"line_end":318,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312123,"byte_end":312141,"line_start":319,"line_end":319,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312142,"byte_end":312171,"line_start":320,"line_end":320,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312172,"byte_end":312189,"line_start":321,"line_end":321,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::row_running_sum;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312190,"byte_end":312241,"line_start":322,"line_end":322,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312242,"byte_end":312245,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312246,"byte_end":312274,"line_start":324,"line_end":324,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312275,"byte_end":312291,"line_start":325,"line_end":325,"column_start":1,"column_end":17}},{"value":"/     4, 5, 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312292,"byte_end":312309,"line_start":326,"line_end":326,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312310,"byte_end":312313,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image width, hence padding of 1","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312314,"byte_end":312387,"line_start":328,"line_end":328,"column_start":1,"column_end":74}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312388,"byte_end":312416,"line_start":329,"line_end":329,"column_start":1,"column_end":29}},{"value":"/ row_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312417,"byte_end":312464,"line_start":330,"line_end":330,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312465,"byte_end":312468,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on either side","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312469,"byte_end":312524,"line_start":332,"line_end":332,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312525,"byte_end":312566,"line_start":333,"line_end":333,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312567,"byte_end":312574,"line_start":334,"line_end":334,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":312575,"byte_end":312582,"line_start":335,"line_end":335,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1001},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314444,"byte_end":314462,"line_start":401,"line_end":401,"column_start":8,"column_end":26},"name":"column_running_sum","qualname":"::integral_image::column_running_sum","value":"pub fn column_running_sum(&GrayImage, u32, &mut [u32], u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes the running sum of one column of image, padded\n at the top and bottom. The padding is by continuity.\n Takes a reference to buffer so that this can be reused\n for all columns in an image.","sig":null,"attributes":[{"value":"/ Computes the running sum of one column of image, padded","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313556,"byte_end":313615,"line_start":370,"line_end":370,"column_start":1,"column_end":60}},{"value":"/ at the top and bottom. The padding is by continuity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313616,"byte_end":313672,"line_start":371,"line_end":371,"column_start":1,"column_end":57}},{"value":"/ Takes a reference to buffer so that this can be reused","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313673,"byte_end":313731,"line_start":372,"line_end":372,"column_start":1,"column_end":59}},{"value":"/ for all columns in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313732,"byte_end":313764,"line_start":373,"line_end":373,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313765,"byte_end":313768,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313769,"byte_end":313781,"line_start":375,"line_end":375,"column_start":1,"column_end":13}},{"value":"/ - If `buffer.len() < 2 * padding + image.height()`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313782,"byte_end":313837,"line_start":376,"line_end":376,"column_start":1,"column_end":56}},{"value":"/ - If `column >= image.width()`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313838,"byte_end":313873,"line_start":377,"line_end":377,"column_start":1,"column_end":36}},{"value":"/ - If `image.height() == 0`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313874,"byte_end":313905,"line_start":378,"line_end":378,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313906,"byte_end":313909,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313910,"byte_end":313924,"line_start":380,"line_end":380,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313925,"byte_end":313932,"line_start":381,"line_end":381,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313933,"byte_end":313958,"line_start":382,"line_end":382,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313959,"byte_end":313977,"line_start":383,"line_end":383,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":313978,"byte_end":314007,"line_start":384,"line_end":384,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314008,"byte_end":314025,"line_start":385,"line_end":385,"column_start":1,"column_end":18}},{"value":"/ use imageproc::integral_image::column_running_sum;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314026,"byte_end":314080,"line_start":386,"line_end":386,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314081,"byte_end":314084,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314085,"byte_end":314113,"line_start":388,"line_end":388,"column_start":1,"column_end":29}},{"value":"/     1, 4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314114,"byte_end":314127,"line_start":389,"line_end":389,"column_start":1,"column_end":14}},{"value":"/     2, 5;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314128,"byte_end":314141,"line_start":390,"line_end":390,"column_start":1,"column_end":14}},{"value":"/     3, 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314142,"byte_end":314156,"line_start":391,"line_end":391,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314157,"byte_end":314160,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ // Buffer has length two greater than image height, hence padding of 1","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314161,"byte_end":314235,"line_start":393,"line_end":393,"column_start":1,"column_end":75}},{"value":"/ let mut buffer = [0; 5];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314236,"byte_end":314264,"line_start":394,"line_end":394,"column_start":1,"column_end":29}},{"value":"/ column_running_sum(&image, 0, &mut buffer, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314265,"byte_end":314315,"line_start":395,"line_end":395,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314316,"byte_end":314319,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ // The image is padded by continuity on top and bottom","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314320,"byte_end":314378,"line_start":397,"line_end":397,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(buffer, [1, 2, 4, 7, 10]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314379,"byte_end":314420,"line_start":398,"line_end":398,"column_start":1,"column_end":42}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314421,"byte_end":314428,"line_start":399,"line_end":399,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":314429,"byte_end":314436,"line_start":400,"line_end":400,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"local_binary_patterns","qualname":"::local_binary_patterns","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":2363},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1013}],"decl_id":null,"docs":" Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).\n","sig":null,"attributes":[{"value":"/ Functions for computing [local binary patterns](https://en.wikipedia.org/wiki/Local_binary_patterns).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321419,"byte_end":321524,"line_start":1,"line_end":1,"column_start":1,"column_end":106}}]},{"kind":"Function","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322390,"byte_end":322410,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"local_binary_pattern","qualname":"::local_binary_patterns::local_binary_pattern","value":"pub fn local_binary_pattern<I>(&I, u32, u32) -> Option<u8> where\nI: GenericImage<Pixel = Luma<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Computes the basic local binary pattern of a pixel, or None\n if it's too close to the image boundary.","sig":null,"attributes":[{"value":"/ Computes the basic local binary pattern of a pixel, or None","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321574,"byte_end":321637,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ if it's too close to the image boundary.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321638,"byte_end":321682,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321683,"byte_end":321686,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The neighbors of a pixel p are enumerated in the following order:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321687,"byte_end":321756,"line_start":9,"line_end":9,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321757,"byte_end":321760,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ <pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321761,"byte_end":321770,"line_start":11,"line_end":11,"column_start":1,"column_end":10}},{"value":"/ 7  0  1","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321771,"byte_end":321782,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ 6  p  2","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321783,"byte_end":321794,"line_start":13,"line_end":13,"column_start":1,"column_end":12}},{"value":"/ 5  4  3","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321795,"byte_end":321806,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"/ </pre>","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321807,"byte_end":321817,"line_start":15,"line_end":15,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321818,"byte_end":321821,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The nth most significant bit of the local binary pattern at p is 1","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321822,"byte_end":321892,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ if p is strictly brighter than the neighbor in position n.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321893,"byte_end":321955,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321956,"byte_end":321959,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321960,"byte_end":321974,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321975,"byte_end":321982,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":321983,"byte_end":322008,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322009,"byte_end":322027,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322028,"byte_end":322057,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322058,"byte_end":322075,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ use imageproc::local_binary_patterns::local_binary_pattern;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322076,"byte_end":322139,"line_start":26,"line_end":26,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322140,"byte_end":322143,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322144,"byte_end":322172,"line_start":28,"line_end":28,"column_start":1,"column_end":29}},{"value":"/     06, 11, 14;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322173,"byte_end":322192,"line_start":29,"line_end":29,"column_start":1,"column_end":20}},{"value":"/     09, 10, 10;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322193,"byte_end":322212,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/     19, 00, 22);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322213,"byte_end":322233,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322234,"byte_end":322237,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let expected = 0b11010000;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322238,"byte_end":322268,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let pattern = local_binary_pattern(&image, 1, 1).unwrap();","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322269,"byte_end":322331,"line_start":34,"line_end":34,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(pattern, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322332,"byte_end":322366,"line_start":35,"line_end":35,"column_start":1,"column_end":35}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322367,"byte_end":322374,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":322375,"byte_end":322382,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324440,"byte_end":324449,"line_start":101,"line_end":101,"column_start":8,"column_end":17},"name":"min_shift","qualname":"::local_binary_patterns::min_shift","value":"pub fn min_shift(u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the least value of all rotations of a byte.","sig":null,"attributes":[{"value":"/ Returns the least value of all rotations of a byte.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324213,"byte_end":324268,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324269,"byte_end":324272,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324273,"byte_end":324287,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324288,"byte_end":324295,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::min_shift;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324296,"byte_end":324348,"line_start":96,"line_end":96,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324349,"byte_end":324352,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ let byte = 0b10110100;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324353,"byte_end":324379,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(min_shift(byte), 0b00101101);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324380,"byte_end":324424,"line_start":99,"line_end":99,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324425,"byte_end":324432,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1010},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325034,"byte_end":325051,"line_start":124,"line_end":124,"column_start":8,"column_end":25},"name":"count_transitions","qualname":"::local_binary_patterns::count_transitions","value":"pub fn count_transitions(u8) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Number of bit transitions in a byte, counting the last and final bits as adjacent.","sig":null,"attributes":[{"value":"/ Number of bit transitions in a byte, counting the last and final bits as adjacent.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324580,"byte_end":324666,"line_start":109,"line_end":109,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324667,"byte_end":324670,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324671,"byte_end":324685,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324686,"byte_end":324693,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use imageproc::local_binary_patterns::count_transitions;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324694,"byte_end":324754,"line_start":113,"line_end":113,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324755,"byte_end":324758,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ let a = 0b11110000;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324759,"byte_end":324782,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(a), 2);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324783,"byte_end":324823,"line_start":116,"line_end":116,"column_start":1,"column_end":41}},{"value":"/ let b = 0b00000000;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324824,"byte_end":324847,"line_start":117,"line_end":117,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(b), 0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324848,"byte_end":324888,"line_start":118,"line_end":118,"column_start":1,"column_end":41}},{"value":"/ let c = 0b10011001;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324889,"byte_end":324912,"line_start":119,"line_end":119,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(c), 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324913,"byte_end":324953,"line_start":120,"line_end":120,"column_start":1,"column_end":41}},{"value":"/ let d = 0b10110010;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324954,"byte_end":324977,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(count_transitions(d), 6);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":324978,"byte_end":325018,"line_start":122,"line_end":122,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325019,"byte_end":325026,"line_start":123,"line_end":123,"column_start":1,"column_end":8}}]},{"kind":"Static","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325327,"byte_end":325351,"line_start":131,"line_end":131,"column_start":12,"column_end":36},"name":"UNIFORM_REPRESENTATIVE_2","qualname":"::local_binary_patterns::UNIFORM_REPRESENTATIVE_2","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Maps uniform bytes (i.e. those with at most two bit transitions) to their\n least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen\n non-uniform representative).\n","sig":null,"attributes":[{"value":"/ Maps uniform bytes (i.e. those with at most two bit transitions) to their","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325121,"byte_end":325198,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ least circular shifts, and non-uniform bytes to 10101010 (an arbitrarily chosen","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325199,"byte_end":325282,"line_start":129,"line_end":129,"column_start":1,"column_end":84}},{"value":"/ non-uniform representative).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":325283,"byte_end":325315,"line_start":130,"line_end":130,"column_start":1,"column_end":33}}]},{"kind":"Static","id":{"krate":0,"index":1013},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":329425,"byte_end":329434,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"MIN_SHIFT","qualname":"::local_binary_patterns::MIN_SHIFT","value":"[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Lookup table for the least circular shift of a byte.\n","sig":null,"attributes":[{"value":"/ Lookup table for the least circular shift of a byte.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/local_binary_patterns.rs","byte_start":329357,"byte_end":329413,"line_start":390,"line_end":390,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1015},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","parent":null,"children":[{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":2367},{"krate":0,"index":1018},{"krate":0,"index":2369},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":2375},{"krate":0,"index":1022},{"krate":0,"index":2377},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":2383},{"krate":0,"index":1026},{"krate":0,"index":2385},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1038},{"krate":0,"index":1042},{"krate":0,"index":1046},{"krate":0,"index":1050},{"krate":0,"index":1054},{"krate":0,"index":1058},{"krate":0,"index":1063},{"krate":0,"index":1068},{"krate":0,"index":1075},{"krate":0,"index":1080},{"krate":0,"index":1084},{"krate":0,"index":1089},{"krate":0,"index":1093},{"krate":0,"index":1098},{"krate":0,"index":1102}],"decl_id":null,"docs":" Functions for mapping over pixels, colors or subpixels of images.\n","sig":null,"attributes":[{"value":"/ Functions for mapping over pixels, colors or subpixels of images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334284,"byte_end":334353,"line_start":1,"line_end":1,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334710,"byte_end":334721,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"WithChannel","qualname":"::map::WithChannel","value":"WithChannel<C: Primitive>: Pixel","parent":null,"children":[{"krate":0,"index":1030}],"decl_id":null,"docs":" The type obtained by replacing the channel type of a given `Pixel` type.\n The output type must have the same name of channels as the input type, or\n several algorithms will produce incorrect results or panic.\n","sig":null,"attributes":[{"value":"/ The type obtained by replacing the channel type of a given `Pixel` type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334481,"byte_end":334557,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ The output type must have the same name of channels as the input type, or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334558,"byte_end":334635,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ several algorithms will produce incorrect results or panic.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334636,"byte_end":334699,"line_start":9,"line_end":9,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334782,"byte_end":334787,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::map::WithChannel::Pixel","value":"type Pixel: Pixel<Subpixel = C> + 'static;","parent":{"krate":0,"index":1028},"children":[],"decl_id":null,"docs":" The new pixel type.\n","sig":null,"attributes":[{"value":"/ The new pixel type.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334749,"byte_end":334772,"line_start":11,"line_end":11,"column_start":5,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":1031},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334898,"byte_end":334908,"line_start":16,"line_end":16,"column_start":10,"column_end":20},"name":"ChannelMap","qualname":"::map::ChannelMap","value":"<Pix as WithChannel<Sub>>::Pixel","parent":null,"children":[],"decl_id":null,"docs":" Alias to make uses of `WithChannel` less syntactically noisy.\n","sig":null,"attributes":[{"value":"/ Alias to make uses of `WithChannel` less syntactically noisy.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334823,"byte_end":334888,"line_start":15,"line_end":15,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336210,"byte_end":336223,"line_start":89,"line_end":89,"column_start":8,"column_end":21},"name":"map_subpixels","qualname":"::map::map_subpixels","value":"pub fn map_subpixels<I, P, F, S>(&I, F) -> Image<ChannelMap<P, S>> where\nI: GenericImage<Pixel = P>, P: WithChannel<S> + 'static, S: Primitive +\n'static, F: Fn(P::Subpixel) -> S","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each subpixel of the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each subpixel of the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335740,"byte_end":335792,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335793,"byte_end":335796,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335797,"byte_end":335811,"line_start":68,"line_end":68,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335812,"byte_end":335819,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335820,"byte_end":335845,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335846,"byte_end":335864,"line_start":71,"line_end":71,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335865,"byte_end":335894,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335895,"byte_end":335912,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/ use imageproc::map::map_subpixels;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335913,"byte_end":335951,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335952,"byte_end":335955,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335956,"byte_end":335984,"line_start":76,"line_end":76,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335985,"byte_end":335998,"line_start":77,"line_end":77,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335999,"byte_end":336013,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336014,"byte_end":336017,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ let scaled = gray_image!(type: i16,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336018,"byte_end":336057,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/     -2, -4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336058,"byte_end":336073,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/     -6, -8);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336074,"byte_end":336090,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336091,"byte_end":336094,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336095,"byte_end":336117,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/     map_subpixels(&image, |x| -2 * (x as i16)),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336118,"byte_end":336169,"line_start":85,"line_end":85,"column_start":1,"column_end":52}},{"value":"/     scaled);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336170,"byte_end":336186,"line_start":86,"line_end":86,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336187,"byte_end":336194,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336195,"byte_end":336202,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337522,"byte_end":337532,"line_start":140,"line_end":140,"column_start":8,"column_end":18},"name":"map_colors","qualname":"::map::map_colors","value":"pub fn map_colors<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel + 'static, F: Fn(P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the color of each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to the color of each pixel in the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":336992,"byte_end":337054,"line_start":116,"line_end":116,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337055,"byte_end":337058,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337059,"byte_end":337073,"line_start":118,"line_end":118,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337074,"byte_end":337081,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337082,"byte_end":337107,"line_start":120,"line_end":120,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337108,"byte_end":337126,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337127,"byte_end":337156,"line_start":122,"line_end":122,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337157,"byte_end":337174,"line_start":123,"line_end":123,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337175,"byte_end":337194,"line_start":124,"line_end":124,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_colors;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337195,"byte_end":337230,"line_start":125,"line_end":125,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337231,"byte_end":337234,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337235,"byte_end":337263,"line_start":127,"line_end":127,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337264,"byte_end":337277,"line_start":128,"line_end":128,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337278,"byte_end":337292,"line_start":129,"line_end":129,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337293,"byte_end":337296,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337297,"byte_end":337322,"line_start":131,"line_end":131,"column_start":1,"column_end":26}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337323,"byte_end":337352,"line_start":132,"line_end":132,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337353,"byte_end":337384,"line_start":133,"line_end":133,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337385,"byte_end":337388,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337389,"byte_end":337411,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/     map_colors(&image, |p| { Rgb([p[0], (2 * p[0]), (3 * p[0])]) }),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337412,"byte_end":337484,"line_start":136,"line_end":136,"column_start":1,"column_end":73}},{"value":"/     rgb);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337485,"byte_end":337498,"line_start":137,"line_end":137,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337499,"byte_end":337506,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":337507,"byte_end":337514,"line_start":139,"line_end":139,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338679,"byte_end":338690,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"map_colors2","qualname":"::map::map_colors2","value":"pub fn map_colors2<I, J, P, Q, R, F>(&I, &J, F) -> Image<R> where\nI: GenericImage<Pixel = P>, J: GenericImage<Pixel = Q>, P: Pixel, Q: Pixel,\nR: Pixel + 'static, F: Fn(P, Q) -> R","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to the colors of the pixels in the input images.","sig":null,"attributes":[{"value":"/ Applies `f` to the colors of the pixels in the input images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338027,"byte_end":338091,"line_start":162,"line_end":162,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338092,"byte_end":338095,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Requires `image1` and `image2` to have the same dimensions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338096,"byte_end":338159,"line_start":164,"line_end":164,"column_start":1,"column_end":64}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338160,"byte_end":338174,"line_start":165,"line_end":165,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338175,"byte_end":338182,"line_start":166,"line_end":166,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338183,"byte_end":338208,"line_start":167,"line_end":167,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338209,"byte_end":338227,"line_start":168,"line_end":168,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338228,"byte_end":338257,"line_start":169,"line_end":169,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338258,"byte_end":338275,"line_start":170,"line_end":170,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338276,"byte_end":338296,"line_start":171,"line_end":171,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::map_colors2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338297,"byte_end":338333,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338334,"byte_end":338337,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let image1 = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338338,"byte_end":338367,"line_start":174,"line_end":174,"column_start":1,"column_end":30}},{"value":"/     1, 2,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338368,"byte_end":338381,"line_start":175,"line_end":175,"column_start":1,"column_end":14}},{"value":"/     3, 4","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338382,"byte_end":338394,"line_start":176,"line_end":176,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338395,"byte_end":338401,"line_start":177,"line_end":177,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338402,"byte_end":338405,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ let image2 = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338406,"byte_end":338435,"line_start":179,"line_end":179,"column_start":1,"column_end":30}},{"value":"/     10, 20,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338436,"byte_end":338451,"line_start":180,"line_end":180,"column_start":1,"column_end":16}},{"value":"/     30, 40","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338452,"byte_end":338466,"line_start":181,"line_end":181,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338467,"byte_end":338473,"line_start":182,"line_end":182,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338474,"byte_end":338477,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let sum = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338478,"byte_end":338504,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/     11, 22,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338505,"byte_end":338520,"line_start":185,"line_end":185,"column_start":1,"column_end":16}},{"value":"/     33, 44","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338521,"byte_end":338535,"line_start":186,"line_end":186,"column_start":1,"column_end":15}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338536,"byte_end":338542,"line_start":187,"line_end":187,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338543,"byte_end":338546,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338547,"byte_end":338569,"line_start":189,"line_end":189,"column_start":1,"column_end":23}},{"value":"/     map_colors2(&image1, &image2, |p, q| Luma([p[0] + q[0]])),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338570,"byte_end":338636,"line_start":190,"line_end":190,"column_start":1,"column_end":67}},{"value":"/     sum","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338637,"byte_end":338648,"line_start":191,"line_end":191,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338649,"byte_end":338655,"line_start":192,"line_end":192,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338656,"byte_end":338663,"line_start":193,"line_end":193,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":338664,"byte_end":338671,"line_start":194,"line_end":194,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339904,"byte_end":339914,"line_start":248,"line_end":248,"column_start":8,"column_end":18},"name":"map_pixels","qualname":"::map::map_pixels","value":"pub fn map_pixels<I, P, Q, F>(&I, F) -> Image<Q> where I: GenericImage<Pixel =\nP>, P: Pixel, Q: Pixel + 'static, F: Fn(u32, u32, P) -> Q","parent":null,"children":[],"decl_id":null,"docs":" Applies `f` to each pixel in the input image.","sig":null,"attributes":[{"value":"/ Applies `f` to each pixel in the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339368,"byte_end":339417,"line_start":222,"line_end":222,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339418,"byte_end":339421,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339422,"byte_end":339436,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339437,"byte_end":339444,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339445,"byte_end":339470,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339471,"byte_end":339489,"line_start":227,"line_end":227,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339490,"byte_end":339519,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339520,"byte_end":339537,"line_start":229,"line_end":229,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339538,"byte_end":339557,"line_start":230,"line_end":230,"column_start":1,"column_end":20}},{"value":"/ use imageproc::map::map_pixels;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339558,"byte_end":339593,"line_start":231,"line_end":231,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339594,"byte_end":339597,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339598,"byte_end":339626,"line_start":233,"line_end":233,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339627,"byte_end":339640,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339641,"byte_end":339655,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339656,"byte_end":339659,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ let rgb = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339660,"byte_end":339685,"line_start":237,"line_end":237,"column_start":1,"column_end":26}},{"value":"/     [1, 0, 0], [2, 1, 0];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339686,"byte_end":339715,"line_start":238,"line_end":238,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 1], [4, 1, 1]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339716,"byte_end":339746,"line_start":239,"line_end":239,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339747,"byte_end":339750,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339751,"byte_end":339773,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/     map_pixels(&image, |x, y, p| {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339774,"byte_end":339812,"line_start":242,"line_end":242,"column_start":1,"column_end":39}},{"value":"/         Rgb([p[0], x as u8, y as u8])","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339813,"byte_end":339854,"line_start":243,"line_end":243,"column_start":1,"column_end":42}},{"value":"/     }),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339855,"byte_end":339866,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/     rgb);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339867,"byte_end":339880,"line_start":245,"line_end":245,"column_start":1,"column_end":14}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339881,"byte_end":339888,"line_start":246,"line_end":246,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":339889,"byte_end":339896,"line_start":247,"line_end":247,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340945,"byte_end":340956,"line_start":293,"line_end":293,"column_start":8,"column_end":19},"name":"red_channel","qualname":"::map::red_channel","value":"pub fn red_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the red channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the red channel of an RGB image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340425,"byte_end":340501,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340502,"byte_end":340505,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340506,"byte_end":340520,"line_start":272,"line_end":272,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340521,"byte_end":340528,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340529,"byte_end":340554,"line_start":274,"line_end":274,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340555,"byte_end":340573,"line_start":275,"line_end":275,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340574,"byte_end":340603,"line_start":276,"line_end":276,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340604,"byte_end":340621,"line_start":277,"line_end":277,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340622,"byte_end":340642,"line_start":278,"line_end":278,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::red_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340643,"byte_end":340679,"line_start":279,"line_end":279,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340680,"byte_end":340683,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340684,"byte_end":340711,"line_start":281,"line_end":281,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340712,"byte_end":340741,"line_start":282,"line_end":282,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340742,"byte_end":340773,"line_start":283,"line_end":283,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340774,"byte_end":340777,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340778,"byte_end":340809,"line_start":285,"line_end":285,"column_start":1,"column_end":32}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340810,"byte_end":340823,"line_start":286,"line_end":286,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340824,"byte_end":340838,"line_start":287,"line_end":287,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340839,"byte_end":340842,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ let actual = red_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340843,"byte_end":340880,"line_start":289,"line_end":289,"column_start":1,"column_end":38}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340881,"byte_end":340921,"line_start":290,"line_end":290,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340922,"byte_end":340929,"line_start":291,"line_end":291,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":340930,"byte_end":340937,"line_start":292,"line_end":292,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341632,"byte_end":341646,"line_start":324,"line_end":324,"column_start":8,"column_end":22},"name":"as_red_channel","qualname":"::map::as_red_channel","value":"pub fn as_red_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel =\nLuma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its red channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its red channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341108,"byte_end":341183,"line_start":301,"line_end":301,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341184,"byte_end":341187,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341188,"byte_end":341202,"line_start":303,"line_end":303,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341203,"byte_end":341210,"line_start":304,"line_end":304,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341211,"byte_end":341236,"line_start":305,"line_end":305,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341237,"byte_end":341255,"line_start":306,"line_end":306,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341256,"byte_end":341285,"line_start":307,"line_end":307,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341286,"byte_end":341303,"line_start":308,"line_end":308,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341304,"byte_end":341324,"line_start":309,"line_end":309,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_red_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341325,"byte_end":341364,"line_start":310,"line_end":310,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341365,"byte_end":341368,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341369,"byte_end":341397,"line_start":312,"line_end":312,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341398,"byte_end":341411,"line_start":313,"line_end":313,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341412,"byte_end":341426,"line_start":314,"line_end":314,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341427,"byte_end":341430,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341431,"byte_end":341461,"line_start":316,"line_end":316,"column_start":1,"column_end":31}},{"value":"/     [1, 0, 0], [2, 0, 0];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341462,"byte_end":341491,"line_start":317,"line_end":317,"column_start":1,"column_end":30}},{"value":"/     [3, 0, 0], [4, 0, 0]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341492,"byte_end":341522,"line_start":318,"line_end":318,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341523,"byte_end":341526,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ let actual = as_red_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341527,"byte_end":341567,"line_start":320,"line_end":320,"column_start":1,"column_end":41}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341568,"byte_end":341608,"line_start":321,"line_end":321,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341609,"byte_end":341616,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341617,"byte_end":341624,"line_start":323,"line_end":323,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342394,"byte_end":342407,"line_start":359,"line_end":359,"column_start":8,"column_end":21},"name":"green_channel","qualname":"::map::green_channel","value":"pub fn green_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the green channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the green channel of an RGB image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341868,"byte_end":341946,"line_start":336,"line_end":336,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341947,"byte_end":341950,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341951,"byte_end":341965,"line_start":338,"line_end":338,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341966,"byte_end":341973,"line_start":339,"line_end":339,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":341974,"byte_end":341999,"line_start":340,"line_end":340,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342000,"byte_end":342018,"line_start":341,"line_end":341,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342019,"byte_end":342048,"line_start":342,"line_end":342,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342049,"byte_end":342066,"line_start":343,"line_end":343,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342067,"byte_end":342087,"line_start":344,"line_end":344,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::green_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342088,"byte_end":342126,"line_start":345,"line_end":345,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342127,"byte_end":342130,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342131,"byte_end":342158,"line_start":347,"line_end":347,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342159,"byte_end":342188,"line_start":348,"line_end":348,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342189,"byte_end":342220,"line_start":349,"line_end":349,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342221,"byte_end":342224,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342225,"byte_end":342256,"line_start":351,"line_end":351,"column_start":1,"column_end":32}},{"value":"/     2, 4;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342257,"byte_end":342270,"line_start":352,"line_end":352,"column_start":1,"column_end":14}},{"value":"/     6, 8);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342271,"byte_end":342285,"line_start":353,"line_end":353,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342286,"byte_end":342289,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ let actual = green_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342290,"byte_end":342329,"line_start":355,"line_end":355,"column_start":1,"column_end":40}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342330,"byte_end":342370,"line_start":356,"line_end":356,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342371,"byte_end":342378,"line_start":357,"line_end":357,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342379,"byte_end":342386,"line_start":358,"line_end":358,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343089,"byte_end":343105,"line_start":390,"line_end":390,"column_start":8,"column_end":24},"name":"as_green_channel","qualname":"::map::as_green_channel","value":"pub fn as_green_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its green channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its green channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342559,"byte_end":342636,"line_start":367,"line_end":367,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342637,"byte_end":342640,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342641,"byte_end":342655,"line_start":369,"line_end":369,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342656,"byte_end":342663,"line_start":370,"line_end":370,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342664,"byte_end":342689,"line_start":371,"line_end":371,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342690,"byte_end":342708,"line_start":372,"line_end":372,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342709,"byte_end":342738,"line_start":373,"line_end":373,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342739,"byte_end":342756,"line_start":374,"line_end":374,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342757,"byte_end":342777,"line_start":375,"line_end":375,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_green_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342778,"byte_end":342819,"line_start":376,"line_end":376,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342820,"byte_end":342823,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342824,"byte_end":342852,"line_start":378,"line_end":378,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342853,"byte_end":342866,"line_start":379,"line_end":379,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342867,"byte_end":342881,"line_start":380,"line_end":380,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342882,"byte_end":342885,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342886,"byte_end":342916,"line_start":382,"line_end":382,"column_start":1,"column_end":31}},{"value":"/     [0, 1, 0], [0, 2, 0];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342917,"byte_end":342946,"line_start":383,"line_end":383,"column_start":1,"column_end":30}},{"value":"/     [0, 3, 0], [0, 4, 0]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342947,"byte_end":342977,"line_start":384,"line_end":384,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342978,"byte_end":342981,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ let actual = as_green_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":342982,"byte_end":343024,"line_start":386,"line_end":386,"column_start":1,"column_end":43}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343025,"byte_end":343065,"line_start":387,"line_end":387,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343066,"byte_end":343073,"line_start":388,"line_end":388,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343074,"byte_end":343081,"line_start":389,"line_end":389,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343851,"byte_end":343863,"line_start":425,"line_end":425,"column_start":8,"column_end":20},"name":"blue_channel","qualname":"::map::blue_channel","value":"pub fn blue_channel<I, C>(&I) -> Image<Luma<C>> where I: GenericImage<Pixel =\nRgb<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates a grayscale image by extracting the blue channel of an RGB image.","sig":null,"attributes":[{"value":"/ Creates a grayscale image by extracting the blue channel of an RGB image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343327,"byte_end":343404,"line_start":402,"line_end":402,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343405,"byte_end":343408,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343409,"byte_end":343423,"line_start":404,"line_end":404,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343424,"byte_end":343431,"line_start":405,"line_end":405,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343432,"byte_end":343457,"line_start":406,"line_end":406,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343458,"byte_end":343476,"line_start":407,"line_end":407,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343477,"byte_end":343506,"line_start":408,"line_end":408,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343507,"byte_end":343524,"line_start":409,"line_end":409,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343525,"byte_end":343545,"line_start":410,"line_end":410,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::blue_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343546,"byte_end":343583,"line_start":411,"line_end":411,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343584,"byte_end":343587,"line_start":412,"line_end":412,"column_start":1,"column_end":4}},{"value":"/ let image = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343588,"byte_end":343615,"line_start":413,"line_end":413,"column_start":1,"column_end":28}},{"value":"/     [1, 2, 3], [2, 4, 6];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343616,"byte_end":343645,"line_start":414,"line_end":414,"column_start":1,"column_end":30}},{"value":"/     [3, 6, 9], [4, 8, 12]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343646,"byte_end":343677,"line_start":415,"line_end":415,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343678,"byte_end":343681,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ let expected = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343682,"byte_end":343713,"line_start":417,"line_end":417,"column_start":1,"column_end":32}},{"value":"/     3, 6;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343714,"byte_end":343727,"line_start":418,"line_end":418,"column_start":1,"column_end":14}},{"value":"/     9, 12);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343728,"byte_end":343743,"line_start":419,"line_end":419,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343744,"byte_end":343747,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ let actual = blue_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343748,"byte_end":343786,"line_start":421,"line_end":421,"column_start":1,"column_end":39}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343787,"byte_end":343827,"line_start":422,"line_end":422,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343828,"byte_end":343835,"line_start":423,"line_end":423,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":343836,"byte_end":343843,"line_start":424,"line_end":424,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1102},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344542,"byte_end":344557,"line_start":456,"line_end":456,"column_start":8,"column_end":23},"name":"as_blue_channel","qualname":"::map::as_blue_channel","value":"pub fn as_blue_channel<I, C>(&I) -> Image<Rgb<C>> where I: GenericImage<Pixel\n= Luma<C>>, C: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Creates an RGB image by embedding a grayscale image in its blue channel.","sig":null,"attributes":[{"value":"/ Creates an RGB image by embedding a grayscale image in its blue channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344015,"byte_end":344091,"line_start":433,"line_end":433,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344092,"byte_end":344095,"line_start":434,"line_end":434,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344096,"byte_end":344110,"line_start":435,"line_end":435,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344111,"byte_end":344118,"line_start":436,"line_end":436,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344119,"byte_end":344144,"line_start":437,"line_end":437,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344145,"byte_end":344163,"line_start":438,"line_end":438,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344164,"byte_end":344193,"line_start":439,"line_end":439,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344194,"byte_end":344211,"line_start":440,"line_end":440,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344212,"byte_end":344232,"line_start":441,"line_end":441,"column_start":1,"column_end":21}},{"value":"/ use imageproc::map::as_blue_channel;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344233,"byte_end":344273,"line_start":442,"line_end":442,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344274,"byte_end":344277,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344278,"byte_end":344306,"line_start":444,"line_end":444,"column_start":1,"column_end":29}},{"value":"/     1, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344307,"byte_end":344320,"line_start":445,"line_end":445,"column_start":1,"column_end":14}},{"value":"/     3, 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344321,"byte_end":344335,"line_start":446,"line_end":446,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344336,"byte_end":344339,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ let expected = rgb_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344340,"byte_end":344370,"line_start":448,"line_end":448,"column_start":1,"column_end":31}},{"value":"/     [0, 0, 1], [0, 0, 2];","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344371,"byte_end":344400,"line_start":449,"line_end":449,"column_start":1,"column_end":30}},{"value":"/     [0, 0, 3], [0, 0, 4]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344401,"byte_end":344431,"line_start":450,"line_end":450,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344432,"byte_end":344435,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ let actual = as_blue_channel(&image);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344436,"byte_end":344477,"line_start":452,"line_end":452,"column_start":1,"column_end":42}},{"value":"/ assert_pixels_eq!(actual, expected);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344478,"byte_end":344518,"line_start":453,"line_end":453,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344519,"byte_end":344526,"line_start":454,"line_end":454,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":344527,"byte_end":344534,"line_start":455,"line_end":455,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1107},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1111},{"krate":0,"index":1113}],"decl_id":null,"docs":" Assorted mathematical helper functions.\n","sig":null,"attributes":[{"value":"/ Assorted mathematical helper functions.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":344779,"byte_end":344822,"line_start":1,"line_end":1,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":344878,"byte_end":344885,"line_start":6,"line_end":6,"column_start":8,"column_end":15},"name":"l1_norm","qualname":"::math::l1_norm","value":"pub fn l1_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L1 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L1 norm of a vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":344846,"byte_end":344870,"line_start":5,"line_end":5,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":344991,"byte_end":344998,"line_start":11,"line_end":11,"column_start":8,"column_end":15},"name":"l2_norm","qualname":"::math::l2_norm","value":"pub fn l2_norm(&[f32]) -> f32","parent":null,"children":[],"decl_id":null,"docs":" L2 norm of a vector.\n","sig":null,"attributes":[{"value":"/ L2 norm of a vector.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":344959,"byte_end":344983,"line_start":10,"line_end":10,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1113},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":345137,"byte_end":345141,"line_start":16,"line_end":16,"column_start":8,"column_end":12},"name":"cast","qualname":"::math::cast","value":"pub fn cast<T, U>(T) -> U where T: ValueInto<U>","parent":null,"children":[],"decl_id":null,"docs":" Helper for a conversion that we know can't fail.\n","sig":null,"attributes":[{"value":"/ Helper for a conversion that we know can't fail.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/math.rs","byte_start":345077,"byte_end":345129,"line_start":15,"line_end":15,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1116},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"morphology","qualname":"::morphology","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1124},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131}],"decl_id":null,"docs":" Functions for computing [morphological operators].","sig":null,"attributes":[{"value":"/ Functions for computing [morphological operators].","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345291,"byte_end":345345,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345346,"byte_end":345349,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ [morphological operators]: http://homepages.inf.ed.ac.uk/rbf/HIPR2/morops.htm","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345350,"byte_end":345431,"line_start":3,"line_end":3,"column_start":1,"column_end":82}}]},{"kind":"Function","id":{"krate":0,"index":1124},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346752,"byte_end":346758,"line_start":56,"line_end":56,"column_start":8,"column_end":14},"name":"dilate","qualname":"::morphology::dilate","value":"pub fn dilate(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345578,"byte_end":345649,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345650,"byte_end":345653,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345654,"byte_end":345737,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345738,"byte_end":345741,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345742,"byte_end":345756,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345757,"byte_end":345764,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345765,"byte_end":345790,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345791,"byte_end":345809,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345810,"byte_end":345839,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345840,"byte_end":345857,"line_start":20,"line_end":20,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345858,"byte_end":345883,"line_start":21,"line_end":21,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::dilate;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345884,"byte_end":345922,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345923,"byte_end":345967,"line_start":23,"line_end":23,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345968,"byte_end":345971,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":345972,"byte_end":346000,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346001,"byte_end":346031,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346032,"byte_end":346062,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346063,"byte_end":346093,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346094,"byte_end":346124,"line_start":29,"line_end":29,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346125,"byte_end":346154,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346155,"byte_end":346161,"line_start":31,"line_end":31,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346162,"byte_end":346165,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // L1 norm","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346166,"byte_end":346180,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/ let l1_dilated = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346181,"byte_end":346214,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/     0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346215,"byte_end":346245,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346246,"byte_end":346276,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/     0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346277,"byte_end":346307,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/     0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346308,"byte_end":346338,"line_start":38,"line_end":38,"column_start":1,"column_end":31}},{"value":"/     0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346339,"byte_end":346368,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346369,"byte_end":346375,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346376,"byte_end":346379,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::L1, 1), l1_dilated);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346380,"byte_end":346443,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346444,"byte_end":346447,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // LInf norm","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346448,"byte_end":346464,"line_start":44,"line_end":44,"column_start":1,"column_end":17}},{"value":"/ let linf_dilated = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346465,"byte_end":346500,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/    0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346501,"byte_end":346530,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346531,"byte_end":346560,"line_start":47,"line_end":47,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346561,"byte_end":346590,"line_start":48,"line_end":48,"column_start":1,"column_end":30}},{"value":"/    0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346591,"byte_end":346620,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/    0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346621,"byte_end":346649,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346650,"byte_end":346656,"line_start":51,"line_end":51,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346657,"byte_end":346660,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(dilate(&image, Norm::LInf, 1), linf_dilated);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346661,"byte_end":346728,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346729,"byte_end":346736,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346737,"byte_end":346744,"line_start":55,"line_end":55,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1125},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347129,"byte_end":347139,"line_start":67,"line_end":67,"column_start":8,"column_end":18},"name":"dilate_mut","qualname":"::morphology::dilate_mut","value":"pub fn dilate_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a foreground pixel to white.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a foreground pixel to white.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346891,"byte_end":346962,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346963,"byte_end":346966,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":346967,"byte_end":347050,"line_start":64,"line_end":64,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347051,"byte_end":347054,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ See the [`dilate`](fn.dilate.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347055,"byte_end":347121,"line_start":66,"line_end":66,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":1126},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349633,"byte_end":349638,"line_start":134,"line_end":134,"column_start":8,"column_end":13},"name":"erode","qualname":"::morphology::erode","value":"pub fn erode(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347310,"byte_end":347381,"line_start":74,"line_end":74,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347382,"byte_end":347385,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347386,"byte_end":347469,"line_start":76,"line_end":76,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347470,"byte_end":347473,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347474,"byte_end":347488,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347489,"byte_end":347496,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347497,"byte_end":347522,"line_start":80,"line_end":80,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347523,"byte_end":347541,"line_start":81,"line_end":81,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347542,"byte_end":347571,"line_start":82,"line_end":82,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347572,"byte_end":347589,"line_start":83,"line_end":83,"column_start":1,"column_end":18}},{"value":"/ use image::GrayImage;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347590,"byte_end":347615,"line_start":84,"line_end":84,"column_start":1,"column_end":26}},{"value":"/ use imageproc::morphology::erode;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347616,"byte_end":347653,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347654,"byte_end":347698,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347699,"byte_end":347702,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347703,"byte_end":347731,"line_start":88,"line_end":88,"column_start":1,"column_end":29}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347732,"byte_end":347781,"line_start":89,"line_end":89,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347782,"byte_end":347831,"line_start":90,"line_end":90,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347832,"byte_end":347881,"line_start":91,"line_end":91,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347882,"byte_end":347931,"line_start":92,"line_end":92,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255,   0, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347932,"byte_end":347981,"line_start":93,"line_end":93,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":347982,"byte_end":348031,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348032,"byte_end":348081,"line_start":95,"line_end":95,"column_start":1,"column_end":50}},{"value":"/     0, 255, 255, 255, 255, 255, 255, 255,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348082,"byte_end":348131,"line_start":96,"line_end":96,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348132,"byte_end":348180,"line_start":97,"line_end":97,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348181,"byte_end":348187,"line_start":98,"line_end":98,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348188,"byte_end":348191,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ // L1 norm - the outermost foreground pixels are eroded,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348192,"byte_end":348252,"line_start":100,"line_end":100,"column_start":1,"column_end":61}},{"value":"/ // as well as those horizontally and vertically adjacent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348253,"byte_end":348313,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/ // to the centre background pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348314,"byte_end":348352,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ let l1_eroded = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348353,"byte_end":348385,"line_start":103,"line_end":103,"column_start":1,"column_end":33}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348386,"byte_end":348435,"line_start":104,"line_end":104,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348436,"byte_end":348485,"line_start":105,"line_end":105,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348486,"byte_end":348535,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348536,"byte_end":348585,"line_start":107,"line_end":107,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348586,"byte_end":348635,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255,   0, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348636,"byte_end":348685,"line_start":109,"line_end":109,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348686,"byte_end":348735,"line_start":110,"line_end":110,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348736,"byte_end":348785,"line_start":111,"line_end":111,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348786,"byte_end":348834,"line_start":112,"line_end":112,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348835,"byte_end":348841,"line_start":113,"line_end":113,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348842,"byte_end":348845,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::L1, 1), l1_eroded);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348846,"byte_end":348907,"line_start":115,"line_end":115,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348908,"byte_end":348911,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ // LInf norm - all pixels eroded using the L1 norm are eroded,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348912,"byte_end":348978,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ // as well as the pixels diagonally adjacent to the centre pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":348979,"byte_end":349048,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/ let linf_eroded = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349049,"byte_end":349083,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349084,"byte_end":349133,"line_start":120,"line_end":120,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349134,"byte_end":349183,"line_start":121,"line_end":121,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349184,"byte_end":349233,"line_start":122,"line_end":122,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349234,"byte_end":349283,"line_start":123,"line_end":123,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349284,"byte_end":349333,"line_start":124,"line_end":124,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255,   0,   0,   0, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349334,"byte_end":349383,"line_start":125,"line_end":125,"column_start":1,"column_end":50}},{"value":"/     0,   0, 255, 255, 255, 255, 255,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349384,"byte_end":349433,"line_start":126,"line_end":126,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349434,"byte_end":349483,"line_start":127,"line_end":127,"column_start":1,"column_end":50}},{"value":"/     0,   0,   0,   0,   0,   0,   0,   0,  0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349484,"byte_end":349532,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349533,"byte_end":349539,"line_start":129,"line_end":129,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349540,"byte_end":349543,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(erode(&image, Norm::LInf, 1), linf_eroded);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349544,"byte_end":349609,"line_start":131,"line_end":131,"column_start":1,"column_end":66}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349610,"byte_end":349617,"line_start":132,"line_end":132,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349618,"byte_end":349625,"line_start":133,"line_end":133,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1127},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350006,"byte_end":350015,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"erode_mut","qualname":"::morphology::erode_mut","value":"pub fn erode_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Sets all pixels within distance `k` of a background pixel to black.","sig":null,"attributes":[{"value":"/ Sets all pixels within distance `k` of a background pixel to black.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349770,"byte_end":349841,"line_start":140,"line_end":140,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349842,"byte_end":349845,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ A pixel is treated as belonging to the foreground if it has non-zero intensity.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349846,"byte_end":349929,"line_start":142,"line_end":142,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349930,"byte_end":349933,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":349934,"byte_end":349998,"line_start":144,"line_end":144,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1128},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351493,"byte_end":351497,"line_start":203,"line_end":203,"column_start":8,"column_end":12},"name":"open","qualname":"::morphology::open","value":"pub fn open(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350213,"byte_end":350246,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350247,"byte_end":350250,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350251,"byte_end":350318,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350319,"byte_end":350377,"line_start":155,"line_end":155,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350378,"byte_end":350381,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350382,"byte_end":350396,"line_start":157,"line_end":157,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350397,"byte_end":350404,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350405,"byte_end":350430,"line_start":159,"line_end":159,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350431,"byte_end":350449,"line_start":160,"line_end":160,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350450,"byte_end":350479,"line_start":161,"line_end":161,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350480,"byte_end":350497,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::open;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350498,"byte_end":350534,"line_start":163,"line_end":163,"column_start":1,"column_end":37}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350535,"byte_end":350579,"line_start":164,"line_end":164,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350580,"byte_end":350583,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Isolated regions of foreground pixels are removed.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350584,"byte_end":350641,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let cross = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350642,"byte_end":350670,"line_start":167,"line_end":167,"column_start":1,"column_end":29}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350671,"byte_end":350703,"line_start":168,"line_end":168,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350704,"byte_end":350736,"line_start":169,"line_end":169,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350737,"byte_end":350769,"line_start":170,"line_end":170,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350770,"byte_end":350802,"line_start":171,"line_end":171,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350803,"byte_end":350834,"line_start":172,"line_end":172,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350835,"byte_end":350841,"line_start":173,"line_end":173,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350842,"byte_end":350845,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ let opened_cross = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350846,"byte_end":350881,"line_start":175,"line_end":175,"column_start":1,"column_end":36}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350882,"byte_end":350914,"line_start":176,"line_end":176,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350915,"byte_end":350947,"line_start":177,"line_end":177,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350948,"byte_end":350980,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":350981,"byte_end":351013,"line_start":179,"line_end":179,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351014,"byte_end":351045,"line_start":180,"line_end":180,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351046,"byte_end":351052,"line_start":181,"line_end":181,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351053,"byte_end":351056,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351057,"byte_end":351079,"line_start":183,"line_end":183,"column_start":1,"column_end":23}},{"value":"/     open(&cross, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351080,"byte_end":351116,"line_start":184,"line_end":184,"column_start":1,"column_end":37}},{"value":"/     opened_cross","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351117,"byte_end":351137,"line_start":185,"line_end":185,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351138,"byte_end":351144,"line_start":186,"line_end":186,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351145,"byte_end":351148,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ // Large blocks survive unchanged.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351149,"byte_end":351187,"line_start":188,"line_end":188,"column_start":1,"column_end":39}},{"value":"/ let blob = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351188,"byte_end":351215,"line_start":189,"line_end":189,"column_start":1,"column_end":28}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351216,"byte_end":351248,"line_start":190,"line_end":190,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351249,"byte_end":351281,"line_start":191,"line_end":191,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351282,"byte_end":351314,"line_start":192,"line_end":192,"column_start":1,"column_end":33}},{"value":"/       0, 255, 255, 255,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351315,"byte_end":351347,"line_start":193,"line_end":193,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351348,"byte_end":351379,"line_start":194,"line_end":194,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351380,"byte_end":351386,"line_start":195,"line_end":195,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351387,"byte_end":351390,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351391,"byte_end":351413,"line_start":197,"line_end":197,"column_start":1,"column_end":23}},{"value":"/     open(&blob, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351414,"byte_end":351449,"line_start":198,"line_end":198,"column_start":1,"column_end":36}},{"value":"/     blob","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351450,"byte_end":351462,"line_start":199,"line_end":199,"column_start":1,"column_end":13}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351463,"byte_end":351469,"line_start":200,"line_end":200,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351470,"byte_end":351477,"line_start":201,"line_end":201,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351478,"byte_end":351485,"line_start":202,"line_end":202,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1129},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351863,"byte_end":351871,"line_start":214,"line_end":214,"column_start":8,"column_end":16},"name":"open_mut","qualname":"::morphology::open_mut","value":"pub fn open_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Erosion followed by dilation.","sig":null,"attributes":[{"value":"/ Erosion followed by dilation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351628,"byte_end":351661,"line_start":209,"line_end":209,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351662,"byte_end":351665,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ See the [`open`](fn.open.html) documentation for examples,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351666,"byte_end":351728,"line_start":211,"line_end":211,"column_start":1,"column_end":63}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351729,"byte_end":351796,"line_start":212,"line_end":212,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351797,"byte_end":351855,"line_start":213,"line_end":213,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354335,"byte_end":354340,"line_start":308,"line_end":308,"column_start":8,"column_end":13},"name":"close","qualname":"::morphology::close","value":"pub fn close(&GrayImage, Norm, u8) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":351982,"byte_end":352015,"line_start":219,"line_end":219,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352016,"byte_end":352019,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352020,"byte_end":352087,"line_start":221,"line_end":221,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352088,"byte_end":352146,"line_start":222,"line_end":222,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352147,"byte_end":352150,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352151,"byte_end":352165,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352166,"byte_end":352173,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352174,"byte_end":352199,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352200,"byte_end":352218,"line_start":227,"line_end":227,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352219,"byte_end":352248,"line_start":228,"line_end":228,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352249,"byte_end":352266,"line_start":229,"line_end":229,"column_start":1,"column_end":18}},{"value":"/ use imageproc::morphology::close;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352267,"byte_end":352304,"line_start":230,"line_end":230,"column_start":1,"column_end":38}},{"value":"/ use imageproc::distance_transform::Norm;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352305,"byte_end":352349,"line_start":231,"line_end":231,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352350,"byte_end":352353,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ // Small holes are closed - hence the name.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352354,"byte_end":352401,"line_start":233,"line_end":233,"column_start":1,"column_end":48}},{"value":"/ let small_hole = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352402,"byte_end":352435,"line_start":234,"line_end":234,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352436,"byte_end":352463,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352464,"byte_end":352491,"line_start":236,"line_end":236,"column_start":1,"column_end":28}},{"value":"/     255,   0,   0, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352492,"byte_end":352519,"line_start":237,"line_end":237,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352520,"byte_end":352546,"line_start":238,"line_end":238,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352547,"byte_end":352553,"line_start":239,"line_end":239,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352554,"byte_end":352557,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ let closed_small_hole = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352558,"byte_end":352598,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352599,"byte_end":352626,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352627,"byte_end":352654,"line_start":243,"line_end":243,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352655,"byte_end":352682,"line_start":244,"line_end":244,"column_start":1,"column_end":28}},{"value":"/     255, 255, 255, 255","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352683,"byte_end":352709,"line_start":245,"line_end":245,"column_start":1,"column_end":27}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352710,"byte_end":352716,"line_start":246,"line_end":246,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352717,"byte_end":352720,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352721,"byte_end":352743,"line_start":248,"line_end":248,"column_start":1,"column_end":23}},{"value":"/     close(&small_hole, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352744,"byte_end":352786,"line_start":249,"line_end":249,"column_start":1,"column_end":43}},{"value":"/     closed_small_hole","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352787,"byte_end":352812,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352813,"byte_end":352819,"line_start":251,"line_end":251,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352820,"byte_end":352823,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Large holes survive unchanged.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352824,"byte_end":352861,"line_start":253,"line_end":253,"column_start":1,"column_end":38}},{"value":"/ let large_hole = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352862,"byte_end":352895,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/     255, 255, 255, 255, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352896,"byte_end":352928,"line_start":255,"line_end":255,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352929,"byte_end":352961,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352962,"byte_end":352994,"line_start":257,"line_end":257,"column_start":1,"column_end":33}},{"value":"/     255,   0,   0,   0, 255;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":352995,"byte_end":353027,"line_start":258,"line_end":258,"column_start":1,"column_end":33}},{"value":"/     255, 255, 255, 255, 255","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353028,"byte_end":353059,"line_start":259,"line_end":259,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353060,"byte_end":353066,"line_start":260,"line_end":260,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353067,"byte_end":353070,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353071,"byte_end":353093,"line_start":262,"line_end":262,"column_start":1,"column_end":23}},{"value":"/     close(&large_hole, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353094,"byte_end":353136,"line_start":263,"line_end":263,"column_start":1,"column_end":43}},{"value":"/     large_hole","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353137,"byte_end":353155,"line_start":264,"line_end":264,"column_start":1,"column_end":19}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353156,"byte_end":353162,"line_start":265,"line_end":265,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353163,"byte_end":353166,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ // A dot gains a layer of foreground pixels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353167,"byte_end":353214,"line_start":267,"line_end":267,"column_start":1,"column_end":48}},{"value":"/ // when dilated and loses them again when eroded,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353215,"byte_end":353268,"line_start":268,"line_end":268,"column_start":1,"column_end":54}},{"value":"/ // resulting in no change.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353269,"byte_end":353299,"line_start":269,"line_end":269,"column_start":1,"column_end":31}},{"value":"/ let dot = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353300,"byte_end":353326,"line_start":270,"line_end":270,"column_start":1,"column_end":27}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353327,"byte_end":353359,"line_start":271,"line_end":271,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353360,"byte_end":353392,"line_start":272,"line_end":272,"column_start":1,"column_end":33}},{"value":"/       0,   0, 255,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353393,"byte_end":353425,"line_start":273,"line_end":273,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353426,"byte_end":353458,"line_start":274,"line_end":274,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353459,"byte_end":353490,"line_start":275,"line_end":275,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353491,"byte_end":353497,"line_start":276,"line_end":276,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353498,"byte_end":353501,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353502,"byte_end":353524,"line_start":278,"line_end":278,"column_start":1,"column_end":23}},{"value":"/     close(&dot, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353525,"byte_end":353560,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/     dot","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353561,"byte_end":353572,"line_start":280,"line_end":280,"column_start":1,"column_end":12}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353573,"byte_end":353579,"line_start":281,"line_end":281,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353580,"byte_end":353583,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ // A dot near the boundary gains pixels in the top-left","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353584,"byte_end":353643,"line_start":283,"line_end":283,"column_start":1,"column_end":60}},{"value":"/ // of the image which are not within distance 1 of any","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353644,"byte_end":353702,"line_start":284,"line_end":284,"column_start":1,"column_end":59}},{"value":"/ // background pixels, so are not removed by erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353703,"byte_end":353759,"line_start":285,"line_end":285,"column_start":1,"column_end":57}},{"value":"/ let dot_near_boundary = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353760,"byte_end":353800,"line_start":286,"line_end":286,"column_start":1,"column_end":41}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353801,"byte_end":353833,"line_start":287,"line_end":287,"column_start":1,"column_end":33}},{"value":"/       0, 255,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353834,"byte_end":353866,"line_start":288,"line_end":288,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353867,"byte_end":353899,"line_start":289,"line_end":289,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353900,"byte_end":353932,"line_start":290,"line_end":290,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353933,"byte_end":353964,"line_start":291,"line_end":291,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353965,"byte_end":353971,"line_start":292,"line_end":292,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353972,"byte_end":353975,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ let closed_dot_near_boundary = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":353976,"byte_end":354023,"line_start":294,"line_end":294,"column_start":1,"column_end":48}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354024,"byte_end":354056,"line_start":295,"line_end":295,"column_start":1,"column_end":33}},{"value":"/     255, 255,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354057,"byte_end":354089,"line_start":296,"line_end":296,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354090,"byte_end":354122,"line_start":297,"line_end":297,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354123,"byte_end":354155,"line_start":298,"line_end":298,"column_start":1,"column_end":33}},{"value":"/       0,   0,   0,   0,   0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354156,"byte_end":354187,"line_start":299,"line_end":299,"column_start":1,"column_end":32}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354188,"byte_end":354194,"line_start":300,"line_end":300,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354195,"byte_end":354198,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354199,"byte_end":354221,"line_start":302,"line_end":302,"column_start":1,"column_end":23}},{"value":"/     close(&dot_near_boundary, Norm::LInf, 1),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354222,"byte_end":354271,"line_start":303,"line_end":303,"column_start":1,"column_end":50}},{"value":"/     closed_dot_near_boundary","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354272,"byte_end":354304,"line_start":304,"line_end":304,"column_start":1,"column_end":33}},{"value":"/ );","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354305,"byte_end":354311,"line_start":305,"line_end":305,"column_start":1,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354312,"byte_end":354319,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354320,"byte_end":354327,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1131},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354709,"byte_end":354718,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"close_mut","qualname":"::morphology::close_mut","value":"pub fn close_mut(&mut GrayImage, Norm, u8)","parent":null,"children":[],"decl_id":null,"docs":" Dilation followed by erosion.","sig":null,"attributes":[{"value":"/ Dilation followed by erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354472,"byte_end":354505,"line_start":314,"line_end":314,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354506,"byte_end":354509,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ See the [`close`](fn.close.html) documentation for examples,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354510,"byte_end":354574,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/ and the [`erode`](fn.erode.html) and [`dilate`](fn.dilate.html)","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354575,"byte_end":354642,"line_start":317,"line_end":317,"column_start":1,"column_end":68}},{"value":"/ documentation for definitions of dilation and erosion.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/morphology.rs","byte_start":354643,"byte_end":354701,"line_start":318,"line_end":318,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"noise","qualname":"::noise","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1154}],"decl_id":null,"docs":" Functions for adding synthetic noise to images.\n","sig":null,"attributes":[{"value":"/ Functions for adding synthetic noise to images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":359296,"byte_end":359347,"line_start":1,"line_end":1,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":359689,"byte_end":359703,"line_start":12,"line_end":12,"column_start":8,"column_end":22},"name":"gaussian_noise","qualname":"::noise::gaussian_noise","value":"pub fn gaussian_noise<P>(&Image<P>, f64, f64, u64) -> Image<P> where\nP: Pixel + 'static, P::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":359560,"byte_end":359620,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ of an image, with the given mean and standard deviation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":359621,"byte_end":359681,"line_start":11,"line_end":11,"column_start":1,"column_end":61}}]},{"kind":"Function","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360086,"byte_end":360104,"line_start":24,"line_end":24,"column_start":8,"column_end":26},"name":"gaussian_noise_mut","qualname":"::noise::gaussian_noise_mut","value":"pub fn gaussian_noise_mut<P>(&mut Image<P>, f64, f64, u64) where P: Pixel +\n'static, P::Subpixel: ValueInto<f64> + Clamp<f64>","parent":null,"children":[],"decl_id":null,"docs":" Adds independent additive Gaussian noise to all channels\n of an image in place, with the given mean and standard deviation.\n","sig":null,"attributes":[{"value":"/ Adds independent additive Gaussian noise to all channels","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":359948,"byte_end":360008,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/ of an image in place, with the given mean and standard deviation.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360009,"byte_end":360078,"line_start":23,"line_end":23,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1152},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360688,"byte_end":360709,"line_start":42,"line_end":42,"column_start":8,"column_end":29},"name":"salt_and_pepper_noise","qualname":"::noise::salt_and_pepper_noise","value":"pub fn salt_and_pepper_noise<P>(&Image<P>, f64, u64) -> Image<P> where\nP: Pixel + HasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360550,"byte_end":360630,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360631,"byte_end":360680,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1154},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":361063,"byte_end":361088,"line_start":53,"line_end":53,"column_start":8,"column_end":33},"name":"salt_and_pepper_noise_mut","qualname":"::noise::salt_and_pepper_noise_mut","value":"pub fn salt_and_pepper_noise_mut<P>(&mut Image<P>, f64, u64) where P: Pixel +\nHasBlack + HasWhite + 'static","parent":null,"children":[],"decl_id":null,"docs":" Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).\n Black and white occur with equal probability.\n","sig":null,"attributes":[{"value":"/ Converts pixels to black or white in place at the given `rate` (between 0.0 and 1.0).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":360916,"byte_end":361005,"line_start":51,"line_end":51,"column_start":1,"column_end":90}},{"value":"/ Black and white occur with equal probability.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/noise.rs","byte_start":361006,"byte_end":361055,"line_start":52,"line_end":52,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pixelops","qualname":"::pixelops","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1166}],"decl_id":null,"docs":" Pixel manipulations.\n","sig":null,"attributes":[{"value":"/ Pixel manipulations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362107,"byte_end":362131,"line_start":1,"line_end":1,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362690,"byte_end":362702,"line_start":25,"line_end":25,"column_start":8,"column_end":20},"name":"weighted_sum","qualname":"::pixelops::weighted_sum","value":"pub fn weighted_sum<P: Pixel>(P, P, f32, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","sig":null,"attributes":[{"value":"/ Adds pixels with the given weights. Results are clamped to prevent arithmetical overflows.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362227,"byte_end":362321,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362322,"byte_end":362325,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362326,"byte_end":362340,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362341,"byte_end":362348,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362349,"byte_end":362374,"line_start":12,"line_end":12,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362375,"byte_end":362404,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362405,"byte_end":362422,"line_start":14,"line_end":14,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362423,"byte_end":362442,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::weighted_sum;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362443,"byte_end":362485,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362486,"byte_end":362489,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362490,"byte_end":362529,"line_start":18,"line_end":18,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362530,"byte_end":362571,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362572,"byte_end":362575,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let sum = weighted_sum(left, right, 0.7, 0.3);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362576,"byte_end":362626,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362627,"byte_end":362666,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362667,"byte_end":362674,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362675,"byte_end":362682,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363369,"byte_end":363380,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"interpolate","qualname":"::pixelops::interpolate","value":"pub fn interpolate<P: Pixel>(P, P, f32) -> P where\nP::Subpixel: ValueInto<f32> + Clamp<f32>","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","sig":null,"attributes":[{"value":"/ Equivalent to `weighted_sum(left, right, left_weight, 1 - left_weight)`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":362931,"byte_end":363007,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363008,"byte_end":363011,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363012,"byte_end":363026,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363027,"byte_end":363034,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363035,"byte_end":363060,"line_start":38,"line_end":38,"column_start":1,"column_end":26}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363061,"byte_end":363090,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363091,"byte_end":363108,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/ use image::Rgb;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363109,"byte_end":363128,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/ use imageproc::pixelops::interpolate;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363129,"byte_end":363170,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363171,"byte_end":363174,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ let left = Rgb([10u8, 20u8, 30u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363175,"byte_end":363214,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/ let right = Rgb([100u8, 80u8, 60u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363215,"byte_end":363256,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363257,"byte_end":363260,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let sum = interpolate(left, right, 0.7);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363261,"byte_end":363305,"line_start":47,"line_end":47,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(sum, Rgb([37, 38, 39]));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363306,"byte_end":363345,"line_start":48,"line_end":48,"column_start":1,"column_end":40}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363346,"byte_end":363353,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/pixelops.rs","byte_start":363354,"byte_end":363361,"line_start":50,"line_end":50,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rect","qualname":"::rect","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1753},{"krate":0,"index":1769},{"krate":0,"index":1767},{"krate":0,"index":1765},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1770},{"krate":0,"index":1784},{"krate":0,"index":1782},{"krate":0,"index":1780},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1186}],"decl_id":null,"docs":" Basic manipulation of rectangles.\n","sig":null,"attributes":[{"value":"/ Basic manipulation of rectangles.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365606,"byte_end":365643,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366356,"byte_end":366360,"line_start":25,"line_end":25,"column_start":12,"column_end":16},"name":"Rect","qualname":"::rect::Rect","value":"Rect {  }","parent":null,"children":[{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757}],"decl_id":null,"docs":" A rectangular region of non-zero width and height.\n # Examples\n ```\n use imageproc::rect::Rect;\n use imageproc::rect::Region;","sig":null,"attributes":[{"value":"/ A rectangular region of non-zero width and height.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365660,"byte_end":365714,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365715,"byte_end":365729,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365730,"byte_end":365737,"line_start":7,"line_end":7,"column_start":1,"column_end":8}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365738,"byte_end":365768,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365769,"byte_end":365801,"line_start":9,"line_end":9,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365802,"byte_end":365805,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ // Construct a rectangle with top-left corner at (4, 5), width 6 and height 7.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365806,"byte_end":365888,"line_start":11,"line_end":11,"column_start":1,"column_end":83}},{"value":"/ let rect = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365889,"byte_end":365933,"line_start":12,"line_end":12,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365934,"byte_end":365937,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // Contains top-left point:","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365938,"byte_end":365969,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.left(), 4);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":365970,"byte_end":366001,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(rect.top(), 5);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366002,"byte_end":366032,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ assert!(rect.contains(rect.left(), rect.top()));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366033,"byte_end":366085,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366086,"byte_end":366089,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // Contains bottom-right point, at (left + width - 1, top + height - 1):","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366090,"byte_end":366166,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ assert_eq!(rect.right(), 9);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366167,"byte_end":366199,"line_start":20,"line_end":20,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(rect.bottom(), 11);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366200,"byte_end":366234,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/ assert!(rect.contains(rect.right(), rect.bottom()));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366235,"byte_end":366291,"line_start":22,"line_end":22,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366292,"byte_end":366299,"line_start":23,"line_end":23,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366517,"byte_end":366523,"line_start":33,"line_end":33,"column_start":11,"column_end":17},"name":"Region","qualname":"::rect::Region","value":"Region<T>","parent":null,"children":[{"krate":0,"index":1172}],"decl_id":null,"docs":" A geometrical representation of a set of 2D points with coordinate type T.\n","sig":null,"attributes":[{"value":"/ A geometrical representation of a set of 2D points with coordinate type T.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366428,"byte_end":366506,"line_start":32,"line_end":32,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366590,"byte_end":366598,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"contains","qualname":"::rect::Region::contains","value":"pub fn contains(&Self, T, T) -> bool","parent":{"krate":0,"index":1170},"children":[],"decl_id":null,"docs":" Whether this region contains the given point.\n","sig":null,"attributes":[{"value":"/ Whether this region contains the given point.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366533,"byte_end":366582,"line_start":34,"line_end":34,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366837,"byte_end":366839,"line_start":43,"line_end":43,"column_start":12,"column_end":14},"name":"at","qualname":"<Rect>::at","value":"pub fn at(i32, i32) -> RectPosition","parent":null,"children":[],"decl_id":null,"docs":" Reduces possibility of confusing coordinates and dimensions\n when specifying rects.","sig":null,"attributes":[{"value":"/ Reduces possibility of confusing coordinates and dimensions","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366646,"byte_end":366709,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ when specifying rects.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366714,"byte_end":366740,"line_start":40,"line_end":40,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366745,"byte_end":366748,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366753,"byte_end":366825,"line_start":42,"line_end":42,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367065,"byte_end":367068,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"top","qualname":"<Rect>::top","value":"pub fn top(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest y-coordinate reached by rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366926,"byte_end":366968,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366973,"byte_end":366976,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366981,"byte_end":367053,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367252,"byte_end":367256,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"left","qualname":"<Rect>::left","value":"pub fn left(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Smallest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Smallest x-coordinate reached by rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367113,"byte_end":367155,"line_start":54,"line_end":54,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367160,"byte_end":367163,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367168,"byte_end":367240,"line_start":56,"line_end":56,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367441,"byte_end":367447,"line_start":64,"line_end":64,"column_start":12,"column_end":18},"name":"bottom","qualname":"<Rect>::bottom","value":"pub fn bottom(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest y-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest y-coordinate reached by rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367302,"byte_end":367344,"line_start":61,"line_end":61,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367349,"byte_end":367352,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367357,"byte_end":367429,"line_start":63,"line_end":63,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367658,"byte_end":367663,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"right","qualname":"<Rect>::right","value":"pub fn right(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Greatest x-coordinate reached by rect.","sig":null,"attributes":[{"value":"/ Greatest x-coordinate reached by rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367519,"byte_end":367561,"line_start":68,"line_end":68,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367566,"byte_end":367569,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ See the [struct-level documentation](struct.Rect.html) for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367574,"byte_end":367646,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367765,"byte_end":367770,"line_start":76,"line_end":76,"column_start":12,"column_end":17},"name":"width","qualname":"<Rect>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Width of rect.\n","sig":null,"attributes":[{"value":"/ Width of rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367735,"byte_end":367753,"line_start":75,"line_end":75,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367848,"byte_end":367854,"line_start":81,"line_end":81,"column_start":12,"column_end":18},"name":"height","qualname":"<Rect>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Height of rect.\n","sig":null,"attributes":[{"value":"/ Height of rect.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367817,"byte_end":367836,"line_start":80,"line_end":80,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368710,"byte_end":368719,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"intersect","qualname":"<Rect>::intersect","value":"pub fn intersect(&Self, Rect) -> Option<Rect>","parent":null,"children":[],"decl_id":null,"docs":" Returns the intersection of self and other, or none if they are are disjoint.","sig":null,"attributes":[{"value":"/ Returns the intersection of self and other, or none if they are are disjoint.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367902,"byte_end":367983,"line_start":85,"line_end":85,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367988,"byte_end":367991,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":367996,"byte_end":368010,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368015,"byte_end":368022,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use imageproc::rect::Rect;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368027,"byte_end":368057,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/ use imageproc::rect::Region;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368062,"byte_end":368094,"line_start":90,"line_end":90,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368099,"byte_end":368102,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ // Intersecting a rectangle with itself","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368107,"byte_end":368150,"line_start":92,"line_end":92,"column_start":5,"column_end":48}},{"value":"/ let r = Rect::at(4, 5).of_size(6, 7);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368155,"byte_end":368196,"line_start":93,"line_end":93,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(r), Some(r));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368201,"byte_end":368241,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368246,"byte_end":368249,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ // Intersecting overlapping but non-equal rectangles","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368254,"byte_end":368310,"line_start":96,"line_end":96,"column_start":5,"column_end":61}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368315,"byte_end":368356,"line_start":97,"line_end":97,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(1, 4).of_size(10, 12);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368361,"byte_end":368404,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/ let i = Rect::at(1, 4).of_size(4, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368409,"byte_end":368450,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(r.intersect(s), Some(i));","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368455,"byte_end":368495,"line_start":100,"line_end":100,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368500,"byte_end":368503,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ // Intersecting disjoint rectangles","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368508,"byte_end":368547,"line_start":102,"line_end":102,"column_start":5,"column_end":44}},{"value":"/ let r = Rect::at(0, 0).of_size(5, 5);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368552,"byte_end":368593,"line_start":103,"line_end":103,"column_start":5,"column_end":46}},{"value":"/ let s = Rect::at(10, 10).of_size(100, 12);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368598,"byte_end":368644,"line_start":104,"line_end":104,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(r.intersect(s), None);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368649,"byte_end":368686,"line_start":105,"line_end":105,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":368691,"byte_end":368698,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1770},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369788,"byte_end":369800,"line_start":144,"line_end":144,"column_start":12,"column_end":24},"name":"RectPosition","qualname":"::rect::RectPosition","value":"RectPosition {  }","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" Position of the top left of a rectangle.\n Only used when building a [`Rect`](struct.Rect.html).\n","sig":null,"attributes":[{"value":"/ Position of the top left of a rectangle.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369629,"byte_end":369673,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/ Only used when building a [`Rect`](struct.Rect.html).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369674,"byte_end":369731,"line_start":142,"line_end":142,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":370064,"byte_end":370071,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"of_size","qualname":"<RectPosition>::of_size","value":"pub fn of_size(Self, u32, u32) -> Rect","parent":null,"children":[],"decl_id":null,"docs":" Construct a rectangle from a position and size. Width and height\n are required to be strictly positive.","sig":null,"attributes":[{"value":"/ Construct a rectangle from a position and size. Width and height","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369859,"byte_end":369927,"line_start":150,"line_end":150,"column_start":5,"column_end":73}},{"value":"/ are required to be strictly positive.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369932,"byte_end":369973,"line_start":151,"line_end":151,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369978,"byte_end":369981,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ See the [`Rect`](struct.Rect.html) documentation for examples.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369986,"byte_end":370052,"line_start":153,"line_end":153,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1188},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"region_labelling","qualname":"::region_labelling","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":2443},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1785},{"krate":0,"index":1799},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1792},{"krate":0,"index":1790},{"krate":0,"index":1197}],"decl_id":null,"docs":" Functions for finding and labelling connected components of an image.\n","sig":null,"attributes":[{"value":"/ Functions for finding and labelling connected components of an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":370969,"byte_end":371042,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1786},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371412,"byte_end":371416,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Four","qualname":"::region_labelling::Connectivity::Four","value":"Connectivity::Four","parent":{"krate":0,"index":1785},"children":[],"decl_id":null,"docs":" A pixel is connected to its N, S, E and W neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to its N, S, E and W neighbors.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371351,"byte_end":371407,"line_start":13,"line_end":13,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371476,"byte_end":371481,"line_start":16,"line_end":16,"column_start":5,"column_end":10},"name":"Eight","qualname":"::region_labelling::Connectivity::Eight","value":"Connectivity::Eight","parent":{"krate":0,"index":1785},"children":[],"decl_id":null,"docs":" A pixel is connected to all of its neighbors.\n","sig":null,"attributes":[{"value":"/ A pixel is connected to all of its neighbors.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371422,"byte_end":371471,"line_start":15,"line_end":15,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":1785},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371332,"byte_end":371344,"line_start":12,"line_end":12,"column_start":10,"column_end":22},"name":"Connectivity","qualname":"::region_labelling::Connectivity","value":"pub enum Connectivity {\n\n    /// A pixel is connected to its N, S, E and W neighbors.\n    Four,\n\n    /// A pixel is connected to all of its neighbors.\n    Eight,\n}","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1788}],"decl_id":null,"docs":" Determines which neighbors of a pixel we consider\n to be connected to it.\n","sig":null,"attributes":[{"value":"/ Determines which neighbors of a pixel we consider","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371197,"byte_end":371250,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/ to be connected to it.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371251,"byte_end":371277,"line_start":10,"line_end":10,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1197},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374599,"byte_end":374619,"line_start":121,"line_end":121,"column_start":8,"column_end":28},"name":"connected_components","qualname":"::region_labelling::connected_components","value":"pub fn connected_components<I>(&I, Connectivity, I::Pixel) -> Image<Luma<u32>>\nwhere I: GenericImage, I::Pixel: Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns an image of the same size as the input, where each pixel\n is labelled by the connected foreground component it belongs to,\n or 0 if it's in the background. Input pixels are treated as belonging\n to the background if and only if they are equal to the provided background pixel.","sig":null,"attributes":[{"value":"/ Returns an image of the same size as the input, where each pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371486,"byte_end":371554,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ is labelled by the connected foreground component it belongs to,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371555,"byte_end":371623,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ or 0 if it's in the background. Input pixels are treated as belonging","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371624,"byte_end":371697,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ to the background if and only if they are equal to the provided background pixel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371698,"byte_end":371783,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371784,"byte_end":371787,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371788,"byte_end":371800,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ Panics if the image contains 2<sup>32</sup> or more pixels. If this limitation causes you","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371801,"byte_end":371894,"line_start":25,"line_end":25,"column_start":1,"column_end":94}},{"value":"/ problems then open an issue and we can rewrite this function to support larger images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371895,"byte_end":371985,"line_start":26,"line_end":26,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371986,"byte_end":371989,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":371990,"byte_end":372004,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372005,"byte_end":372008,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372009,"byte_end":372016,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372017,"byte_end":372042,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372043,"byte_end":372061,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372062,"byte_end":372091,"line_start":33,"line_end":33,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372092,"byte_end":372109,"line_start":34,"line_end":34,"column_start":1,"column_end":18}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372110,"byte_end":372130,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372131,"byte_end":372205,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372206,"byte_end":372209,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372210,"byte_end":372249,"line_start":38,"line_end":38,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372250,"byte_end":372253,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372254,"byte_end":372282,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372283,"byte_end":372302,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372303,"byte_end":372322,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372323,"byte_end":372342,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372343,"byte_end":372363,"line_start":44,"line_end":44,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372364,"byte_end":372367,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // With four-way connectivity the foreground regions which","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372368,"byte_end":372430,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/ // are only connected across diagonals belong to different","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372431,"byte_end":372493,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ // connected components.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372494,"byte_end":372522,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372523,"byte_end":372571,"line_start":49,"line_end":49,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372572,"byte_end":372591,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372592,"byte_end":372611,"line_start":51,"line_end":51,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372612,"byte_end":372631,"line_start":52,"line_end":52,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372632,"byte_end":372652,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372653,"byte_end":372656,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372657,"byte_end":372679,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372680,"byte_end":372755,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372756,"byte_end":372781,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372782,"byte_end":372785,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // With eight-way connectivity all foreground pixels in the top two rows","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372786,"byte_end":372862,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ // belong to the same connected component.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372863,"byte_end":372909,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/ let components_eight = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372910,"byte_end":372959,"line_start":61,"line_end":61,"column_start":1,"column_end":50}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372960,"byte_end":372979,"line_start":62,"line_end":62,"column_start":1,"column_end":20}},{"value":"/     0, 1, 1, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":372980,"byte_end":372999,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373000,"byte_end":373019,"line_start":64,"line_end":64,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 2);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373020,"byte_end":373040,"line_start":65,"line_end":65,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373041,"byte_end":373044,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373045,"byte_end":373067,"line_start":67,"line_end":67,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Eight, background_color),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373068,"byte_end":373144,"line_start":68,"line_end":68,"column_start":1,"column_end":77}},{"value":"/     components_eight);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373145,"byte_end":373171,"line_start":69,"line_end":69,"column_start":1,"column_end":27}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373172,"byte_end":373179,"line_start":70,"line_end":70,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373180,"byte_end":373187,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373188,"byte_end":373191,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373192,"byte_end":373199,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373200,"byte_end":373225,"line_start":74,"line_end":74,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373226,"byte_end":373244,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373245,"byte_end":373274,"line_start":76,"line_end":76,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373275,"byte_end":373292,"line_start":77,"line_end":77,"column_start":1,"column_end":18}},{"value":"/ // This example is like the first, except that not all of the input foreground","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373293,"byte_end":373375,"line_start":78,"line_end":78,"column_start":1,"column_end":83}},{"value":"/ // pixels are the same color. Pixels of different color are never counted","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373376,"byte_end":373453,"line_start":79,"line_end":79,"column_start":1,"column_end":78}},{"value":"/ // as belonging to the same connected component.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373454,"byte_end":373506,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373507,"byte_end":373510,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ use image::Luma;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373511,"byte_end":373531,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/ use imageproc::region_labelling::{connected_components, Connectivity};","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373532,"byte_end":373606,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373607,"byte_end":373610,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ let background_color = Luma([0u8]);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373611,"byte_end":373650,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373651,"byte_end":373654,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373655,"byte_end":373683,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/     1, 0, 1, 1;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373684,"byte_end":373703,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"/     0, 1, 2, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373704,"byte_end":373723,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373724,"byte_end":373743,"line_start":90,"line_end":90,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373744,"byte_end":373764,"line_start":91,"line_end":91,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373765,"byte_end":373768,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let components_four = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373769,"byte_end":373817,"line_start":93,"line_end":93,"column_start":1,"column_end":49}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373818,"byte_end":373837,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/     0, 3, 4, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373838,"byte_end":373857,"line_start":95,"line_end":95,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373858,"byte_end":373877,"line_start":96,"line_end":96,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 5);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373878,"byte_end":373898,"line_start":97,"line_end":97,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373899,"byte_end":373902,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373903,"byte_end":373925,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/     connected_components(&image, Connectivity::Four, background_color),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":373926,"byte_end":374001,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/     components_four);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374002,"byte_end":374027,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374028,"byte_end":374031,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ // If this behaviour is not what you want then you can first","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374032,"byte_end":374096,"line_start":103,"line_end":103,"column_start":1,"column_end":65}},{"value":"/ // threshold the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374097,"byte_end":374130,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ use imageproc::contrast::threshold;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374131,"byte_end":374170,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374171,"byte_end":374174,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ // Pixels equal to the threshold are treated as background.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374175,"byte_end":374238,"line_start":107,"line_end":107,"column_start":1,"column_end":64}},{"value":"/ let thresholded = threshold(&image, 0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374239,"byte_end":374282,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374283,"byte_end":374286,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ let thresholded_components_four = gray_image!(type: u32,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374287,"byte_end":374347,"line_start":110,"line_end":110,"column_start":1,"column_end":61}},{"value":"/     1, 0, 2, 2;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374348,"byte_end":374367,"line_start":111,"line_end":111,"column_start":1,"column_end":20}},{"value":"/     0, 2, 2, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374368,"byte_end":374387,"line_start":112,"line_end":112,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 0;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374388,"byte_end":374407,"line_start":113,"line_end":113,"column_start":1,"column_end":20}},{"value":"/     0, 0, 0, 3);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374408,"byte_end":374428,"line_start":114,"line_end":114,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374429,"byte_end":374432,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ assert_pixels_eq!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374433,"byte_end":374455,"line_start":116,"line_end":116,"column_start":1,"column_end":23}},{"value":"/     connected_components(&thresholded, Connectivity::Four, background_color),","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374456,"byte_end":374537,"line_start":117,"line_end":117,"column_start":1,"column_end":82}},{"value":"/     thresholded_components_four);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374538,"byte_end":374575,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374576,"byte_end":374583,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/region_labelling.rs","byte_start":374584,"byte_end":374591,"line_start":120,"line_end":120,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":1200},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seam_carving","qualname":"::seam_carving","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":2463},{"krate":0,"index":1211},{"krate":0,"index":1212},{"krate":0,"index":2467},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1225}],"decl_id":null,"docs":" An implementation of [seam carving]. Currently in a pretty rough state.\n See examples/seam_carving.rs for an example.","sig":null,"attributes":[{"value":"/ An implementation of [seam carving]. Currently in a pretty rough state.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381382,"byte_end":381457,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ See examples/seam_carving.rs for an example.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381458,"byte_end":381506,"line_start":2,"line_end":2,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381507,"byte_end":381510,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [seam carving]: https://en.wikipedia.org/wiki/Seam_carving","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381511,"byte_end":381573,"line_start":4,"line_end":4,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1214},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381856,"byte_end":381868,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"VerticalSeam","qualname":"::seam_carving::VerticalSeam","value":"","parent":null,"children":[],"decl_id":null,"docs":" An image seam connecting the bottom of an image to its top (in that order).\n","sig":null,"attributes":[{"value":"/ An image seam connecting the bottom of an image to its top (in that order).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381765,"byte_end":381844,"line_start":12,"line_end":12,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":1217},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":382381,"byte_end":382393,"line_start":22,"line_end":22,"column_start":8,"column_end":20},"name":"shrink_width","qualname":"::seam_carving::shrink_width","value":"pub fn shrink_width<P>(&Image<P>, u32) -> Image<P> where P: Pixel<Subpixel =\nu8> + WithChannel<u16> + WithChannel<i16> + 'static,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Reduces the width of an image using seam carving.","sig":null,"attributes":[{"value":"/ Reduces the width of an image using seam carving.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381881,"byte_end":381934,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381935,"byte_end":381938,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Warning: this is very slow! It implements the algorithm from","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":381939,"byte_end":382003,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/ https://inst.eecs.berkeley.edu/~cs194-26/fa16/hw/proj4-seamcarving/imret.pdf, with some","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":382004,"byte_end":382095,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ extra unnecessary allocations thrown in. Rather than attempting to optimise the implementation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":382096,"byte_end":382194,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ of this inherently slow algorithm, the planned next step is to switch to the algorithm from","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":382195,"byte_end":382290,"line_start":20,"line_end":20,"column_start":1,"column_end":96}},{"value":"/ https://users.cs.cf.ac.uk/Paul.Rosin/resources/papers/seam-carving-ChinaF.pdf.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":382291,"byte_end":382373,"line_start":21,"line_end":21,"column_start":1,"column_end":83}}]},{"kind":"Function","id":{"krate":0,"index":1219},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":383181,"byte_end":383199,"line_start":46,"line_end":46,"column_start":8,"column_end":26},"name":"find_vertical_seam","qualname":"::seam_carving::find_vertical_seam","value":"pub fn find_vertical_seam<P>(&Image<P>) -> VerticalSeam where\nP: Pixel<Subpixel = u8> + WithChannel<u16> + WithChannel<i16> + 'static,\n<P as WithChannel<u16>>::Pixel: HasBlack","parent":null,"children":[],"decl_id":null,"docs":" Computes an 8-connected path from the bottom of the image to the top whose sum of\n gradient magnitudes is minimal.\n","sig":null,"attributes":[{"value":"/ Computes an 8-connected path from the bottom of the image to the top whose sum of","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":383052,"byte_end":383137,"line_start":44,"line_end":44,"column_start":1,"column_end":86}},{"value":"/ gradient magnitudes is minimal.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":383138,"byte_end":383173,"line_start":45,"line_end":45,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":1223},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":385962,"byte_end":385982,"line_start":135,"line_end":135,"column_start":8,"column_end":28},"name":"remove_vertical_seam","qualname":"::seam_carving::remove_vertical_seam","value":"pub fn remove_vertical_seam<P>(&Image<P>, &VerticalSeam) -> Image<P> where\nP: Pixel + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns the result of removing `seam` from `image`.\n","sig":null,"attributes":[{"value":"/ Returns the result of removing `seam` from `image`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":385617,"byte_end":385672,"line_start":130,"line_end":130,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":1225},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":386734,"byte_end":386753,"line_start":162,"line_end":162,"column_start":8,"column_end":27},"name":"draw_vertical_seams","qualname":"::seam_carving::draw_vertical_seams","value":"pub fn draw_vertical_seams(&GrayImage, &[VerticalSeam]) -> Image<Rgb<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Draws a series of `seams` on `image` in red. Assumes that the provided seams were\n removed in the given order from the input image.\n","sig":null,"attributes":[{"value":"/ Draws a series of `seams` on `image` in red. Assumes that the provided seams were","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":386588,"byte_end":386673,"line_start":160,"line_end":160,"column_start":1,"column_end":86}},{"value":"/ removed in the given order from the input image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/seam_carving.rs","byte_start":386674,"byte_end":386726,"line_start":161,"line_end":161,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stats","qualname":"::stats","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","parent":null,"children":[{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1252},{"krate":0,"index":1256}],"decl_id":null,"docs":" Statistical properties of images.\n","sig":null,"attributes":[{"value":"/ Statistical properties of images.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388112,"byte_end":388149,"line_start":1,"line_end":1,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388387,"byte_end":388403,"line_start":10,"line_end":10,"column_start":12,"column_end":28},"name":"ChannelHistogram","qualname":"::stats::ChannelHistogram","value":"ChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":1238}],"decl_id":null,"docs":" A set of per-channel histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel histograms from an image with 8 bits per channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388301,"byte_end":388375,"line_start":9,"line_end":9,"column_start":1,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1238},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388446,"byte_end":388454,"line_start":12,"line_end":12,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::ChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":" Per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel histograms.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388410,"byte_end":388437,"line_start":11,"line_end":11,"column_start":5,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":1240},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388531,"byte_end":388540,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"histogram","qualname":"::stats::histogram","value":"pub fn histogram<P>(&Image<P>) -> ChannelHistogram where P: Pixel<Subpixel =\nu8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a vector of per-channel histograms.\n","sig":null,"attributes":[{"value":"/ Returns a vector of per-channel histograms.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388476,"byte_end":388523,"line_start":15,"line_end":15,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1242},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388981,"byte_end":389007,"line_start":32,"line_end":32,"column_start":12,"column_end":38},"name":"CumulativeChannelHistogram","qualname":"::stats::CumulativeChannelHistogram","value":"CumulativeChannelHistogram { channels }","parent":null,"children":[{"krate":0,"index":1243}],"decl_id":null,"docs":" A set of per-channel cumulative histograms from an image with 8 bits per channel.\n","sig":null,"attributes":[{"value":"/ A set of per-channel cumulative histograms from an image with 8 bits per channel.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":388884,"byte_end":388969,"line_start":31,"line_end":31,"column_start":1,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389061,"byte_end":389069,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"name":"channels","qualname":"::stats::CumulativeChannelHistogram::channels","value":"std::vec::Vec<[u32; 256]>","parent":{"krate":0,"index":1242},"children":[],"decl_id":null,"docs":" Per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Per-channel cumulative histograms.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389014,"byte_end":389052,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1245},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389145,"byte_end":389165,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"cumulative_histogram","qualname":"::stats::cumulative_histogram","value":"pub fn cumulative_histogram<P>(&Image<P>) -> CumulativeChannelHistogram where\nP: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns per-channel cumulative histograms.\n","sig":null,"attributes":[{"value":"/ Returns per-channel cumulative histograms.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389091,"byte_end":389137,"line_start":37,"line_end":37,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1247},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390462,"byte_end":390472,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"percentile","qualname":"::stats::percentile","value":"pub fn percentile(&GrayImage, u8) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `p`th percentile of the pixel intensities in an image.","sig":null,"attributes":[{"value":"/ Returns the `p`th percentile of the pixel intensities in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389537,"byte_end":389607,"line_start":55,"line_end":55,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389608,"byte_end":389611,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ We define the `p`th percentile intensity to be the least `x` such","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389612,"byte_end":389681,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/ that at least `p`% of image pixels have intensity less than or","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389682,"byte_end":389748,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ equal to `x`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389749,"byte_end":389766,"line_start":59,"line_end":59,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389767,"byte_end":389770,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389771,"byte_end":389783,"line_start":61,"line_end":61,"column_start":1,"column_end":13}},{"value":"/ If `p > 100`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389784,"byte_end":389801,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389802,"byte_end":389805,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389806,"byte_end":389820,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389821,"byte_end":389828,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ # extern crate image;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389829,"byte_end":389854,"line_start":66,"line_end":66,"column_start":1,"column_end":26}},{"value":"/ # #[macro_use]","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389855,"byte_end":389873,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # extern crate imageproc;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389874,"byte_end":389903,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/ # fn main() {","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389904,"byte_end":389921,"line_start":69,"line_end":69,"column_start":1,"column_end":18}},{"value":"/ use imageproc::stats::percentile;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389922,"byte_end":389959,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389960,"byte_end":389963,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let image = gray_image!(","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389964,"byte_end":389992,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/     1, 2, 3, 4, 5;","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":389993,"byte_end":390015,"line_start":73,"line_end":73,"column_start":1,"column_end":23}},{"value":"/     6, 7, 8, 9, 10);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390016,"byte_end":390040,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390041,"byte_end":390044,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // The 0th percentile is always 0","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390045,"byte_end":390082,"line_start":76,"line_end":76,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(percentile(&image, 0), 0);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390083,"byte_end":390124,"line_start":77,"line_end":77,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390125,"byte_end":390128,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // Exactly 10% of pixels have intensity <= 1.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390129,"byte_end":390178,"line_start":79,"line_end":79,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(percentile(&image, 10), 1);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390179,"byte_end":390221,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390222,"byte_end":390225,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Fewer than 15% of pixels have intensity <=1, so the 15th percentile is 2.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390226,"byte_end":390306,"line_start":82,"line_end":82,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(percentile(&image, 15), 2);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390307,"byte_end":390349,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390350,"byte_end":390353,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ // All pixels have intensity <= 10.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390354,"byte_end":390393,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(percentile(&image, 100), 10);","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390394,"byte_end":390438,"line_start":86,"line_end":86,"column_start":1,"column_end":45}},{"value":"/ # }","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390439,"byte_end":390446,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390447,"byte_end":390454,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391063,"byte_end":391086,"line_start":108,"line_end":108,"column_start":8,"column_end":31},"name":"root_mean_squared_error","qualname":"::stats::root_mean_squared_error","value":"pub fn root_mean_squared_error<I, J, P>(&I, &J) -> f64 where\nI: GenericImage<Pixel = P>, J: GenericImage<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of the mean of the squares of differences\n between all subpixels in left and right. All channels are considered\n equally. If you do not want this (e.g. if using RGBA) then change\n image formats first.\n","sig":null,"attributes":[{"value":"/ Returns the square root of the mean of the squares of differences","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390818,"byte_end":390887,"line_start":104,"line_end":104,"column_start":1,"column_end":70}},{"value":"/ between all subpixels in left and right. All channels are considered","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390888,"byte_end":390960,"line_start":105,"line_end":105,"column_start":1,"column_end":73}},{"value":"/ equally. If you do not want this (e.g. if using RGBA) then change","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":390961,"byte_end":391030,"line_start":106,"line_end":106,"column_start":1,"column_end":70}},{"value":"/ image formats first.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391031,"byte_end":391055,"line_start":107,"line_end":107,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391621,"byte_end":391647,"line_start":122,"line_end":122,"column_start":8,"column_end":34},"name":"peak_signal_to_noise_ratio","qualname":"::stats::peak_signal_to_noise_ratio","value":"pub fn peak_signal_to_noise_ratio<I, J, P>(&I, &J) -> f64 where\nI: GenericImage<Pixel = P>, J: GenericImage<Pixel = P>, P: Pixel,\nP::Subpixel: ValueInto<f64> + Primitive","parent":null,"children":[],"decl_id":null,"docs":" Returns the peak signal to noise ratio for a clean image and its noisy\n aproximation. All channels are considered equally. If you do not want this\n (e.g. if using RGBA) then change image formats first.\n See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).\n","sig":null,"attributes":[{"value":"/ Returns the peak signal to noise ratio for a clean image and its noisy","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391289,"byte_end":391363,"line_start":118,"line_end":118,"column_start":1,"column_end":75}},{"value":"/ aproximation. All channels are considered equally. If you do not want this","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391364,"byte_end":391442,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/ (e.g. if using RGBA) then change image formats first.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391443,"byte_end":391500,"line_start":120,"line_end":120,"column_start":1,"column_end":58}},{"value":"/ See also [peak signal-to-noise ratio (wikipedia)](https://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio).","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/stats.rs","byte_start":391501,"byte_end":391613,"line_start":121,"line_end":121,"column_start":1,"column_end":113}}]},{"kind":"Mod","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"suppress","qualname":"::suppress","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":2495},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1276}],"decl_id":null,"docs":" Functions for suppressing non-maximal values.\n","sig":null,"attributes":[{"value":"/ Functions for suppressing non-maximal values.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":396984,"byte_end":397033,"line_start":1,"line_end":1,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1270},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":397349,"byte_end":397369,"line_start":10,"line_end":10,"column_start":8,"column_end":28},"name":"suppress_non_maximum","qualname":"::suppress::suppress_non_maximum","value":"pub fn suppress_non_maximum<I, C>(&I, u32) -> ImageBuffer<Luma<C>, Vec<C>>\nwhere I: GenericImage<Pixel = Luma<C>>, C: Primitive + Ord + 'static","parent":null,"children":[],"decl_id":null,"docs":" Returned image has zeroes for all inputs pixels which do not have the greatest\n intensity in the (2 * radius + 1) square block centred on them.\n Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returned image has zeroes for all inputs pixels which do not have the greatest","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":397150,"byte_end":397232,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ intensity in the (2 * radius + 1) square block centred on them.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":397233,"byte_end":397300,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ Ties are resolved lexicographically.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":397301,"byte_end":397341,"line_start":9,"line_end":9,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1276},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":400977,"byte_end":400989,"line_start":110,"line_end":110,"column_start":8,"column_end":20},"name":"local_maxima","qualname":"::suppress::local_maxima","value":"pub fn local_maxima<T>(&[T], u32) -> Vec<T> where T: Position + Score + Copy","parent":null,"children":[],"decl_id":null,"docs":" Returns all items which have the highest score in the\n (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.\n","sig":null,"attributes":[{"value":"/ Returns all items which have the highest score in the","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":400824,"byte_end":400881,"line_start":108,"line_end":108,"column_start":1,"column_end":58}},{"value":"/ (2 * radius + 1) square block centred on them. Ties are resolved lexicographically.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/suppress.rs","byte_start":400882,"byte_end":400969,"line_start":109,"line_end":109,"column_start":1,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"template_matching","qualname":"::template_matching","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":2513},{"krate":0,"index":1802},{"krate":0,"index":1821},{"krate":0,"index":1819},{"krate":0,"index":1817},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1294},{"krate":0,"index":1822},{"krate":0,"index":1845},{"krate":0,"index":1842},{"krate":0,"index":1839},{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1295}],"decl_id":null,"docs":" Functions for performing template matching.\n","sig":null,"attributes":[{"value":"/ Functions for performing template matching.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410189,"byte_end":410236,"line_start":1,"line_end":1,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1803},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410723,"byte_end":410741,"line_start":15,"line_end":15,"column_start":5,"column_end":23},"name":"SumOfSquaredErrors","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrors","value":"MatchTemplateMethod::SumOfSquaredErrors","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Sum of the squares of the difference between image and template pixel\n intensities.","sig":null,"attributes":[{"value":"/ Sum of the squares of the difference between image and template pixel","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410581,"byte_end":410654,"line_start":11,"line_end":11,"column_start":5,"column_end":78}},{"value":"/ intensities.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410659,"byte_end":410675,"line_start":12,"line_end":12,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410680,"byte_end":410683,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Smaller values are better.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410688,"byte_end":410718,"line_start":14,"line_end":14,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410832,"byte_end":410860,"line_start":17,"line_end":17,"column_start":5,"column_end":33},"name":"SumOfSquaredErrorsNormalized","qualname":"::template_matching::MatchTemplateMethod::SumOfSquaredErrorsNormalized","value":"MatchTemplateMethod::SumOfSquaredErrorsNormalized","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Divides the sum computed using `SumOfSquaredErrors` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `SumOfSquaredErrors` by a normalization term.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410747,"byte_end":410827,"line_start":16,"line_end":16,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410934,"byte_end":410950,"line_start":21,"line_end":21,"column_start":5,"column_end":21},"name":"CrossCorrelation","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelation","value":"MatchTemplateMethod::CrossCorrelation","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Cross Correlation","sig":null,"attributes":[{"value":"/ Cross Correlation","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410866,"byte_end":410887,"line_start":18,"line_end":18,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410892,"byte_end":410895,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Higher values are better.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410900,"byte_end":410929,"line_start":20,"line_end":20,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411039,"byte_end":411065,"line_start":23,"line_end":23,"column_start":5,"column_end":31},"name":"CrossCorrelationNormalized","qualname":"::template_matching::MatchTemplateMethod::CrossCorrelationNormalized","value":"MatchTemplateMethod::CrossCorrelationNormalized","parent":{"krate":0,"index":1802},"children":[],"decl_id":null,"docs":" Divides the sum computed using `CrossCorrelation` by a normalization term.\n","sig":null,"attributes":[{"value":"/ Divides the sum computed using `CrossCorrelation` by a normalization term.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410956,"byte_end":411034,"line_start":22,"line_end":22,"column_start":5,"column_end":83}}]},{"kind":"Enum","id":{"krate":0,"index":1802},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410555,"byte_end":410574,"line_start":10,"line_end":10,"column_start":10,"column_end":29},"name":"MatchTemplateMethod","qualname":"::template_matching::MatchTemplateMethod","value":"pub enum MatchTemplateMethod {\n\n    /// Sum of the squares of the difference between image and template pixel\n    /// intensities.\n    ///\n    /// Smaller values are better.\n    SumOfSquaredErrors,\n\n    /// Divides the sum computed using `SumOfSquaredErrors` by a normalization term.\n    SumOfSquaredErrorsNormalized,\n\n    /// Cross Correlation\n    ///\n    /// Higher values are better.\n    CrossCorrelation,\n\n    /// Divides the sum computed using `CrossCorrelation` by a normalization term.\n    CrossCorrelationNormalized,\n}","parent":null,"children":[{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809}],"decl_id":null,"docs":" Method used to compute the matching score between a template and an image region.\n","sig":null,"attributes":[{"value":"/ Method used to compute the matching score between a template and an image region.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":410415,"byte_end":410500,"line_start":8,"line_end":8,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411445,"byte_end":411459,"line_start":36,"line_end":36,"column_start":8,"column_end":22},"name":"match_template","qualname":"::template_matching::match_template","value":"pub fn match_template(&GrayImage, &GrayImage, MatchTemplateMethod)\n-> Image<Luma<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Slides a `template` over an `image` and scores the match at each point using\n the requested `method`.","sig":null,"attributes":[{"value":"/ Slides a `template` over an `image` and scores the match at each point using","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411070,"byte_end":411150,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ the requested `method`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411151,"byte_end":411178,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411179,"byte_end":411182,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The returned image has dimensions `image.width() - template.width() + 1` by","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411183,"byte_end":411262,"line_start":29,"line_end":29,"column_start":1,"column_end":80}},{"value":"/ `image.height() - template.height() + 1`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411263,"byte_end":411308,"line_start":30,"line_end":30,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411309,"byte_end":411312,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411313,"byte_end":411325,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411326,"byte_end":411329,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ If either dimension of `template` is not strictly less than the corresponding dimension","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411330,"byte_end":411421,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/ of `image`.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":411422,"byte_end":411437,"line_start":35,"line_end":35,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1822},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414651,"byte_end":414659,"line_start":137,"line_end":137,"column_start":12,"column_end":20},"name":"Extremes","qualname":"::template_matching::Extremes","value":"Extremes { max_value, min_value, max_value_location, min_value_location }","parent":null,"children":[{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827}],"decl_id":null,"docs":" The largest and smallest values in an image,\n together with their locations.\n","sig":null,"attributes":[{"value":"/ The largest and smallest values in an image,","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414511,"byte_end":414559,"line_start":134,"line_end":134,"column_start":1,"column_end":49}},{"value":"/ together with their locations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414560,"byte_end":414594,"line_start":135,"line_end":135,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1824},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414712,"byte_end":414721,"line_start":139,"line_end":139,"column_start":9,"column_end":18},"name":"max_value","qualname":"::template_matching::Extremes::max_value","value":"T","parent":{"krate":0,"index":1822},"children":[],"decl_id":null,"docs":" The largest value in an image.\n","sig":null,"attributes":[{"value":"/ The largest value in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414669,"byte_end":414703,"line_start":138,"line_end":138,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1825},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414774,"byte_end":414783,"line_start":141,"line_end":141,"column_start":9,"column_end":18},"name":"min_value","qualname":"::template_matching::Extremes::min_value","value":"T","parent":{"krate":0,"index":1822},"children":[],"decl_id":null,"docs":" The smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The smallest value in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414730,"byte_end":414765,"line_start":140,"line_end":140,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414854,"byte_end":414872,"line_start":143,"line_end":143,"column_start":9,"column_end":27},"name":"max_value_location","qualname":"::template_matching::Extremes::max_value_location","value":"(u32, u32)","parent":{"krate":0,"index":1822},"children":[],"decl_id":null,"docs":" The coordinates of the largest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the largest value in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414792,"byte_end":414845,"line_start":142,"line_end":142,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1827},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414953,"byte_end":414971,"line_start":145,"line_end":145,"column_start":9,"column_end":27},"name":"min_value_location","qualname":"::template_matching::Extremes::min_value_location","value":"(u32, u32)","parent":{"krate":0,"index":1822},"children":[],"decl_id":null,"docs":" The coordinates of the smallest value in an image.\n","sig":null,"attributes":[{"value":"/ The coordinates of the smallest value in an image.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414890,"byte_end":414944,"line_start":144,"line_end":144,"column_start":5,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":415157,"byte_end":415170,"line_start":150,"line_end":150,"column_start":8,"column_end":21},"name":"find_extremes","qualname":"::template_matching::find_extremes","value":"pub fn find_extremes<T>(&Image<Luma<T>>) -> Extremes<T> where T: Primitive +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Finds the largest and smallest values in an image and their locations.\n If there are multiple such values then the lexicographically smallest is returned.\n","sig":null,"attributes":[{"value":"/ Finds the largest and smallest values in an image and their locations.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":414988,"byte_end":415062,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/ If there are multiple such values then the lexicographically smallest is returned.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/template_matching.rs","byte_start":415063,"byte_end":415149,"line_start":149,"line_end":149,"column_start":1,"column_end":87}}]},{"kind":"Mod","id":{"krate":0,"index":1297},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"union_find","qualname":"::union_find","value":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1302}],"decl_id":null,"docs":" An implementation of disjoint set forests for union find.\n","sig":null,"attributes":[{"value":"/ An implementation of disjoint set forests for union find.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":421744,"byte_end":421805,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":421863,"byte_end":421880,"line_start":4,"line_end":4,"column_start":12,"column_end":29},"name":"DisjointSetForest","qualname":"::union_find::DisjointSetForest","value":"DisjointSetForest {  }","parent":null,"children":[{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301}],"decl_id":null,"docs":" Data structure for efficient union find.\n","sig":null,"attributes":[{"value":"/ Data structure for efficient union find.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":421807,"byte_end":421851,"line_start":3,"line_end":3,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422271,"byte_end":422274,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<DisjointSetForest>::new","value":"pub fn new(usize) -> DisjointSetForest","parent":null,"children":[],"decl_id":null,"docs":" Constructs forest of singletons with count elements.\n","sig":null,"attributes":[{"value":"/ Constructs forest of singletons with count elements.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422203,"byte_end":422259,"line_start":16,"line_end":16,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422585,"byte_end":422594,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"num_trees","qualname":"<DisjointSetForest>::num_trees","value":"pub fn num_trees(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trees in the forest.\n","sig":null,"attributes":[{"value":"/ Returns the number of trees in the forest.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422527,"byte_end":422573,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1306},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422888,"byte_end":422892,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"root","qualname":"<DisjointSetForest>::root","value":"pub fn root(&mut Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns index of the root of the tree containing i.\n Needs mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns index of the root of the tree containing i.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422759,"byte_end":422814,"line_start":35,"line_end":35,"column_start":5,"column_end":60}},{"value":"/ Needs mutable reference to self for path compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422819,"byte_end":422876,"line_start":36,"line_end":36,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1307},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":423418,"byte_end":423422,"line_start":55,"line_end":55,"column_start":12,"column_end":16},"name":"find","qualname":"<DisjointSetForest>::find","value":"pub fn find(&mut Self, usize, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if i and j are in the same tree.\n Need mutable reference to self for path compression.\n","sig":null,"attributes":[{"value":"/ Returns true if i and j are in the same tree.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":423296,"byte_end":423345,"line_start":53,"line_end":53,"column_start":5,"column_end":54}},{"value":"/ Need mutable reference to self for path compression.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":423350,"byte_end":423406,"line_start":54,"line_end":54,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":423615,"byte_end":423620,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"union","qualname":"<DisjointSetForest>::union","value":"pub fn union(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Unions the trees containing i and j.\n","sig":null,"attributes":[{"value":"/ Unions the trees containing i and j.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":423563,"byte_end":423603,"line_start":60,"line_end":60,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":424343,"byte_end":424348,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"trees","qualname":"<DisjointSetForest>::trees","value":"pub fn trees(&mut Self) -> Vec<Vec<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the elements of each tree.\n","sig":null,"attributes":[{"value":"/ Returns the elements of each tree.","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":424293,"byte_end":424331,"line_start":81,"line_end":81,"column_start":5,"column_end":43}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42192,"byte_end":42198,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42370,"byte_end":42376,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42562,"byte_end":42568,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":72399,"byte_end":72412,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":72871,"byte_end":72874,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73229,"byte_end":73238,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73515,"byte_end":73518,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73882,"byte_end":73888,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91218,"byte_end":91219,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91788,"byte_end":91793,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107284,"byte_end":107301,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":373}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":108223,"byte_end":108240,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109381,"byte_end":109403,"line_start":100,"line_end":100,"column_start":30,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110065,"byte_end":110087,"line_start":117,"line_end":117,"column_start":43,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110596,"byte_end":110621,"line_start":134,"line_end":134,"column_start":30,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":111603,"byte_end":111628,"line_start":157,"line_end":157,"column_start":43,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":116116,"byte_end":116123,"line_start":310,"line_end":310,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126631,"byte_end":126636,"line_start":17,"line_end":17,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":180294,"byte_end":180301,"line_start":250,"line_end":250,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":573},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":147919,"byte_end":147925,"line_start":87,"line_end":87,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188194,"byte_end":188204,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":193987,"byte_end":193997,"line_start":226,"line_end":226,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":194862,"byte_end":194872,"line_start":258,"line_end":258,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236670,"byte_end":236685,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":237169,"byte_end":237180,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":244727,"byte_end":244731,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260366,"byte_end":260376,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":261527,"byte_end":261534,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":271722,"byte_end":271735,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275848,"byte_end":275855,"line_start":450,"line_end":450,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":910},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":276236,"byte_end":276242,"line_start":463,"line_end":463,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307318,"byte_end":307322,"line_start":166,"line_end":166,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307689,"byte_end":307692,"line_start":182,"line_end":182,"column_start":44,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308167,"byte_end":308171,"line_start":198,"line_end":198,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334986,"byte_end":334989,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1037}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335115,"byte_end":335119,"line_start":26,"line_end":26,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335246,"byte_end":335249,"line_start":34,"line_end":34,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335375,"byte_end":335379,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1049}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335506,"byte_end":335510,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1053}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335637,"byte_end":335642,"line_start":58,"line_end":58,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1057}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366635,"byte_end":366639,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369248,"byte_end":369252,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1183}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369417,"byte_end":369421,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369840,"byte_end":369852,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422179,"byte_end":422196,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":875,"byte_end":880,"line_start":33,"line_end":33,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":890,"byte_end":898,"line_start":34,"line_end":34,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":86}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":908,"byte_end":915,"line_start":35,"line_end":35,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":121}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":925,"byte_end":936,"line_start":36,"line_end":36,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":156}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":946,"byte_end":964,"line_start":37,"line_end":37,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":187}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":974,"byte_end":981,"line_start":38,"line_end":38,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":250}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":991,"byte_end":996,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":527}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1006,"byte_end":1012,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":547}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1022,"byte_end":1047,"line_start":41,"line_end":41,"column_start":9,"column_end":34},"ref_id":{"krate":0,"index":663}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1057,"byte_end":1066,"line_start":42,"line_end":42,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":766}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1076,"byte_end":1080,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":802}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1090,"byte_end":1093,"line_start":44,"line_end":44,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":842}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1103,"byte_end":1108,"line_start":45,"line_end":45,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":926}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1118,"byte_end":1132,"line_start":46,"line_end":46,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":948}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1142,"byte_end":1163,"line_start":47,"line_end":47,"column_start":9,"column_end":30},"ref_id":{"krate":0,"index":1002}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1173,"byte_end":1176,"line_start":48,"line_end":48,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1015}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1186,"byte_end":1190,"line_start":49,"line_end":49,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1107}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1200,"byte_end":1210,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1116}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1220,"byte_end":1225,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1132}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1235,"byte_end":1243,"line_start":52,"line_end":52,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1156}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1327,"byte_end":1331,"line_start":55,"line_end":55,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1168}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1341,"byte_end":1357,"line_start":56,"line_end":56,"column_start":9,"column_end":25},"ref_id":{"krate":0,"index":1188}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1367,"byte_end":1379,"line_start":57,"line_end":57,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":1200}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1389,"byte_end":1394,"line_start":58,"line_end":58,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1227}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1404,"byte_end":1412,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1260}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1422,"byte_end":1439,"line_start":60,"line_end":60,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":1279}},{"kind":"Mod","span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/lib.rs","byte_start":1449,"byte_end":1459,"line_start":61,"line_end":61,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1297}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42192,"byte_end":42198,"line_start":19,"line_end":19,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42370,"byte_end":42376,"line_start":26,"line_end":26,"column_start":19,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1312},"to":{"krate":0,"index":177}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/corners.rs","byte_start":42562,"byte_end":42568,"line_start":38,"line_end":38,"column_start":16,"column_end":22},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1312},"to":{"krate":0,"index":180}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":72399,"byte_end":72412,"line_start":227,"line_end":227,"column_start":6,"column_end":19},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":72871,"byte_end":72874,"line_start":251,"line_end":251,"column_start":19,"column_end":22},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":215},"to":{"krate":0,"index":209}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73229,"byte_end":73238,"line_start":268,"line_end":268,"column_start":19,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":223},"to":{"krate":0,"index":209}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73515,"byte_end":73518,"line_start":280,"line_end":280,"column_start":17,"column_end":20},"kind":{"Impl":{"id":50}},"from":{"krate":5,"index":4738},"to":{"krate":0,"index":212}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/distance_transform.rs","byte_start":73882,"byte_end":73888,"line_start":303,"line_end":303,"column_start":21,"column_end":27},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":237},"to":{"krate":0,"index":212}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91218,"byte_end":91219,"line_start":76,"line_end":76,"column_start":20,"column_end":21},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":282},"to":{"krate":0,"index":274}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/canvas.rs","byte_start":91788,"byte_end":91793,"line_start":101,"line_end":101,"column_start":34,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":287},"to":{"krate":0,"index":274}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":107284,"byte_end":107301,"line_start":21,"line_end":21,"column_start":6,"column_end":23},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":108223,"byte_end":108240,"line_start":54,"line_end":54,"column_start":19,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":363},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":109381,"byte_end":109403,"line_start":100,"line_end":100,"column_start":30,"column_end":52},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":380},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110065,"byte_end":110087,"line_start":117,"line_end":117,"column_start":43,"column_end":65},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":380},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":110596,"byte_end":110621,"line_start":134,"line_end":134,"column_start":30,"column_end":55},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":395},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":111603,"byte_end":111628,"line_start":157,"line_end":157,"column_start":43,"column_end":68},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":395},"to":{"krate":2,"index":5304}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/line.rs","byte_start":116116,"byte_end":116123,"line_start":310,"line_end":310,"column_start":19,"column_end":26},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/drawing/polygon.rs","byte_start":126631,"byte_end":126636,"line_start":17,"line_end":17,"column_start":32,"column_end":37},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/median.rs","byte_start":180294,"byte_end":180301,"line_start":250,"line_end":250,"column_start":6,"column_end":13},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/filter/mod.rs","byte_start":147919,"byte_end":147925,"line_start":87,"line_end":87,"column_start":30,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":188194,"byte_end":188204,"line_start":43,"line_end":43,"column_start":6,"column_end":16},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":193987,"byte_end":193997,"line_start":226,"line_end":226,"column_start":26,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/geometric_transformations.rs","byte_start":194862,"byte_end":194872,"line_start":258,"line_end":258,"column_start":26,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1489},"to":{"krate":2,"index":2120}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":236670,"byte_end":236685,"line_start":84,"line_end":84,"column_start":6,"column_end":21},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":237169,"byte_end":237180,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/haar.rs","byte_start":244727,"byte_end":244731,"line_start":318,"line_end":318,"column_start":9,"column_end":13},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1646},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":260366,"byte_end":260376,"line_start":26,"line_end":26,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":261527,"byte_end":261534,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1692},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":271722,"byte_end":271735,"line_start":338,"line_end":338,"column_start":6,"column_end":19},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1710},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":275848,"byte_end":275855,"line_start":450,"line_end":450,"column_start":23,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/hog.rs","byte_start":276236,"byte_end":276242,"line_start":463,"line_end":463,"column_start":13,"column_end":19},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307318,"byte_end":307322,"line_start":166,"line_end":166,"column_start":44,"column_end":48},"kind":{"Impl":{"id":75}},"from":{"krate":16,"index":5954},"to":{"krate":0,"index":971}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":307689,"byte_end":307692,"line_start":182,"line_end":182,"column_start":44,"column_end":47},"kind":{"Impl":{"id":76}},"from":{"krate":16,"index":5896},"to":{"krate":0,"index":971}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/integral_image.rs","byte_start":308167,"byte_end":308171,"line_start":198,"line_end":198,"column_start":44,"column_end":48},"kind":{"Impl":{"id":77}},"from":{"krate":16,"index":5983},"to":{"krate":0,"index":971}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334737,"byte_end":334742,"line_start":10,"line_end":10,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":16,"index":3985},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":334986,"byte_end":334989,"line_start":18,"line_end":18,"column_start":31,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":16,"index":5896},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335115,"byte_end":335119,"line_start":26,"line_end":26,"column_start":31,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":16,"index":5983},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335246,"byte_end":335249,"line_start":34,"line_end":34,"column_start":31,"column_end":34},"kind":{"Impl":{"id":80}},"from":{"krate":16,"index":5925},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335375,"byte_end":335379,"line_start":42,"line_end":42,"column_start":31,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":16,"index":6012},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335506,"byte_end":335510,"line_start":50,"line_end":50,"column_start":31,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":16,"index":5954},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/map.rs","byte_start":335637,"byte_end":335642,"line_start":58,"line_end":58,"column_start":31,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":16,"index":6041},"to":{"krate":0,"index":1028}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":366635,"byte_end":366639,"line_start":38,"line_end":38,"column_start":6,"column_end":10},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369248,"byte_end":369252,"line_start":126,"line_end":126,"column_start":22,"column_end":26},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":1170}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369417,"byte_end":369421,"line_start":132,"line_end":132,"column_start":22,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1753},"to":{"krate":0,"index":1170}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/rect.rs","byte_start":369840,"byte_end":369852,"line_start":149,"line_end":149,"column_start":6,"column_end":18},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/hiroko/.cargo/registry/src/github.com-1ecc6299db9ec823/imageproc-0.20.0/src/union_find.rs","byte_start":422179,"byte_end":422196,"line_start":15,"line_end":15,"column_start":6,"column_end":23},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}}]}